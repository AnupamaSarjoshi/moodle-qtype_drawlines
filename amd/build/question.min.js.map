{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\n *\n * @module     qtype_drawlines/question\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/dragdrop',\n    'qtype_drawlines/Line',\n    'core/key_codes',\n    'core_form/changechecker',\n], function(\n    $,\n    dragDrop,\n    Lines,\n    keys,\n    FormChangeChecker,\n) {\n\n    \"use strict\";\n\n    /**\n     * Object to handle one drag-drop markers question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @param {Object[]} visibleDropZones the geometry of any drop-zones to show.\n     *      Objects have fields line, coords and markertext.\n     * @param {line[]} questionLines\n     * @constructor\n     */\n    function DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines) {\n        var thisQ = this;\n        this.containerId = containerId;\n        this.visibleDropZones = visibleDropZones;\n        this.questionLines = questionLines;\n        this.lineSVGs = [];\n        this.lines = [];\n        this.isPrinting = false;\n        this.questionAnswer = {};\n        this.svgEl = null;\n        if (readOnly) {\n            this.getRoot().addClass('qtype_drawlines-readonly');\n        }\n        thisQ.allImagesLoaded = false;\n        thisQ.getNotYetLoadedImages().one('load', function() {\n            thisQ.waitForAllImagesToBeLoaded();\n        });\n        thisQ.waitForAllImagesToBeLoaded();\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     */\n    DrawlinesQuestion.prototype.updateCoordinates = function() {\n        // We don't need to scale the shape for editing form.\n        for (var line = 0; line < this.lineSVGs.length; line++) {\n            var coordinates = this.getCoordinates(this.lineSVGs[line]);\n            if (!this.lines[line].parse(coordinates[0], coordinates[1], 1)) {\n                // Invalid coordinates. Don't update the preview.\n                return;\n            }\n            this.updateSvgEl(line);\n        }\n    };\n\n    /**\n     * Parse the coordinates from a particular string.\n     * @param {String} coordinates The coordinates to be parsed. The values are in the format: x1,y1 x2,y2.\n     *                             Except for infinite line type where it's in the format x1,y1 x2,y2, x3,y3, x4,y4.\n     *                             Here, x1,y1 and x4,y4 are the two very end points of the infinite line and\n     *                             x2,y2 and x3,y3 are the pints with the handles.\n     * @param {String} lineType The type of the line.\n     */\n    DrawlinesQuestion.prototype.parseCoordinates = function(coordinates, lineType) {\n        var bits = coordinates.split(' ');\n        if (lineType === 'lineinfinite') {\n            // Remove the first and last coordinates.\n            bits = bits.slice(1, -1);\n        }\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return bits;\n    };\n\n    /**\n     * Draws the svg lines of any drop zones.\n     * @param {Object[]} questionLines\n     */\n    DrawlinesQuestion.prototype.drawSVGLines = function(questionLines) {\n        var bgImage = document.querySelector('img.dropbackground'),\n            height, startcoordinates, endcoordinates, draginitialcoords;\n\n        var drags = document.querySelector('.draghomes');\n        drags.innerHTML =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dragshome\" ' +\n                'id= \"que-dlines-svg-dragshome\" ' +\n                'width=\"' + bgImage.width + '\" ' +\n                'height=\"' + questionLines.length * 50 + '\"' +\n            '></svg>';\n\n        var draghomeSvg = document.getElementById('que-dlines-svg-dragshome');\n        var dropzoneSvg = document.getElementById('que-dlines-svg');\n        var initialHeight = 25,\n            dragSVG, bits;\n        for (let line = 0; line < questionLines.length; line++) {\n            height = initialHeight + line * 50;\n            startcoordinates = '50,' + height + ';10';\n            endcoordinates = '200,' + height + ';10';\n\n\n            // Check if the lines are to be set with initial coordinates.\n            // The visibleDropZones array holds the response in the format x1,y1 x2,y2;placed - if the line is in the svgdropzone\n            // else x1,y1 x2,y2;inactive - if the line is in the svg draghomes.\n            dragSVG = '';\n            draginitialcoords = this.visibleDropZones['c' + line];\n            if (draginitialcoords !== undefined && draginitialcoords !== '') {\n                bits = draginitialcoords.split(';');\n                dragSVG = bits[1];\n                var coords = this.parseCoordinates(bits[0], questionLines[line].type);\n                if (dragSVG === 'placed') {\n                    startcoordinates = coords[0] + ';10';\n                    endcoordinates = coords[1] + ';10';\n                }\n            }\n\n            this.lines[line] = Lines.make([startcoordinates, endcoordinates],\n                [questionLines[line].labelstart, questionLines[line].labelend], questionLines[line].type);\n            if (dragSVG === 'placed') {\n                this.addToSvg(line, dropzoneSvg);\n            } else {\n                this.addToSvg(line, draghomeSvg);\n            }\n        }\n    };\n\n    /**\n     * Draws the svg lines of any drop zones that should be visible for feedback purposes.\n     */\n    DrawlinesQuestion.prototype.drawDropzone = function() {\n        var bgImage = document.querySelector('img.dropbackground');\n        var svg = document.querySelector('svg.dropzones');\n        document.getElementById('que-dlines-dropzone').style.position = 'relative';\n        document.getElementById('que-dlines-dropzone').style.top = (bgImage.height + 1) * -1 + \"px\";\n        document.getElementById('que-dlines-dropzone').style.height = bgImage.height + \"px\";\n        document.getElementById('que-dlines-droparea').style.height = bgImage.height + \"px\";\n        if (!svg) {\n            var dropZone = document.querySelector('#que-dlines-dropzone');\n            dropZone.innerHTML =\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n                    'id= \"que-dlines-svg\" ' +\n                    'class= \"dropzones\" ' +\n                    'width=\"' + bgImage.width + '\" ' +\n                    'height=\"' + bgImage.height + '\" ' +\n                '></svg>';\n        }\n        this.drawSVGLines(this.questionLines);\n    };\n\n    //\n    // /**\n    //  * Adds a dropzone line with colour, coords and link provided to the array of Lines.\n    //  *\n    //  * @param {jQuery} svg the SVG image to which to add this drop zone.\n    //  * @param {int} dropZoneNo which drop-zone to add.\n    //  * @param {string} colourClass class name\n    //  */\n    // DrawlinesQuestion.prototype.addDropzone = function(svg, dropZoneNo, colourClass) {\n    //     var dropZone = this.visibleDropZones[dropZoneNo],\n    //         line = Lines.make(dropZone.line, ''),\n    //         existingmarkertext,\n    //         bgRatio = this.bgRatio();\n    //     if (!line.parse(dropZone.coords, bgRatio)) {\n    //         return;\n    //     }\n    //\n    //     existingmarkertext = this.getRoot().find('div.markertexts span.markerlabelstart' + dropZoneNo);\n    //     if (existingmarkertext.length) {\n    //         if (dropZone.markertext !== '') {\n    //             existingmarkertext.html(dropZone.markertext);\n    //         } else {\n    //             existingmarkertext.remove();\n    //         }\n    //     } else if (dropZone.markertext !== '') {\n    //         var classnames = 'markertext markertext' + dropZoneNo;\n    //         this.getRoot().find('div.markertexts').append('<span class=\"' + classnames + '\">' +\n    //             dropZone.markertext + '</span>');\n    //         var markerspan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\n    //         if (markerspan.length) {\n    //             var handles = line.getHandlePositions();\n    //             var positionLeft = handles.moveHandles.x - (markerspan.outerWidth() / 2) - 4;\n    //             var positionTop = handles.moveHandles.y - (markerspan.outerHeight() / 2);\n    //             markerspan\n    //                 .css('left', positionLeft)\n    //                 .css('top', positionTop);\n    //             markerspan\n    //                 .data('originX', markerspan.position().left / bgRatio)\n    //                 .data('originY', markerspan.position().top / bgRatio);\n    //             this.handleElementScale(markerspan, 'center');\n    //         }\n    //     }\n    //\n    //     var lineSVG = line.makeSvg(svg[0]);\n    //     lineSVG.setAttribute('class', 'dropzone ' + colourClass);\n    //\n    //     this.lines[this.Lines.length] = line;\n    //     this.lineSVGs[this.lineSVGs.length] = lineSVG;\n    // };\n\n    /**\n     * Draws the drag items on the page (and drop zones if required).\n     * The idea is to re-draw all the drags and drops whenever there is a change\n     * like a widow resize or an item dropped in place.\n     */\n    DrawlinesQuestion.prototype.repositionDrags = function() {\n        var root = this.getRoot(),\n            thisQ = this;\n\n        root.find('div.draghomes .marker').not('.dragplaceholder').each(function(key, item) {\n            $(item).addClass('unneeded');\n        });\n\n        root.find('input.choices').each(function(key, input) {\n            var choiceNo = thisQ.getChoiceNoFromElement(input),\n                imageCoords = thisQ.getImageCoords(input);\n\n            if (imageCoords.length) {\n                var drag = thisQ.getRoot().find('.draghomes' + ' span.marker' + '.choice' + choiceNo).not('.dragplaceholder');\n                drag.remove();\n                for (var i = 0; i < imageCoords.length; i++) {\n                    var dragInDrop = drag.clone();\n                    // Convert image coords to screen coords.\n                    const screenCoords = thisQ.convertToWindowXY(imageCoords[i]);\n                    dragInDrop.data('pagex', screenCoords.x).data('pagey', screenCoords.y);\n                    // Save image coords to the drag item so we can use it later.\n                    dragInDrop.data('imageCoords', imageCoords[i]);\n                    // We always save the coordinates in the 1:1 ratio.\n                    // So we need to set the scale ratio to 1 for the initial load.\n                    dragInDrop.data('scaleRatio', 1);\n                    thisQ.sendDragToDrop(dragInDrop, false, true);\n                }\n                thisQ.getDragClone(drag).addClass('active');\n                thisQ.cloneDragIfNeeded(drag);\n            }\n        });\n\n        // Save the question answer.\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\n    };\n\n    /**\n     * Get the question answered values.\n     *\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\n     */\n    DrawlinesQuestion.prototype.getQuestionAnsweredValues = function() {\n        let result = {};\n        this.getRoot().find('input.choices').each((i, inputNode) => {\n            result[inputNode.id] = inputNode.value;\n        });\n\n        return result;\n    };\n\n    /**\n     * Check if the question is being interacted or not.\n     *\n     * @return {boolean} Return true if the user has changed the question-answer.\n     */\n    DrawlinesQuestion.prototype.isQuestionInteracted = function() {\n        const oldAnswer = this.questionAnswer;\n        const newAnswer = this.getQuestionAnsweredValues();\n        let isInteracted = false;\n\n        // First, check both answers have the same structure or not.\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\n            isInteracted = true;\n            return isInteracted;\n        }\n        // Check the values.\n        Object.keys(newAnswer).forEach(key => {\n            if (newAnswer[key] !== oldAnswer[key]) {\n                isInteracted = true;\n            }\n        });\n\n        return isInteracted;\n    };\n\n    /**\n     * Determine what drag items need to be shown and\n     * return coords of all drag items except any that are currently being dragged\n     * based on contents of hidden inputs and whether drags are 'infinite' or how many\n     * drags should be shown.\n     *\n     * @param {jQuery} inputNode\n     * @returns {Point[]} image coordinates of however many copies of the drag item should be shown.\n     */\n    DrawlinesQuestion.prototype.getImageCoords = function(inputNode) {\n        var imageCoords = [],\n            val = $(inputNode).val();\n        if (val !== '') {\n            var coordsStrings = val.split(' ');\n            for (var i = 0; i < coordsStrings.length; i++) {\n                imageCoords[i] = Lines.Point.parse(coordsStrings[i]);\n            }\n        }\n        return imageCoords;\n    };\n\n    /**\n     * Converts the relative x and y position coordinates into\n     * absolute x and y position coordinates.\n     *\n     * @param {Point} point relative to the background image.\n     * @returns {Point} point relative to the page.\n     */\n    DrawlinesQuestion.prototype.convertToWindowXY = function(point) {\n        var bgImage = this.bgImage();\n        // The +1 seems rather odd, but seems to give the best results in\n        // the three main browsers at a range of zoom levels.\n        // (Its due to the 1px border around the image, that shifts the\n        // image pixels by 1 down and to the left.)\n        return point.offset(bgImage.offset().left + 1, bgImage.offset().top + 1);\n    };\n\n    /**\n     * Utility function converting window coordinates to relative to the\n     * background image coordinates.\n     *\n     * @param {Point} point relative to the page.\n     * @returns {Point} point relative to the background image.\n     */\n    DrawlinesQuestion.prototype.convertToBgImgXY = function(point) {\n        var bgImage = this.bgImage();\n        return point.offset(-bgImage.offset().left - 1, -bgImage.offset().top - 1);\n    };\n\n    /**\n     * Is the point within the background image?\n     *\n     * @param {Point} point relative to the BG image.\n     * @return {boolean} true it they are.\n     */\n    DrawlinesQuestion.prototype.coordsInBgImg = function(point) {\n        var bgImage = this.bgImage();\n        var bgPosition = bgImage.offset();\n\n        return point.x >= bgPosition.left && point.x < bgPosition.left + bgImage.width()\n            && point.y >= bgPosition.top && point.y < bgPosition.top + bgImage.height();\n    };\n\n    /**\n     * Get the outer div for this question.\n     * @returns {jQuery} containing that div.\n     */\n    DrawlinesQuestion.prototype.getRoot = function() {\n        return $(document.getElementById(this.containerId));\n    };\n\n    /**\n     * Get the img that is the background image.\n     * @returns {jQuery} containing that img.\n     */\n    DrawlinesQuestion.prototype.bgImage = function() {\n        return this.getRoot().find('img.dropbackground');\n    };\n\n    DrawlinesQuestion.prototype.handleDragStart = function(e) {\n        var thisQ = this,\n            dragged = $(e.target).closest('.marker');\n\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        dragged.addClass('beingdragged').css('transform', '');\n\n        var placed = !dragged.hasClass('unneeded');\n        if (!placed) {\n            var hiddenDrag = thisQ.getDragClone(dragged);\n            if (hiddenDrag.length) {\n                hiddenDrag.addClass('active');\n                dragged.offset(hiddenDrag.offset());\n            }\n        }\n\n        dragDrop.start(e, dragged, function() {\n            void (1);\n        }, function(x, y, dragged) {\n            thisQ.dragEnd(dragged);\n        });\n    };\n\n    /**\n     * Functionality at the end of a drag drop.\n     * @param {jQuery} dragged the marker that was dragged.\n     */\n    DrawlinesQuestion.prototype.dragEnd = function(dragged) {\n        var placed = false,\n            choiceNo = this.getChoiceNoFromElement(dragged),\n            bgRatio = this.bgRatio(),\n            dragXY;\n\n        dragged.data('pagex', dragged.offset().left).data('pagey', dragged.offset().top);\n        dragXY = new Lines.Point(dragged.data('pagex'), dragged.data('pagey'));\n        if (this.coordsInBgImg(dragXY)) {\n            this.sendDragToDrop(dragged, true);\n            placed = true;\n            // Since we already move the drag item to new position.\n            // Remove the image coords if this drag item have it.\n            // We will get the new image coords for this drag item in saveCoordsForChoice.\n            if (dragged.data('imageCoords')) {\n                dragged.data('imageCoords', null);\n            }\n            // It seems that the dragdrop sometimes leaves the drag\n            // one pixel out of position. Put it in exactly the right place.\n            var bgImgXY = this.convertToBgImgXY(dragXY);\n            bgImgXY = new Lines.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\n            dragged.data('originX', bgImgXY.x).data('originY', bgImgXY.y);\n        }\n\n        if (!placed) {\n            this.sendDragHome(dragged);\n            this.removeDragIfNeeded(dragged);\n        } else {\n            this.cloneDragIfNeeded(dragged);\n        }\n\n        this.saveCoordsForChoice(choiceNo);\n    };\n\n\n    /**\n     * Returns the coordinates for the line from the text input in the form.\n     * @param {SVGElement} svgEl\n     * @returns {Array} the coordinates.\n     */\n    DrawlinesQuestion.prototype.getCoordinates = function(svgEl) {\n\n        var circleStartXCoords = svgEl.childNodes[1].getAttribute('cx');\n        var circleStartYCoords = svgEl.childNodes[1].getAttribute('cy');\n        var circleStartRCoords = svgEl.childNodes[1].getAttribute('r');\n        var circleEndXCoords = svgEl.childNodes[2].getAttribute('cx');\n        var circleEndYCoords = svgEl.childNodes[2].getAttribute('cy');\n        var circleEndRCoords = svgEl.childNodes[2].getAttribute('r');\n        return [circleStartXCoords + ',' + circleStartYCoords + ';' + circleStartRCoords,\n            circleEndXCoords + ',' + circleEndYCoords + ';' + circleEndRCoords];\n    };\n\n    /**\n     * Return the background ratio.\n     *\n     * @returns {number} Background ratio.\n     */\n    DrawlinesQuestion.prototype.bgRatio = function() {\n        var bgImg = this.bgImage();\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\n        var bgImgClientWidth = bgImg.width();\n\n        return bgImgClientWidth / bgImgNaturalWidth;\n    };\n\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {int} lineNumber Line Number\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    DrawlinesQuestion.prototype.addToSvg = function(lineNumber, svg) {\n        this.lineSVGs[lineNumber] = this.lines[lineNumber].makeSvg(svg);\n        if (!this.lineSVGs[lineNumber]) {\n            return;\n        }\n        this.lineSVGs[lineNumber].setAttribute('data-dropzone-no', lineNumber);\n        if (svg.getAttribute('class') === 'dropzones') {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' placed');\n        } else {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' inactive');\n        }\n    };\n\n    /**\n     * Update the shape of this drop zone (but not type) in an SVG image.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.updateSvgEl = function(dropzoneNo) {\n        this.lines[dropzoneNo].updateSvg(this.lineSVGs[dropzoneNo]);\n    };\n\n    /**\n     * Start responding to dragging the move handle.\n     * @param {Event} e Event object\n     * @param {String} handleIndex\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleMove = function(e, handleIndex, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            svg = document.querySelector('svg.dropzones'),\n            maxX = svg.width.baseVal.value,\n            maxY = svg.height.baseVal.value;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            movingDropZone.lines[dropzoneNo].move(handleIndex,\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY), parseInt(maxX), parseInt(maxY));\n            lastX = pageX;\n            lastY = pageY;\n            movingDropZone.updateSvgEl(dropzoneNo);\n            movingDropZone.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n\n    /**\n     * Start responding to dragging the move handle.\n     * @param {Event} e Event object\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleDragMove = function(e, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDrag = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            svgDragsHome = document.querySelector('svg.dragshome'),\n            svgDropZones = document.querySelector('svg.dropzones'),\n            maxX = svgDragsHome.width.baseVal.value,\n            maxY = svgDragsHome.height.baseVal.value,\n            whichSVG = \"\",\n            bgImage = document.querySelector('img.dropbackground'),\n            isMoveFromDragsToDropzones,\n            isMoveFromDropzonesToDrags,\n            svgClass = '';\n\n        var selectedElement = this.lineSVGs[dropzoneNo];\n        const dropX = e.clientX;\n        const dropY = e.clientY;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n\n            // Check if the drags need to be moved from one svg to another.\n            // If true, the drag is moved from draghomes SVG to dropZone SVG.\n            var closeTo = selectedElement.closest('svg');\n            svgClass = closeTo.getAttribute('class');\n\n            // Moving the drags between the SVG's.\n            isMoveFromDragsToDropzones = (svgClass === \"dragshome\") &&\n                (movingDrag.lines[dropzoneNo].centre1.y === 10);\n            isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n                (movingDrag.lines[dropzoneNo].centre1.y > (bgImage.height - 20));\n            if (isMoveFromDragsToDropzones || isMoveFromDropzonesToDrags) {\n                movingDrag.lines[dropzoneNo].addToDropZone(svgDragsHome, svgDropZones, selectedElement,\n                    dropX, dropY);\n            }\n\n            // Drag the lines within the SVG\n            closeTo = selectedElement.closest('svg');\n            if (closeTo.getAttribute('class') === 'dragshome') {\n                maxX = svgDragsHome.width.baseVal.value;\n                maxY = svgDragsHome.height.baseVal.value;\n                whichSVG = \"DragsSVG\";\n            } else {\n                maxX = svgDropZones.width.baseVal.value;\n                maxY = svgDropZones.height.baseVal.value;\n                whichSVG = \"DropZonesSVG\";\n            }\n            movingDrag.lines[dropzoneNo].moveDrags(\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY),\n                parseInt(maxX), parseInt(maxY), whichSVG);\n            lastX = pageX;\n            lastY = pageY;\n\n            movingDrag.updateSvgEl(dropzoneNo);\n            movingDrag.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    DrawlinesQuestion.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Save the coordinates for a dropped item in the form field.\n     * @param {Number} choiceNo which copy of the choice this was.\n     **/\n    DrawlinesQuestion.prototype.saveCoordsForChoice = function(choiceNo) {\n        let imageCoords = [];\n        var items = this.getRoot().find('svg g.choice' + choiceNo),\n            gEleClassAttributes = '';\n            // thiQ = this,\n            // bgRatio = this.bgRatio();\n        if (items.length) {\n            items.each(function() {\n                var drag = $(this);\n                imageCoords = drag.children('polyline').attr('points');\n                gEleClassAttributes = drag.attr('class');\n                //     if (drag.data('scaleRatio') !== bgRatio) {\n                //         // The scale ratio for the draggable item was changed. We need to update that.\n                //         drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\n                //     }\n                //     var dragXY = new Lines.Point(drag.data('pagex'), drag.data('pagey'));\n                //     window.console.log(\"dragXY:\" + dragXY);\n                //\n                //     window.console.log(\"thiQ:\" + thiQ);\n                //     if (thiQ.coordsInBgImg(dragXY)) {\n                //         var bgImgXY = thiQ.convertToBgImgXY(dragXY);\n                //         bgImgXY = new Lines.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\n                //         imageCoords[imageCoords.length] = bgImgXY;\n                //         window.console.log(\"bgImgXY:\" + bgImgXY);\n                //     }\n                // } else if (drag.data('imageCoords')) {\n                //     imageCoords[imageCoords.length] = drag.data('imageCoords');\n                // }\n\n            });\n        }\n        // this.getRoot().find('input.choice' + choiceNo).val(imageCoords);\n        if (gEleClassAttributes !== '' && gEleClassAttributes.includes('placed')) {\n            this.getRoot().find('input.choice' + choiceNo).val(imageCoords + ';' + 'placed');\n        } else if (gEleClassAttributes !== '' && gEleClassAttributes.includes('inactive')) {\n            this.getRoot().find('input.choice' + choiceNo).val(imageCoords + ';' + 'inactive');\n        }\n        if (this.isQuestionInteracted()) {\n            // The user has interacted with the draggable items. We need to mark the form as dirty.\n            questionManager.handleFormDirty();\n            // Save the new answered value.\n            this.questionAnswer = this.getQuestionAnsweredValues();\n        }\n    };\n\n    /**\n     * Handle key down / press events on markers.\n     * @param {KeyboardEvent} e\n     */\n    DrawlinesQuestion.prototype.handleKeyPress = function(e) {\n        var drag = $(e.target).closest('.marker'),\n            point = new Lines.Point(drag.offset().left, drag.offset().top),\n            choiceNo = this.getChoiceNoFromElement(drag);\n\n        switch (e.keyCode) {\n            case keys.arrowLeft:\n            case 65: // A.\n                point.x -= 1;\n                break;\n            case keys.arrowRight:\n            case 68: // D.\n                point.x += 1;\n                break;\n            case keys.arrowDown:\n            case 83: // S.\n                point.y += 1;\n                break;\n            case keys.arrowUp:\n            case 87: // W.\n                point.y -= 1;\n                break;\n            case keys.space:\n            case keys.escape:\n                point = null;\n                break;\n            default:\n                return; // Ingore other keys.\n        }\n        e.preventDefault();\n\n        if (point !== null) {\n            point = this.constrainToBgImg(point);\n            drag.offset({'left': point.x, 'top': point.y});\n            drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\n            var dragXY = this.convertToBgImgXY(new Lines.Point(drag.data('pagex'), drag.data('pagey')));\n            drag.data('originX', dragXY.x / this.bgRatio()).data('originY', dragXY.y / this.bgRatio());\n            if (this.coordsInBgImg(new Lines.Point(drag.offset().left, drag.offset().top))) {\n                if (drag.hasClass('unneeded')) {\n                    this.sendDragToDrop(drag, true);\n                    var hiddenDrag = this.getDragClone(drag);\n                    if (hiddenDrag.length) {\n                        hiddenDrag.addClass('active');\n                    }\n                    this.cloneDragIfNeeded(drag);\n                }\n            }\n        } else {\n            drag.css('left', '').css('top', '');\n            drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\n            this.sendDragHome(drag);\n            this.removeDragIfNeeded(drag);\n        }\n        drag.focus();\n        this.saveCoordsForChoice(choiceNo);\n    };\n\n    /**\n     * Makes sure the dragged item always exists within the background image area.\n     *\n     * @param {Point} windowxy\n     * @returns {Point} coordinates\n     */\n    DrawlinesQuestion.prototype.constrainToBgImg = function(windowxy) {\n        var bgImg = this.bgImage(),\n            bgImgXY = this.convertToBgImgXY(windowxy);\n        bgImgXY.x = Math.max(0, bgImgXY.x);\n        bgImgXY.y = Math.max(0, bgImgXY.y);\n        bgImgXY.x = Math.min(bgImg.width(), bgImgXY.x);\n        bgImgXY.y = Math.min(bgImg.height(), bgImgXY.y);\n        return this.convertToWindowXY(bgImgXY);\n    };\n\n    /**\n     * Returns the choice number for a node.\n     *\n     * @param {Element|jQuery} node\n     * @returns {Number}\n     */\n    DrawlinesQuestion.prototype.getChoiceNoFromElement = function(node) {\n        return Number(this.getClassnameNumericSuffix(node, 'choice'));\n    };\n\n    /**\n     * Returns the numeric part of a class with the given prefix.\n     *\n     * @param {Element|jQuery} node\n     * @param {String} prefix\n     * @returns {Number|null}\n     */\n    DrawlinesQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\n        var classes = $(node).attr('class');\n        if (classes !== undefined && classes !== '') {\n            var classesarr = classes.split(' ');\n            for (var index = 0; index < classesarr.length; index++) {\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\n                if (patt1.test(classesarr[index])) {\n                    var patt2 = new RegExp('([0-9])+$');\n                    var match = patt2.exec(classesarr[index]);\n                    return Number(match[0]);\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Handle when the window is resized.\n     */\n    DrawlinesQuestion.prototype.handleResize = function() {\n        var thisQ = this,\n            bgRatio = this.bgRatio();\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n\n        this.getRoot().find('div.droparea .marker').not('.beingdragged').each(function(key, drag) {\n            $(drag)\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\n            thisQ.handleElementScale(drag, 'left top');\n        });\n\n        this.getRoot().find('div.droparea svg.dropzones')\n            .width(this.bgImage().width())\n            .height(this.bgImage().height());\n\n        for (var dropZoneNo = 0; dropZoneNo < this.visibleDropZones.length; dropZoneNo++) {\n            var dropZone = thisQ.visibleDropZones[dropZoneNo];\n            var originCoords = dropZone.coords;\n            var line = thisQ.lines[dropZoneNo];\n            var lineSVG = thisQ.lineSVGs[dropZoneNo];\n            line.parse(originCoords, bgRatio);\n            line.updateSvg(lineSVG);\n\n            var handles = line.getHandlePositions();\n            var markerSpan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\n            markerSpan\n                .css('left', handles.moveHandles.x - (markerSpan.outerWidth() / 2) - 4)\n                .css('top', handles.moveHandles.y - (markerSpan.outerHeight() / 2));\n            thisQ.handleElementScale(markerSpan, 'center');\n        }\n    };\n\n    /**\n     * Clone the drag.\n     */\n    DrawlinesQuestion.prototype.cloneDrags = function() {\n        var thisQ = this;\n        this.getRoot().find('div.draghomes span.marker').each(function(index, draghome) {\n            var drag = $(draghome);\n            var placeHolder = drag.clone();\n            placeHolder.removeClass();\n            placeHolder.addClass('marker');\n            placeHolder.addClass('choice' + thisQ.getChoiceNoFromElement(drag));\n            placeHolder.addClass(thisQ.getDragNoClass(drag, false));\n            placeHolder.addClass('dragplaceholder');\n            drag.before(placeHolder);\n        });\n    };\n\n    /**\n     * Get the drag number of a drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {Number} the drag number.\n     */\n    DrawlinesQuestion.prototype.getDragNo = function(drag) {\n        return this.getClassnameNumericSuffix(drag, 'dragno');\n    };\n\n    /**\n     * Get the drag number prefix of a drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @param {Boolean} includeSelector include the CSS selector prefix or not.\n     * @return {String} Class name\n     */\n    DrawlinesQuestion.prototype.getDragNoClass = function(drag, includeSelector) {\n        var className = 'dragno' + this.getDragNo(drag);\n        if (this.isInfiniteDrag(drag)) {\n            className = 'infinite';\n        }\n\n        if (includeSelector) {\n            return '.' + className;\n        }\n\n        return className;\n    };\n\n    /**\n     * Get drag clone for a given drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {jQuery} the drag's clone.\n     */\n    DrawlinesQuestion.prototype.getDragClone = function(drag) {\n        return this.getRoot().find('.draghomes' + ' span.marker' +\n            '.choice' + this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true) + '.dragplaceholder');\n    };\n\n    /**\n     * Get the drop area element.\n     * @returns {jQuery} droparea element.\n     */\n    DrawlinesQuestion.prototype.dropArea = function() {\n        return this.getRoot().find('div.droparea');\n    };\n\n    /**\n     * Animate a drag back to its home.\n     *\n     * @param {jQuery} drag the item being moved.\n     */\n    DrawlinesQuestion.prototype.sendDragHome = function(drag) {\n        drag.removeClass('beingdragged')\n            .addClass('unneeded')\n            .css('top', '')\n            .css('left', '')\n            .css('transform', '');\n        var placeHolder = this.getDragClone(drag);\n        placeHolder.after(drag);\n        placeHolder.removeClass('active');\n    };\n\n    /**\n     * Animate a drag item into a given place.\n     *\n     * @param {jQuery} drag the item to place.\n     * @param {boolean} isScaling Scaling or not.\n     * @param {boolean} initialLoad Whether it is the initial load or not.\n     */\n    DrawlinesQuestion.prototype.sendDragToDrop = function(drag, isScaling, initialLoad = false) {\n        var dropArea = this.dropArea(),\n            bgRatio = this.bgRatio();\n        drag.removeClass('beingdragged').removeClass('unneeded');\n        var dragXY = this.convertToBgImgXY(new Lines.Point(drag.data('pagex'), drag.data('pagey')));\n        if (isScaling) {\n            drag.data('originX', dragXY.x / bgRatio).data('originY', dragXY.y / bgRatio);\n            drag.css('left', dragXY.x).css('top', dragXY.y);\n        } else {\n            drag.data('originX', dragXY.x).data('originY', dragXY.y);\n            drag.css('left', dragXY.x * bgRatio).css('top', dragXY.y * bgRatio);\n        }\n        // We need to save the original scale ratio for each draggable item.\n        if (!initialLoad) {\n            // Only set the scale ratio for a current being-dragged item, not for the initial loading.\n            drag.data('scaleRatio', bgRatio);\n        }\n        dropArea.append(drag);\n        this.handleElementScale(drag, 'left top');\n    };\n\n    /**\n     * Clone the drag at the draghome area if needed.\n     *\n     * @param {jQuery} drag the item to place.\n     */\n    DrawlinesQuestion.prototype.cloneDragIfNeeded = function(drag) {\n        var inputNode = this.getInput(drag),\n            noOfDrags = Number(this.getClassnameNumericSuffix(inputNode, 'noofdrags')),\n            displayedDragsInDropArea = this.getRoot().find('div.droparea .marker.choice' +\n                this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).length,\n            displayedDragsInDragHomes = this.getRoot().find('div.draghomes .marker.choice' +\n                this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).not('.dragplaceholder').length;\n\n        if ((this.isInfiniteDrag(drag) ||\n            !this.isInfiniteDrag(drag) && displayedDragsInDropArea < noOfDrags) && displayedDragsInDragHomes === 0) {\n            var dragClone = drag.clone();\n            dragClone.addClass('unneeded')\n                .css('top', '')\n                .css('left', '')\n                .css('transform', '');\n            this.getDragClone(drag)\n                .removeClass('active')\n                .after(dragClone);\n            questionManager.addEventHandlersToMarker(dragClone);\n        }\n    };\n\n    /**\n     * Remove the clone drag at the draghome area if needed.\n     *\n     * @param {jQuery} drag the item to place.\n     */\n    DrawlinesQuestion.prototype.removeDragIfNeeded = function(drag) {\n        var dragsInHome = this.getRoot().find('div.draghomes .marker.choice' +\n            this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).not('.dragplaceholder');\n        var displayedDrags = dragsInHome.length;\n        while (displayedDrags > 1) {\n            dragsInHome.first().remove();\n            displayedDrags--;\n        }\n    };\n\n    /**\n     * Get the input belong to drag.\n     *\n     * @param {jQuery} drag the item to place.\n     * @returns {jQuery} input element.\n     */\n    DrawlinesQuestion.prototype.getInput = function(drag) {\n        var choiceNo = this.getChoiceNoFromElement(drag);\n        return this.getRoot().find('input.choices.choice' + choiceNo);\n    };\n\n    /**\n     * Scale the drag if needed.\n     *\n     * @param {jQuery} element the item to place.\n     * @param {String} type scaling type\n     */\n    DrawlinesQuestion.prototype.handleElementScale = function(element, type) {\n        var bgRatio = parseFloat(this.bgRatio());\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n        $(element).css({\n            '-webkit-transform': 'scale(' + bgRatio + ')',\n            '-moz-transform': 'scale(' + bgRatio + ')',\n            '-ms-transform': 'scale(' + bgRatio + ')',\n            '-o-transform': 'scale(' + bgRatio + ')',\n            'transform': 'scale(' + bgRatio + ')',\n            'transform-origin': type\n        });\n    };\n\n    /**\n     * Check if the given drag is in infinite mode or not.\n     *\n     * @param {jQuery} drag The drag item need to check.\n     */\n    DrawlinesQuestion.prototype.isInfiniteDrag = function(drag) {\n        return drag.hasClass('infinite');\n    };\n\n    /**\n     * Waits until all images are loaded before calling setupQuestion().\n     *\n     * This function is called from the onLoad of each image, and also polls with\n     * a time-out, because image on-loads are allegedly unreliable.\n     */\n    DrawlinesQuestion.prototype.waitForAllImagesToBeLoaded = function() {\n\n        // This method may get called multiple times (via image on-loads or timeouts.\n        // If we are already done, don't do it again.\n        if (this.allImagesLoaded) {\n            return;\n        }\n\n        // Clear any current timeout, if set.\n        if (this.imageLoadingTimeoutId !== null) {\n            clearTimeout(this.imageLoadingTimeoutId);\n        }\n\n        // If we have not yet loaded all images, set a timeout to\n        // call ourselves again, since apparently images on-load\n        // events are flakey.\n        if (this.getNotYetLoadedImages().length > 0) {\n            this.imageLoadingTimeoutId = setTimeout(function() {\n                this.waitForAllImagesToBeLoaded();\n            }, 100);\n            return;\n        }\n\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\n        this.allImagesLoaded = true;\n        this.cloneDrags();\n        //this.repositionDrags();\n        this.drawDropzone();\n    };\n\n    /**\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\n     *\n     * @returns {jQuery} those images.\n     */\n    DrawlinesQuestion.prototype.getNotYetLoadedImages = function() {\n        return this.getRoot().find('.drawlines img.dropbackground').not(function(i, imgNode) {\n            return this.imageIsLoaded(imgNode);\n        });\n    };\n\n    /**\n     * Check if an image has loaded without errors.\n     *\n     * @param {HTMLImageElement} imgElement an image.\n     * @returns {boolean} true if this image has loaded without errors.\n     */\n    DrawlinesQuestion.prototype.imageIsLoaded = function(imgElement) {\n        return imgElement.complete && imgElement.naturalHeight !== 0;\n    };\n\n    /**\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\n     * with event dispatching.\n     *\n     * @type {Object}\n     */\n    var questionManager = {\n\n        /**\n         * {boolean} ensures that the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {Object} ensures that the marker event handlers are only initialised once per question,\n         * indexed by containerId (id on the .que div).\n         */\n        markerEventHandlersInitialised: {},\n\n        /**\n         * {boolean} is printing or not.\n         */\n        isPrinting: false,\n\n        /**\n         * {boolean} is keyboard navigation.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {}, // An object containing all the information about each question on the page.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {DrawlinesQuestion[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * @var {line[]} the question lines in the preview, indexed by line number.\n         */\n        questionLines: [],\n\n        /**\n         * Initialise one question.\n         *\n         * @param {String} containerId the id of the div.que that contains this question.\n         * @param {boolean} readOnly whether the question is read-only.\n         * @param {Object[]} visibleDropZones data on any drop zones to draw as part of the feedback.\n         * @param {Object[]} questionLines\n         */\n        init: function(containerId, readOnly, visibleDropZones, questionLines) {\n            questionManager.questions[containerId] =\n                new DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines);\n\n            questionManager.questions[containerId].updateCoordinates();\n\n            if (!questionManager.markerEventHandlersInitialised.hasOwnProperty(containerId)) {\n                questionManager.markerEventHandlersInitialised[containerId] = true;\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\n                var questionContainer = document.getElementById(containerId);\n                if (questionContainer.classList.contains('drawlines') &&\n                    !questionContainer.classList.contains('qtype_drawlines-readonly')) {\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\n                    // questionManager.addEventHandlersToMarker($(questionContainer).find('div.draghomes .marker'));\n                    // questionManager.addEventHandlersToMarker($(questionContainer).find('div.droparea .marker'));\n                    // Add event listeners to the 'previewArea'.\n\n                    var dropArea = document.querySelector('.droparea');\n                    dropArea.addEventListener('mousedown', questionManager.handleEventMove);\n                    dropArea.addEventListener('touchstart', questionManager.handleEventMove);\n\n                    var drags = document.querySelector('.draghomes');\n                    drags.addEventListener('mousedown', questionManager.handleEventDragMove);\n                    drags.addEventListener('touchstart', questionManager.handleEventDragMove);\n                }\n            }\n        },\n\n        // TODO: commented as currently we are not using this function. To be removed later if not needed.\n        // /**\n        //  * Set up the event handlers that make this question type work. (Done once per page.)\n        //  */\n        // setupEventHandlers: function() {\n        //     $(window).on('resize', function() {\n        //         questionManager.handleWindowResize(false);\n        //     });\n        //     window.addEventListener('beforeprint', function() {\n        //         questionManager.isPrinting = true;\n        //         questionManager.handleWindowResize(questionManager.isPrinting);\n        //     });\n        //     window.addEventListener('afterprint', function() {\n        //         questionManager.isPrinting = false;\n        //         questionManager.handleWindowResize(questionManager.isPrinting);\n        //     });\n        //     setTimeout(function() {\n        //         questionManager.fixLayoutIfThingsMoved();\n        //     }, 100);\n        // },\n\n        handleEventMove: function(event) {\n            var dropzoneElement, dropzoneNo, handleIndex;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone .startcircle.shape')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = \"0\";\n                question.handleMove(event, handleIndex, dropzoneNo);\n            } else if (event.target.closest('.dropzone .endcircle.shape')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = \"1\";\n                question.handleMove(event, handleIndex, dropzoneNo);\n            } else if (event.target.closest('polyline.shape')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleDragMove(event, dropzoneNo);\n            }\n        },\n\n        handleEventDragMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone polyline.shape')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleDragMove(event, dropzoneNo);\n                question.saveCoordsForChoice(dropzoneNo);\n            }\n        },\n\n        /**\n         * Get the SVG element, if there is one, otherwise return null.\n         *\n         * @returns {SVGElement|null} the SVG element or null.\n         */\n        getSvg: function() {\n            var svg = document.querySelector('.droparea svg');\n            if (svg === null) {\n                return null;\n            } else {\n                return svg;\n            }\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @return {String} the value of that field.\n         */\n        getFormValue: function(name, indexes) {\n            var el = this.getEl(name, indexes);\n            return el.value;\n        },\n\n        /**\n         * Binding the event again for newly created element.\n         *\n         * @param {jQuery} element Element to bind the event\n         */\n        addEventHandlersToMarker: function(element) {\n            element\n                .on('mousedown touchstart', questionManager.handleDragStart)\n                .on('keydown keypress', questionManager.handleKeyPress)\n                .focusin(function(e) {\n                    questionManager.handleKeyboardFocus(e, true);\n                })\n                .focusout(function(e) {\n                    questionManager.handleKeyboardFocus(e, false);\n                });\n        },\n\n        /**\n         * Handle mouse down / touch start events on markers.\n         * @param {Event} e the DOM event.\n         */\n        handleDragStart: function(e) {\n            e.preventDefault();\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleDragStart(e);\n            }\n        },\n\n        /**\n         * Handle key down / press events on markers.\n         * @param {Event} e\n         */\n        handleKeyPress: function(e) {\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleKeyPress(e);\n            }\n        },\n\n        /**\n         * Handle when the window is resized.\n         * @param {boolean} isPrinting\n         */\n        handleWindowResize: function(isPrinting) {\n            for (var containerId in questionManager.questions) {\n                if (questionManager.questions.hasOwnProperty(containerId)) {\n                    questionManager.questions[containerId].isPrinting = isPrinting;\n                    questionManager.questions[containerId].handleResize();\n                }\n            }\n        },\n\n        /**\n         * Handle focus lost events on markers.\n         * @param {Event} e\n         * @param {boolean} isNavigating\n         */\n        handleKeyboardFocus: function(e, isNavigating) {\n            questionManager.isKeyboardNavigation = isNavigating;\n        },\n\n        /**\n         * Sometimes, despite our best efforts, things change in a way that cannot\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\n         * Therefore, we need to periodically check everything is in the right position.\n         */\n        fixLayoutIfThingsMoved: function() {\n            if (!questionManager.isKeyboardNavigation) {\n                this.handleWindowResize(questionManager.isPrinting);\n            }\n            // We use setTimeout after finishing work, rather than setInterval,\n            // in case positioning things is slow. We want 100 ms gap\n            // between executions, not what setInterval does.\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\n            }, 100);\n        },\n\n        /**\n         * Given an event, work out which question it effects.\n         * @param {Event} e the event.\n         * @returns {DrawlinesQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.drawlines').attr('id');\n            return questionManager.questions[containerId];\n        },\n\n        /**\n         * Handle when the form is dirty.\n         */\n        handleFormDirty: function() {\n            const responseForm = document.getElementById('responseform');\n            FormChangeChecker.markFormAsDirty(responseForm);\n        }\n    };\n\n    /**\n     * @alias module:qtype_drawlines/question\n     */\n    return {\n        /**\n         * Initialise one drag-drop markers question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         * @param {String[]} visibleDropZones the geometry of any drop-zones to show.\n         * @param {Object[]} questionLines\n         */\n        init: questionManager.init,\n    };\n});"],"names":["define","$","dragDrop","Lines","keys","FormChangeChecker","DrawlinesQuestion","containerId","readOnly","visibleDropZones","questionLines","thisQ","this","lineSVGs","lines","isPrinting","questionAnswer","svgEl","getRoot","addClass","allImagesLoaded","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","prototype","updateCoordinates","line","length","coordinates","getCoordinates","parse","updateSvgEl","parseCoordinates","lineType","bits","split","slice","Error","drawSVGLines","height","startcoordinates","endcoordinates","draginitialcoords","bgImage","document","querySelector","innerHTML","width","dragSVG","draghomeSvg","getElementById","dropzoneSvg","undefined","coords","type","make","labelstart","labelend","addToSvg","drawDropzone","svg","style","position","top","repositionDrags","root","find","not","each","key","item","input","choiceNo","getChoiceNoFromElement","imageCoords","getImageCoords","drag","remove","i","dragInDrop","clone","screenCoords","convertToWindowXY","data","x","y","sendDragToDrop","getDragClone","cloneDragIfNeeded","getQuestionAnsweredValues","result","inputNode","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","forEach","val","coordsStrings","Point","point","offset","left","convertToBgImgXY","coordsInBgImg","bgPosition","handleDragStart","e","dragged","target","closest","prepare","start","css","hasClass","hiddenDrag","dragEnd","dragXY","placed","bgRatio","bgImgXY","sendDragHome","removeDragIfNeeded","saveCoordsForChoice","childNodes","getAttribute","bgImg","bgImgNaturalWidth","get","naturalWidth","lineNumber","makeSvg","setAttribute","dropzoneNo","updateSvg","handleMove","handleIndex","info","movingDropZone","lastX","lastY","dragProxy","makeDragProxy","maxX","baseVal","maxY","pageX","pageY","move","parseInt","body","removeChild","handleDragMove","isMoveFromDragsToDropzones","isMoveFromDropzonesToDrags","movingDrag","svgDragsHome","svgDropZones","whichSVG","svgClass","selectedElement","dropX","clientX","dropY","clientY","closeTo","centre1","addToDropZone","moveDrags","createElement","appendChild","items","gEleClassAttributes","children","attr","includes","questionManager","handleFormDirty","handleKeyPress","keyCode","arrowLeft","arrowRight","arrowDown","arrowUp","space","escape","preventDefault","constrainToBgImg","focus","windowxy","Math","max","min","node","Number","getClassnameNumericSuffix","prefix","classes","classesarr","index","RegExp","test","match","exec","handleResize","parseFloat","handleElementScale","dropZoneNo","originCoords","lineSVG","handles","getHandlePositions","markerSpan","moveHandles","outerWidth","outerHeight","cloneDrags","draghome","placeHolder","removeClass","getDragNoClass","before","getDragNo","includeSelector","className","isInfiniteDrag","dropArea","after","isScaling","initialLoad","append","getInput","noOfDrags","displayedDragsInDropArea","displayedDragsInDragHomes","dragClone","addEventHandlersToMarker","dragsInHome","displayedDrags","first","element","imageLoadingTimeoutId","clearTimeout","setTimeout","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","eventHandlersInitialised","markerEventHandlersInitialised","isKeyboardNavigation","questions","noOfLines","dropZones","init","hasOwnProperty","questionContainer","classList","contains","addEventListener","handleEventMove","drags","handleEventDragMove","event","question","getQuestionForEvent","dataset","getSvg","getFormValue","name","indexes","getEl","on","focusin","handleKeyboardFocus","focusout","handleWindowResize","isNavigating","fixLayoutIfThingsMoved","currentTarget","responseForm","markFormAsDirty"],"mappings":"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"}