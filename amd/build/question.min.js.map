{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\n *\n * @module     qtype_drawlines/question\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/dragdrop',\n    'qtype_drawlines/Line',\n    'core/key_codes',\n    'core_form/changechecker',\n], function(\n    $,\n    dragDrop,\n    Lines,\n) {\n\n    \"use strict\";\n\n    /**\n     * Object to handle one drag-drop markers question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @param {Object[]} visibleDropZones the geometry of any drop-zones to show.\n     *      Objects have fields line, coords and markertext.\n     * @param {line[]} questionLines\n     * @constructor\n     */\n    function DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines) {\n        var thisQ = this;\n        this.containerId = containerId;\n        this.visibleDropZones = visibleDropZones;\n        this.questionLines = questionLines;\n        this.lineSVGs = [];\n        this.lines = [];\n        this.isPrinting = false;\n        this.questionAnswer = {};\n        this.svgEl = null;\n        if (readOnly) {\n            this.getRoot().addClass('qtype_drawlines-readonly');\n        }\n        thisQ.allImagesLoaded = false;\n        thisQ.getNotYetLoadedImages().one('load', function() {\n            thisQ.waitForAllImagesToBeLoaded();\n        });\n        thisQ.waitForAllImagesToBeLoaded();\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     */\n    DrawlinesQuestion.prototype.updateCoordinates = function() {\n        // We don't need to scale the shape for editing form.\n        for (var line = 0; line < this.lineSVGs.length; line++) {\n            var coordinates = this.getCoordinates(this.lineSVGs[line]);\n            if (!this.lines[line].parse(coordinates[0], coordinates[1], 1)) {\n                // Invalid coordinates. Don't update the preview.\n                return;\n            }\n            this.updateSvgEl(line);\n        }\n    };\n\n    /**\n     * Parse the coordinates from a particular string.\n     * @param {String} coordinates The coordinates to be parsed. The values are in the format: x1,y1 x2,y2.\n     *                             Except for infinite line type where it's in the format x1,y1 x2,y2, x3,y3, x4,y4.\n     *                             Here, x1,y1 and x4,y4 are the two very end points of the infinite line and\n     *                             x2,y2 and x3,y3 are the pints with the handles.\n     * @param {String} lineType The type of the line.\n     */\n    DrawlinesQuestion.prototype.parseCoordinates = function(coordinates, lineType) {\n        var bits = coordinates.split(' ');\n        if (lineType === 'lineinfinite' && bits.length !== 2) {\n            // Remove the first and last coordinates.\n            bits = bits.slice(1, -1);\n        }\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return bits;\n    };\n\n    /**\n     * Draws the svg lines of any drop zones.\n     * @param {Object[]} questionLines\n     */\n    DrawlinesQuestion.prototype.drawSVGLines = function(questionLines) {\n        var bgImage = document.querySelector('img.dropbackground'),\n            height, startcoordinates, endcoordinates, draginitialcoords;\n\n        var drags = document.querySelector('.draghomes');\n        drags.innerHTML =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dragshome\" ' +\n                'id= \"que-dlines-svg-dragshome\" ' +\n                'width=\"' + bgImage.width + '\" ' +\n                'height=\"' + questionLines.length * 50 + '\"' +\n            '></svg>';\n\n        var draghomeSvg = document.getElementById('que-dlines-svg-dragshome');\n        var dropzoneSvg = document.getElementById('que-dlines-svg');\n        var initialHeight = 25;\n        for (let line = 0; line < questionLines.length; line++) {\n            height = initialHeight + line * 50;\n            startcoordinates = '50,' + height + ';10';\n            endcoordinates = '200,' + height + ';10';\n\n\n            // Check if the lines are to be set with initial coordinates.\n            draginitialcoords = this.visibleDropZones['c' + line];\n            if (draginitialcoords !== undefined && draginitialcoords !== '') {\n                // The visibleDropZones array holds the response in the format x1,y1 x2,y2 - to be added to svgdropzone.\n                var coords = this.parseCoordinates(draginitialcoords, questionLines[line].type);\n                startcoordinates = coords[0] + ';10';\n                endcoordinates = coords[1] + ';10';\n                this.lines[line] = Lines.make([startcoordinates, endcoordinates],\n                    [questionLines[line].labelstart, questionLines[line].labelend], questionLines[line].type);\n                this.addToSvg(line, dropzoneSvg);\n            } else {\n                // Need to be added to draghomeSvg.\n                this.lines[line] = Lines.make([startcoordinates, endcoordinates],\n                    [questionLines[line].labelstart, questionLines[line].labelend], questionLines[line].type);\n                this.addToSvg(line, draghomeSvg);\n            }\n        }\n    };\n\n    /**\n     * Draws the svg lines of any drop zones that should be visible for feedback purposes.\n     */\n    DrawlinesQuestion.prototype.drawDropzone = function() {\n        var bgImage = document.querySelector('img.dropbackground');\n        var svg = document.querySelector('svg.dropzones');\n        document.getElementById('que-dlines-dropzone').style.position = 'relative';\n        document.getElementById('que-dlines-dropzone').style.top = (bgImage.height + 1) * -1 + \"px\";\n        document.getElementById('que-dlines-dropzone').style.height = bgImage.height + \"px\";\n        document.getElementById('que-dlines-droparea').style.height = bgImage.height + \"px\";\n        if (!svg) {\n            var dropZone = document.querySelector('#que-dlines-dropzone');\n            dropZone.innerHTML =\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n                    'id= \"que-dlines-svg\" ' +\n                    'class= \"dropzones\" ' +\n                    'width=\"' + bgImage.width + '\" ' +\n                    'height=\"' + bgImage.height + '\" ' +\n                '></svg>';\n        }\n        this.drawSVGLines(this.questionLines);\n    };\n\n    // TODO: The below methods can be refractored for window resizing.\n    //\n    // /**\n    //  * Adds a dropzone line with colour, coords and link provided to the array of Lines.\n    //  *\n    //  * @param {jQuery} svg the SVG image to which to add this drop zone.\n    //  * @param {int} dropZoneNo which drop-zone to add.\n    //  * @param {string} colourClass class name\n    //  */\n    // DrawlinesQuestion.prototype.addDropzone = function(svg, dropZoneNo, colourClass) {\n    //     var dropZone = this.visibleDropZones[dropZoneNo],\n    //         line = Lines.make(dropZone.line, ''),\n    //         existingmarkertext,\n    //         bgRatio = this.bgRatio();\n    //     if (!line.parse(dropZone.coords, bgRatio)) {\n    //         return;\n    //     }\n    //\n    //     existingmarkertext = this.getRoot().find('div.markertexts span.markerlabelstart' + dropZoneNo);\n    //     if (existingmarkertext.length) {\n    //         if (dropZone.markertext !== '') {\n    //             existingmarkertext.html(dropZone.markertext);\n    //         } else {\n    //             existingmarkertext.remove();\n    //         }\n    //     } else if (dropZone.markertext !== '') {\n    //         var classnames = 'markertext markertext' + dropZoneNo;\n    //         this.getRoot().find('div.markertexts').append('<span class=\"' + classnames + '\">' +\n    //             dropZone.markertext + '</span>');\n    //         var markerspan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\n    //         if (markerspan.length) {\n    //             var handles = line.getHandlePositions();\n    //             var positionLeft = handles.moveHandles.x - (markerspan.outerWidth() / 2) - 4;\n    //             var positionTop = handles.moveHandles.y - (markerspan.outerHeight() / 2);\n    //             markerspan\n    //                 .css('left', positionLeft)\n    //                 .css('top', positionTop);\n    //             markerspan\n    //                 .data('originX', markerspan.position().left / bgRatio)\n    //                 .data('originY', markerspan.position().top / bgRatio);\n    //             this.handleElementScale(markerspan, 'center');\n    //         }\n    //     }\n    //\n    //     var lineSVG = line.makeSvg(svg[0]);\n    //     lineSVG.setAttribute('class', 'dropzone ' + colourClass);\n    //\n    //     this.lines[this.Lines.length] = line;\n    //     this.lineSVGs[this.lineSVGs.length] = lineSVG;\n    // };\n\n    // /**\n    //  * Draws the drag items on the page (and drop zones if required).\n    //  * The idea is to re-draw all the drags and drops whenever there is a change\n    //  * like a widow resize or an item dropped in place.\n    //  */\n    // DrawlinesQuestion.prototype.repositionDrags = function() {\n    //     var root = this.getRoot(),\n    //         thisQ = this;\n    //\n    //     root.find('div.draghomes .marker').not('.dragplaceholder').each(function(key, item) {\n    //         $(item).addClass('unneeded');\n    //     });\n    //\n    //     root.find('input.choices').each(function(key, input) {\n    //         var choiceNo = thisQ.getChoiceNoFromElement(input),\n    //             imageCoords = thisQ.getImageCoords(input);\n    //\n    //         if (imageCoords.length) {\n    //             var drag = thisQ.getRoot().find('.draghomes' + ' span.marker' + '.choice' + choiceNo).not('.dragplaceholder');\n    //             drag.remove();\n    //             for (var i = 0; i < imageCoords.length; i++) {\n    //                 var dragInDrop = drag.clone();\n    //                 // Convert image coords to screen coords.\n    //                 const screenCoords = thisQ.convertToWindowXY(imageCoords[i]);\n    //                 dragInDrop.data('pagex', screenCoords.x).data('pagey', screenCoords.y);\n    //                 // Save image coords to the drag item so we can use it later.\n    //                 dragInDrop.data('imageCoords', imageCoords[i]);\n    //                 // We always save the coordinates in the 1:1 ratio.\n    //                 // So we need to set the scale ratio to 1 for the initial load.\n    //                 dragInDrop.data('scaleRatio', 1);\n    //                 thisQ.sendDragToDrop(dragInDrop, false, true);\n    //             }\n    //             thisQ.getDragClone(drag).addClass('active');\n    //             thisQ.cloneDragIfNeeded(drag);\n    //         }\n    //     });\n    //\n    //     // Save the question answer.\n    //     thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\n    // };\n    //\n    // /**\n    //  * Determine what drag items need to be shown and\n    //  * return coords of all drag items except any that are currently being dragged\n    //  * based on contents of hidden inputs and whether drags are 'infinite' or how many\n    //  * drags should be shown.\n    //  *\n    //  * @param {jQuery} inputNode\n    //  * @returns {Point[]} image coordinates of however many copies of the drag item should be shown.\n    //  */\n    // DrawlinesQuestion.prototype.getImageCoords = function(inputNode) {\n    //     var imageCoords = [],\n    //         val = $(inputNode).val();\n    //     if (val !== '') {\n    //         var coordsStrings = val.split(' ');\n    //         for (var i = 0; i < coordsStrings.length; i++) {\n    //             imageCoords[i] = Lines.Point.parse(coordsStrings[i]);\n    //         }\n    //     }\n    //     return imageCoords;\n    // };\n    //\n    // /**\n    //  * Converts the relative x and y position coordinates into\n    //  * absolute x and y position coordinates.\n    //  *\n    //  * @param {Point} point relative to the background image.\n    //  * @returns {Point} point relative to the page.\n    //  */\n    // DrawlinesQuestion.prototype.convertToWindowXY = function(point) {\n    //     var bgImage = this.bgImage();\n    //     // The +1 seems rather odd, but seems to give the best results in\n    //     // the three main browsers at a range of zoom levels.\n    //     // (Its due to the 1px border around the image, that shifts the\n    //     // image pixels by 1 down and to the left.)\n    //     return point.offset(bgImage.offset().left + 1, bgImage.offset().top + 1);\n    // };\n\n    // /**\n    //  * Utility function converting window coordinates to relative to the\n    //  * background image coordinates.\n    //  *\n    //  * @param {Point} point relative to the page.\n    //  * @returns {Point} point relative to the background image.\n    //  */\n    // DrawlinesQuestion.prototype.convertToBgImgXY = function(point) {\n    //     var bgImage = this.bgImage();\n    //     return point.offset(-bgImage.offset().left - 1, -bgImage.offset().top - 1);\n    // };\n    //\n    // /**\n    //  * Functionality at the end of a drag drop.\n    //  * @param {jQuery} dragged the marker that was dragged.\n    //  */\n    // DrawlinesQuestion.prototype.dragEnd = function(dragged) {\n    //     var placed = false,\n    //         choiceNo = this.getChoiceNoFromElement(dragged),\n    //         bgRatio = this.bgRatio(),\n    //         dragXY;\n    //\n    //     dragged.data('pagex', dragged.offset().left).data('pagey', dragged.offset().top);\n    //     dragXY = new Lines.Point(dragged.data('pagex'), dragged.data('pagey'));\n    //     if (this.coordsInBgImg(dragXY)) {\n    //         this.sendDragToDrop(dragged, true);\n    //         placed = true;\n    //         // Since we already move the drag item to new position.\n    //         // Remove the image coords if this drag item have it.\n    //         // We will get the new image coords for this drag item in saveCoordsForChoice.\n    //         if (dragged.data('imageCoords')) {\n    //             dragged.data('imageCoords', null);\n    //         }\n    //         // It seems that the dragdrop sometimes leaves the drag\n    //         // one pixel out of position. Put it in exactly the right place.\n    //         var bgImgXY = this.convertToBgImgXY(dragXY);\n    //         bgImgXY = new Lines.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\n    //         dragged.data('originX', bgImgXY.x).data('originY', bgImgXY.y);\n    //     }\n    //\n    //     if (!placed) {\n    //         this.sendDragHome(dragged);\n    //         this.removeDragIfNeeded(dragged);\n    //     } else {\n    //         this.cloneDragIfNeeded(dragged);\n    //     }\n    //\n    //     this.saveCoordsForChoice(choiceNo);\n    // };\n    //\n    // /**\n    //  * Makes sure the dragged item always exists within the background image area.\n    //  *\n    //  * @param {Point} windowxy\n    //  * @returns {Point} coordinates\n    //  */\n    // DrawlinesQuestion.prototype.constrainToBgImg = function(windowxy) {\n    //     var bgImg = this.bgImage(),\n    //         bgImgXY = this.convertToBgImgXY(windowxy);\n    //     bgImgXY.x = Math.max(0, bgImgXY.x);\n    //     bgImgXY.y = Math.max(0, bgImgXY.y);\n    //     bgImgXY.x = Math.min(bgImg.width(), bgImgXY.x);\n    //     bgImgXY.y = Math.min(bgImg.height(), bgImgXY.y);\n    //     return this.convertToWindowXY(bgImgXY);\n    // };\n\n    //\n    // /**\n    //  * Handle when the window is resized.\n    //  */\n    // DrawlinesQuestion.prototype.handleResize = function() {\n    //     var thisQ = this,\n    //         bgRatio = this.bgRatio();\n    //     if (this.isPrinting) {\n    //         bgRatio = 1;\n    //     }\n    //\n    //     this.getRoot().find('div.droparea .marker').not('.beingdragged').each(function(key, drag) {\n    //         $(drag)\n    //             .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\n    //             .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\n    //         thisQ.handleElementScale(drag, 'left top');\n    //     });\n    //\n    //     this.getRoot().find('div.droparea svg.dropzones')\n    //         .width(this.bgImage().width())\n    //         .height(this.bgImage().height());\n    //\n    //     for (var dropZoneNo = 0; dropZoneNo < this.visibleDropZones.length; dropZoneNo++) {\n    //         var dropZone = thisQ.visibleDropZones[dropZoneNo];\n    //         var originCoords = dropZone.coords;\n    //         var line = thisQ.lines[dropZoneNo];\n    //         var lineSVG = thisQ.lineSVGs[dropZoneNo];\n    //         line.parse(originCoords, bgRatio);\n    //         line.updateSvg(lineSVG);\n    //\n    //         var handles = line.getHandlePositions();\n    //         var markerSpan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\n    //         markerSpan\n    //             .css('left', handles.moveHandles.x - (markerSpan.outerWidth() / 2) - 4)\n    //             .css('top', handles.moveHandles.y - (markerSpan.outerHeight() / 2));\n    //         thisQ.handleElementScale(markerSpan, 'center');\n    //     }\n    // };\n\n    // /**\n    //  * Animate a drag item into a given place.\n    //  *\n    //  * @param {jQuery} drag the item to place.\n    //  * @param {boolean} isScaling Scaling or not.\n    //  * @param {boolean} initialLoad Whether it is the initial load or not.\n    //  */\n    // DrawlinesQuestion.prototype.sendDragToDrop = function(drag, isScaling, initialLoad = false) {\n    //     var dropArea = this.dropArea(),\n    //         bgRatio = this.bgRatio();\n    //     drag.removeClass('beingdragged').removeClass('unneeded');\n    //     var dragXY = this.convertToBgImgXY(new Lines.Point(drag.data('pagex'), drag.data('pagey')));\n    //     if (isScaling) {\n    //         drag.data('originX', dragXY.x / bgRatio).data('originY', dragXY.y / bgRatio);\n    //         drag.css('left', dragXY.x).css('top', dragXY.y);\n    //     } else {\n    //         drag.data('originX', dragXY.x).data('originY', dragXY.y);\n    //         drag.css('left', dragXY.x * bgRatio).css('top', dragXY.y * bgRatio);\n    //     }\n    //     // We need to save the original scale ratio for each draggable item.\n    //     if (!initialLoad) {\n    //         // Only set the scale ratio for a current being-dragged item, not for the initial loading.\n    //         drag.data('scaleRatio', bgRatio);\n    //     }\n    //     dropArea.append(drag);\n    //     this.handleElementScale(drag, 'left top');\n    // };\n    //\n    // /**\n    //  * Scale the drag if needed.\n    //  *\n    //  * @param {jQuery} element the item to place.\n    //  * @param {String} type scaling type\n    //  */\n    // DrawlinesQuestion.prototype.handleElementScale = function(element, type) {\n    //     var bgRatio = parseFloat(this.bgRatio());\n    //     if (this.isPrinting) {\n    //         bgRatio = 1;\n    //     }\n    //     $(element).css({\n    //         '-webkit-transform': 'scale(' + bgRatio + ')',\n    //         '-moz-transform': 'scale(' + bgRatio + ')',\n    //         '-ms-transform': 'scale(' + bgRatio + ')',\n    //         '-o-transform': 'scale(' + bgRatio + ')',\n    //         'transform': 'scale(' + bgRatio + ')',\n    //         'transform-origin': type\n    //     });\n    // };\n\n    // /**\n    //  * Sometimes, despite our best efforts, things change in a way that cannot\n    //  * be specifically caught (e.g. dock expanding or collapsing in Boost).\n    //  * Therefore, we need to periodically check everything is in the right position.\n    //  */\n    // fixLayoutIfThingsMoved: function() {\n    //     if (!questionManager.isKeyboardNavigation) {\n    //         this.handleWindowResize(questionManager.isPrinting);\n    //     }\n    //     // We use setTimeout after finishing work, rather than setInterval,\n    //     // in case positioning things is slow. We want 100 ms gap\n    //     // between executions, not what setInterval does.\n    //     setTimeout(function() {\n    //         questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\n    //     }, 100);\n    // },\n\n\n    /**\n     * Get the outer div for this question.\n     * @returns {jQuery} containing that div.\n     */\n    DrawlinesQuestion.prototype.getRoot = function() {\n        return $(document.getElementById(this.containerId));\n    };\n\n    /**\n     * Get the img that is the background image.\n     * @returns {jQuery} containing that img.\n     */\n    DrawlinesQuestion.prototype.bgImage = function() {\n        return this.getRoot().find('img.dropbackground');\n    };\n\n    /**\n     * Returns the coordinates for the line from the text input in the form.\n     * @param {SVGElement} svgEl\n     * @returns {Array} the coordinates.\n     */\n    DrawlinesQuestion.prototype.getCoordinates = function(svgEl) {\n\n        var circleStartXCoords = svgEl.childNodes[1].getAttribute('cx');\n        var circleStartYCoords = svgEl.childNodes[1].getAttribute('cy');\n        var circleStartRCoords = svgEl.childNodes[1].getAttribute('r');\n        var circleEndXCoords = svgEl.childNodes[2].getAttribute('cx');\n        var circleEndYCoords = svgEl.childNodes[2].getAttribute('cy');\n        var circleEndRCoords = svgEl.childNodes[2].getAttribute('r');\n        return [circleStartXCoords + ',' + circleStartYCoords + ';' + circleStartRCoords,\n            circleEndXCoords + ',' + circleEndYCoords + ';' + circleEndRCoords];\n    };\n\n    /**\n     * Return the background ratio.\n     *\n     * @returns {number} Background ratio.\n     */\n    DrawlinesQuestion.prototype.bgRatio = function() {\n        var bgImg = this.bgImage();\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\n        var bgImgClientWidth = bgImg.width();\n\n        return bgImgClientWidth / bgImgNaturalWidth;\n    };\n\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {int} lineNumber Line Number\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    DrawlinesQuestion.prototype.addToSvg = function(lineNumber, svg) {\n        this.lineSVGs[lineNumber] = this.lines[lineNumber].makeSvg(svg);\n        if (!this.lineSVGs[lineNumber]) {\n            return;\n        }\n        this.lineSVGs[lineNumber].setAttribute('data-dropzone-no', lineNumber);\n        if (svg.getAttribute('class') === 'dropzones') {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' placed');\n        } else {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' inactive');\n        }\n    };\n\n    /**\n     * Update the shape of this drop zone (but not type) in an SVG image.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.updateSvgEl = function(dropzoneNo) {\n        this.lines[dropzoneNo].updateSvg(this.lineSVGs[dropzoneNo]);\n    };\n\n    /**\n     * Start responding to dragging the move handle attached to the line ends (circles).\n     * @param {Event} e Event object\n     * @param {String} whichHandle which circle handle was moved, i.e., startcircle or endcircle.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleCircleMove = function(e, whichHandle, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            svg = document.querySelector('svg.dropzones'),\n            maxX = svg.width.baseVal.value,\n            maxY = svg.height.baseVal.value;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            movingDropZone.lines[dropzoneNo].move(whichHandle,\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY), parseInt(maxX), parseInt(maxY));\n            lastX = pageX;\n            lastY = pageY;\n            movingDropZone.updateSvgEl(dropzoneNo);\n            movingDropZone.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n\n    /**\n     * Start responding to dragging the move handle attached to the line.\n     * @param {Event} e Event object\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleLineMove = function(e, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDrag = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            maxX,\n            maxY,\n            whichSVG = \"\",\n            bgImage = document.querySelector('img.dropbackground'),\n            isMoveFromDragsToDropzones,\n            isMoveFromDropzonesToDrags,\n            svgClass = '';\n\n        var selectedElement = this.lineSVGs[dropzoneNo];\n        const dropX = e.clientX;\n        const dropY = e.clientY;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n\n            // Check if the drags need to be moved from one svg to another.\n            var closeTo = selectedElement.closest('svg');\n            svgClass = closeTo.getAttribute('class');\n\n            // Moving the drags between the SVG's.\n            // If true, the drag is moved from draghomes SVG to dropZone SVG.\n            isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n\n            // If true, the drag is moved from dropZone SVG to draghomes SVG.\n            isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n                (movingDrag.lines[dropzoneNo].centre1.y > (bgImage.height - 20));\n            if (isMoveFromDragsToDropzones || isMoveFromDropzonesToDrags) {\n                movingDrag.lines[dropzoneNo].addToDropZone('mouse', selectedElement,\n                    dropX, dropY);\n            }\n\n            // Drag the lines within the SVG\n            // Get the dimensions of the selected element's svg.\n            closeTo = selectedElement.closest('svg');\n            var dimensions = movingDrag.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n            maxX = dimensions.maxX;\n            maxY = dimensions.maxY;\n            whichSVG = dimensions.whichSVG;\n\n            movingDrag.lines[dropzoneNo].moveDrags(\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY),\n                parseInt(maxX), parseInt(maxY), whichSVG);\n            lastX = pageX;\n            lastY = pageY;\n\n            movingDrag.updateSvgEl(dropzoneNo);\n            movingDrag.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    DrawlinesQuestion.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Save the coordinates for a dropped item in the form field.\n     * @param {Number} choiceNo which copy of the choice this was.\n     **/\n    DrawlinesQuestion.prototype.saveCoordsForChoice = function(choiceNo) {\n        let imageCoords = [];\n        var items = this.getRoot().find('svg g.choice' + choiceNo),\n            gEleClassAttributes = '';\n            // thiQ = this,\n            // bgRatio = this.bgRatio();\n        if (items.length) {\n            items.each(function() {\n                var drag = $(this);\n                imageCoords = drag.children('polyline').attr('points');\n                gEleClassAttributes = drag.attr('class');\n                // TODO: Kept the below comment as this could be needed for window resizing.\n\n                //     if (drag.data('scaleRatio') !== bgRatio) {\n                //         // The scale ratio for the draggable item was changed. We need to update that.\n                //         drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\n                //     }\n                //     var dragXY = new Lines.Point(drag.data('pagex'), drag.data('pagey'));\n                //     window.console.log(\"dragXY:\" + dragXY);\n                //\n                //     window.console.log(\"thiQ:\" + thiQ);\n                //     if (thiQ.coordsInBgImg(dragXY)) {\n                //         var bgImgXY = thiQ.convertToBgImgXY(dragXY);\n                //         bgImgXY = new Lines.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\n                //         imageCoords[imageCoords.length] = bgImgXY;\n                //         window.console.log(\"bgImgXY:\" + bgImgXY);\n                //     }\n                // } else if (drag.data('imageCoords')) {\n                //     imageCoords[imageCoords.length] = drag.data('imageCoords');\n                // }\n\n            });\n        }\n        if (gEleClassAttributes !== '' && gEleClassAttributes.includes('placed')) {\n            this.getRoot().find('input.choice' + choiceNo).val(imageCoords);\n        } else if (gEleClassAttributes !== '' && gEleClassAttributes.includes('inactive')) {\n            this.getRoot().find('input.choice' + choiceNo).val('');\n        }\n    };\n\n    /**\n     * Handle key down / press events on markers.\n     * @param {KeyboardEvent} e\n     * @param {SVGElement} drag SVG element being dragged.\n     * @param {int} dropzoneNo\n     * @param {String} activeElement The string indicating the element being dragged.\n     */\n    DrawlinesQuestion.prototype.handleKeyPress = function(e, drag, dropzoneNo, activeElement) {\n\n        var x = 0,\n            y = 0,\n            dropzoneElement,\n            question = questionManager.getQuestionForEvent(e);\n\n        dropzoneElement = event.target.closest('g');\n\n        switch (e.code) {\n            case 'ArrowLeft':\n            case 'KeyA': // A.\n                x = -1;\n                break;\n            case 'ArrowRight':\n            case 'KeyD': // D.\n                x = 1;\n                break;\n            case 'ArrowDown':\n            case 'KeyS': // S.\n                y = 1;\n                break;\n            case 'ArrowUp':\n            case 'KeyW': // W.\n                y = -1;\n                break;\n            case 'Space':\n            case 'Escape':\n                break;\n            default:\n                return; // Ingore other keys.\n        }\n        e.preventDefault();\n\n        // Moving the drags between the SVG's.\n        var closeTo = drag.closest('svg');\n        var svgClass = closeTo.getAttribute('class');\n        var maxX,\n            maxY,\n            whichSVG;\n        var bgImage = document.querySelector('img.dropbackground');\n        var isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n        var isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n            (question.lines[dropzoneNo].centre1.y > (bgImage.height - 20));\n\n        if (isMoveFromDragsToDropzones) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                null, null, 'DragsSVG');\n        } else if (isMoveFromDropzonesToDrags) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                null, null, 'DropZonesSVG');\n        }\n\n        // Get the dimensions of the selected element's svg.\n        closeTo = drag.closest('svg');\n        var dimensions = question.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n        maxX = dimensions.maxX;\n        maxY = dimensions.maxY;\n        whichSVG = dimensions.whichSVG;\n\n        if (activeElement === 'line') {\n            // Move the entire line when the focus is on it.\n            question.lines[dropzoneNo].moveDrags(x, y, parseInt(maxX), parseInt(maxY), whichSVG);\n        } else {\n            // Move the line endpoints.\n            question.lines[dropzoneNo].move(activeElement, x, y, parseInt(maxX), parseInt(maxY));\n        }\n        question.updateSvgEl(dropzoneNo);\n        this.saveCoordsForChoice(dropzoneNo);\n        drag.focus();\n    };\n\n    /**\n     * Handle key down / press events on markers.\n     * @param {SVGElement} dragElement SVG element being dragged.\n     * @param {String}  className\n     * @returns {Object|null} An object containing maxX, maxY, and whichSVG if an SVG is found; otherwise, null.\n     // * @param {SVGElement} svgelement The SVG to which the dragElement belongs.\n     */\n    DrawlinesQuestion.prototype.getSvgDimensionsByClass = function(dragElement, className) {\n        const closeTo = dragElement.closest('svg');\n        if (closeTo && closeTo.classList.contains(className)) {\n            return {\n                maxX: closeTo.width.baseVal.value,\n                maxY: closeTo.height.baseVal.value,\n                whichSVG: className === 'dragshome' ? 'DragsSVG' : 'DropZonesSVG'\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Get the input belong to drag.\n     *\n     * @param {jQuery} drag the item to place.\n     * @returns {jQuery} input element.\n     */\n    DrawlinesQuestion.prototype.getInput = function(drag) {\n        var choiceNo = this.getChoiceNoFromElement(drag);\n        return this.getRoot().find('input.choices.choice' + choiceNo);\n    };\n\n    /**\n     * Check if the given drag is in infinite mode or not.\n     *\n     * @param {jQuery} drag The drag item need to check.\n     */\n    DrawlinesQuestion.prototype.isInfiniteDrag = function(drag) {\n        return drag.hasClass('infinite');\n    };\n\n    /**\n     * Waits until all images are loaded before calling setupQuestion().\n     *\n     * This function is called from the onLoad of each image, and also polls with\n     * a time-out, because image on-loads are allegedly unreliable.\n     */\n    DrawlinesQuestion.prototype.waitForAllImagesToBeLoaded = function() {\n\n        // This method may get called multiple times (via image on-loads or timeouts.\n        // If we are already done, don't do it again.\n        if (this.allImagesLoaded) {\n            return;\n        }\n\n        // Clear any current timeout, if set.\n        if (this.imageLoadingTimeoutId !== null) {\n            clearTimeout(this.imageLoadingTimeoutId);\n        }\n\n        // If we have not yet loaded all images, set a timeout to\n        // call ourselves again, since apparently images on-load\n        // events are flakey.\n        if (this.getNotYetLoadedImages().length > 0) {\n            this.imageLoadingTimeoutId = setTimeout(function() {\n                this.waitForAllImagesToBeLoaded();\n            }, 100);\n            return;\n        }\n\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\n        this.allImagesLoaded = true;\n        //this.repositionDrags();\n        this.drawDropzone();\n    };\n\n    /**\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\n     *\n     * @returns {jQuery} those images.\n     */\n    DrawlinesQuestion.prototype.getNotYetLoadedImages = function() {\n        return this.getRoot().find('.drawlines img.dropbackground').not(function(i, imgNode) {\n            return this.imageIsLoaded(imgNode);\n        });\n    };\n\n    /**\n     * Check if an image has loaded without errors.\n     *\n     * @param {HTMLImageElement} imgElement an image.\n     * @returns {boolean} true if this image has loaded without errors.\n     */\n    DrawlinesQuestion.prototype.imageIsLoaded = function(imgElement) {\n        return imgElement.complete && imgElement.naturalHeight !== 0;\n    };\n\n    /**\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\n     * with event dispatching.\n     *\n     * @type {Object}\n     */\n    var questionManager = {\n\n        /**\n         * {boolean} ensures that the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {Object} ensures that the marker event handlers are only initialised once per question,\n         * indexed by containerId (id on the .que div).\n         */\n        markerEventHandlersInitialised: {},\n\n        /**\n         * {boolean} is printing or not.\n         */\n        isPrinting: false,\n\n        /**\n         * {boolean} is keyboard navigation.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {}, // An object containing all the information about each question on the page.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {DrawlinesQuestion[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * @var {line[]} the question lines in the preview, indexed by line number.\n         */\n        questionLines: [],\n\n        /**\n         * Initialise one question.\n         *\n         * @param {String} containerId the id of the div.que that contains this question.\n         * @param {boolean} readOnly whether the question is read-only.\n         * @param {Object[]} visibleDropZones data on any drop zones to draw as part of the feedback.\n         * @param {Object[]} questionLines\n         */\n        init: function(containerId, readOnly, visibleDropZones, questionLines) {\n            questionManager.questions[containerId] =\n                new DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines);\n\n            questionManager.questions[containerId].updateCoordinates();\n\n            if (!questionManager.markerEventHandlersInitialised.hasOwnProperty(containerId)) {\n                questionManager.markerEventHandlersInitialised[containerId] = true;\n\n                var questionContainer = document.getElementById(containerId);\n                if (questionContainer.classList.contains('drawlines') &&\n                    !questionContainer.classList.contains('qtype_drawlines-readonly')) {\n\n                    // Add event listeners to the 'previewArea'.\n                    // For dropzone SVG.\n                    var dropArea = document.querySelector('.droparea');\n                    // Add event listener for mousedown and touchstart events\n                    dropArea.addEventListener('mousedown', questionManager.handleDropZoneEventMove);\n                    dropArea.addEventListener('touchstart', questionManager.handleDropZoneEventMove);\n                    // Add event listener for keydown and keypress events\n                    dropArea.addEventListener('keydown', questionManager.handleKeyPress);\n                    dropArea.addEventListener('keypress', questionManager.handleKeyPress);\n\n                    // For draghomes SVG.\n                    var drags = document.querySelector('.draghomes');\n                    // Add event listener for mousedown and touchstart events\n                    drags.addEventListener('mousedown', questionManager.handleDragHomeEventMove);\n                    drags.addEventListener('touchstart', questionManager.handleDragHomeEventMove);\n                    // Add event listener for keydown and keypress events\n                    drags.addEventListener('keydown', questionManager.handleKeyPress);\n                    drags.addEventListener('keypress', questionManager.handleKeyPress);\n                }\n            }\n        },\n\n        // TODO: commented as currently we are not using this function. To be removed later if not needed.\n        // /**\n        //  * Set up the event handlers that make this question type work. (Done once per page.)\n        //  */\n        // setupEventHandlers: function() {\n        //     $(window).on('resize', function() {\n        //         questionManager.handleWindowResize(false);\n        //     });\n        //     window.addEventListener('beforeprint', function() {\n        //         questionManager.isPrinting = true;\n        //         questionManager.handleWindowResize(questionManager.isPrinting);\n        //     });\n        //     window.addEventListener('afterprint', function() {\n        //         questionManager.isPrinting = false;\n        //         questionManager.handleWindowResize(questionManager.isPrinting);\n        //     });\n        //     setTimeout(function() {\n        //         questionManager.fixLayoutIfThingsMoved();\n        //     }, 100);\n        // },\n\n        handleDropZoneEventMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone .startcircle.shape')) {\n                // Dragging the move handle circle attached to the start of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'startcircle', dropzoneNo);\n            } else if (event.target.closest('.dropzone .endcircle.shape')) {\n                // Dragging the move handle circle attached to the end of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'endcircle', dropzoneNo);\n            } else if (event.target.closest('polyline.shape')) {\n                // Dragging the entire line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n            }\n        },\n\n        handleDragHomeEventMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone polyline.shape')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n                question.saveCoordsForChoice(dropzoneNo);\n            }\n        },\n\n        /**\n         * Get the SVG element, if there is one, otherwise return null.\n         *\n         * @returns {SVGElement|null} the SVG element or null.\n         */\n        getSvg: function() {\n            var svg = document.querySelector('.droparea svg');\n            if (svg === null) {\n                return null;\n            } else {\n                return svg;\n            }\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @return {String} the value of that field.\n         */\n        getFormValue: function(name, indexes) {\n            var el = this.getEl(name, indexes);\n            return el.value;\n        },\n\n        /**\n         * Handle key down / press events on markers.\n         * @param {Event} e\n         */\n        handleKeyPress: function(e) {\n            var question = questionManager.getQuestionForEvent(e);\n            var dropzoneElement, dropzoneNo, drag, activeElement;\n            if (e.target.closest('.dropzone circle.startcircle')) {\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                drag = e.target.closest('.dropzone circle.startcircle');\n                activeElement = 'startcircle';\n            } else if (e.target.closest('.dropzone circle.endcircle')) {\n                drag = e.target.closest('.dropzone circle.endcircle');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'endcircle';\n            } else if (e.target.closest('.dropzone polyline.shape')) {\n                drag = e.target.closest('.dropzone polyline.shape');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'line';\n            }\n            if (question && dropzoneElement) {\n                question.handleKeyPress(e, drag, dropzoneNo, activeElement);\n            }\n        },\n\n        /**\n         * Handle when the window is resized.\n         * @param {boolean} isPrinting\n         */\n        handleWindowResize: function(isPrinting) {\n            for (var containerId in questionManager.questions) {\n                if (questionManager.questions.hasOwnProperty(containerId)) {\n                    questionManager.questions[containerId].isPrinting = isPrinting;\n                    questionManager.questions[containerId].handleResize();\n                }\n            }\n        },\n\n        /**\n         * Given an event, work out which question it effects.\n         * @param {Event} e the event.\n         * @returns {DrawlinesQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.drawlines').attr('id');\n            return questionManager.questions[containerId];\n        },\n    };\n\n    /**\n     * @alias module:qtype_drawlines/question\n     */\n    return {\n        /**\n         * Initialise one drag-drop markers question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         * @param {String[]} visibleDropZones the geometry of any drop-zones to show.\n         * @param {Object[]} questionLines\n         */\n        init: questionManager.init,\n    };\n});"],"names":["define","$","dragDrop","Lines","DrawlinesQuestion","containerId","readOnly","visibleDropZones","questionLines","thisQ","this","lineSVGs","lines","isPrinting","questionAnswer","svgEl","getRoot","addClass","allImagesLoaded","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","prototype","updateCoordinates","line","length","coordinates","getCoordinates","parse","updateSvgEl","parseCoordinates","lineType","bits","split","slice","Error","drawSVGLines","height","startcoordinates","endcoordinates","draginitialcoords","bgImage","document","querySelector","innerHTML","width","draghomeSvg","getElementById","dropzoneSvg","undefined","coords","type","make","labelstart","labelend","addToSvg","drawDropzone","svg","style","position","top","find","childNodes","getAttribute","bgRatio","bgImg","bgImgNaturalWidth","get","naturalWidth","lineNumber","makeSvg","setAttribute","dropzoneNo","updateSvg","handleCircleMove","e","whichHandle","info","prepare","start","movingDropZone","lastX","x","lastY","y","dragProxy","makeDragProxy","maxX","baseVal","value","maxY","pageX","pageY","move","parseInt","saveCoordsForChoice","body","removeChild","handleLineMove","isMoveFromDragsToDropzones","isMoveFromDropzonesToDrags","movingDrag","whichSVG","svgClass","selectedElement","dropX","clientX","dropY","clientY","closeTo","closest","centre1","addToDropZone","dimensions","getSvgDimensionsByClass","moveDrags","createElement","left","appendChild","choiceNo","imageCoords","items","gEleClassAttributes","each","drag","children","attr","includes","val","handleKeyPress","activeElement","dropzoneElement","question","questionManager","getQuestionForEvent","event","target","code","preventDefault","focus","dragElement","className","classList","contains","getInput","getChoiceNoFromElement","isInfiniteDrag","hasClass","imageLoadingTimeoutId","clearTimeout","setTimeout","not","i","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","eventHandlersInitialised","markerEventHandlersInitialised","isKeyboardNavigation","questions","noOfLines","dropZones","init","hasOwnProperty","questionContainer","dropArea","addEventListener","handleDropZoneEventMove","drags","handleDragHomeEventMove","dataset","getSvg","getFormValue","name","indexes","getEl","handleWindowResize","handleResize","currentTarget"],"mappings":"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"}