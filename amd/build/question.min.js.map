{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to allow dragging options for lines (using mouse down or touch) or tab through lines using keyboard.\n *\n * @module     qtype_drawlines/question\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/dragdrop',\n    'qtype_drawlines/line',\n    'core/key_codes',\n    'core_form/changechecker',\n], function(\n    $,\n    dragDrop,\n    Line,\n) {\n\n    \"use strict\";\n\n    /**\n     * Object to handle one drag-drop markers question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @param {Object[]} visibleDropZones the geometry of any drop-zones to show.\n     *      Objects have fields line, coords and markertext.\n     * @param {line[]} questionLines\n     * @constructor\n     */\n    function DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines) {\n        var thisQ = this;\n        this.containerId = containerId;\n        this.visibleDropZones = visibleDropZones;\n        this.questionLines = questionLines;\n        this.lineSVGs = [];\n        this.lines = [];\n        this.svgEl = null;\n        this.isPrinting = false;\n        if (readOnly) {\n            this.getRoot().classList.add('qtype_drawlines-readonly');\n        }\n        let bgImage = this.bgImage();\n        thisQ.createSvgOnImageLoad(bgImage);\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     */\n    DrawlinesQuestion.prototype.updateCoordinates = function() {\n        // We don't need to scale the shape for editing form.\n        for (var line = 0; line < this.lineSVGs.length; line++) {\n            var coordinates = this.getSVGLineCoordinates(this.lineSVGs[line]);\n            if (!this.lines[line].parse(coordinates[0], coordinates[1], 1)) {\n                // Invalid coordinates. Don't update the preview.\n                return;\n            }\n            this.updateSvgEl(line);\n        }\n    };\n\n    /**\n     * Parse the coordinates from a particular string.\n     *\n     * @param {String} coordinates The coordinates to be parsed. The values are in the format: x1,y1 x2,y2.\n     *                             Except for infinite line type where it's in the format x1,y1 x2,y2, x3,y3, x4,y4.\n     *                             Here, x1,y1 and x4,y4 are the two very end points of the infinite line and\n     *                             x2,y2 and x3,y3 are the pints with the handles.\n     * @param {String} lineType The type of the line.\n     */\n    DrawlinesQuestion.prototype.parseCoordinates = function(coordinates, lineType) {\n        var bits = coordinates.split(' ');\n        if (lineType === 'lineinfinite' && bits.length !== 2) {\n            // Remove the first and last coordinates.\n            bits = bits.slice(1, -1);\n        }\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return bits;\n    };\n\n    /**\n     * Draws the svg lines of any drop zones that should be visible for feedback purposes.\n     */\n    DrawlinesQuestion.prototype.drawDropzone = function() {\n        var bgImage = this.bgImage();\n        var svg = this.getRoot().querySelector('svg.dropzones');\n        var rootElement = this.getRoot();\n        rootElement.querySelector('.que-dlines-dropzone').style.position = 'relative';\n        rootElement.querySelector('.que-dlines-dropzone').style.top = (bgImage.height + 1) * -1 + \"px\";\n        rootElement.querySelector('.que-dlines-dropzone').style.height = bgImage.height + \"px\";\n        rootElement.querySelector('.droparea').style.height = bgImage.height + \"px\";\n        if (!svg) {\n            var dropZone = this.getRoot().querySelector('.que-dlines-dropzone');\n            dropZone.innerHTML =\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n                    'class= \"dropzones\" ' +\n                    'width=\"' + bgImage.width + '\" ' +\n                    'height=\"' + bgImage.height + '\" ' +\n                    'viewBox=\"0 0 ' + bgImage.width + ' ' + bgImage.height + '\" ' +\n                    'preserveAspectRatio=\"xMinYMin meet\" ' +\n                '></svg>';\n            this.drawSVGLines(this.questionLines);\n        }\n    };\n\n    /**\n     * Draws the svg lines of any drop zones.\n     *\n     * @param {Object[]} questionLines\n     */\n    DrawlinesQuestion.prototype.drawSVGLines = function(questionLines) {\n        var bgImage = this.bgImage(),\n            bgratio = this.bgRatio(),\n            height, startcoordinates, endcoordinates, draginitialcoords;\n\n        var drags = this.getRoot().querySelector('.draghomes');\n        drags.innerHTML =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dragshome\" ' +\n            'width=\"' + bgImage.width + '\" ' +\n            'height=\"' + questionLines.length * 50 + '\"' +\n            '></svg>';\n\n        var draghomeSvg = this.getRoot().querySelector('.dragshome');\n        var dropzoneSvg = this.getRoot().querySelector('.dropzones');\n        var initialHeight = 25;\n        for (let line = 0; line < questionLines.length; line++) {\n            height = initialHeight + (line * 50 * bgratio);\n            startcoordinates = '50,' + height + ';10';\n            endcoordinates = '200,' + height + ';10';\n\n            // Check if the lines are to be set with initial coordinates.\n            draginitialcoords = this.visibleDropZones['c' + line];\n            if (draginitialcoords !== undefined && draginitialcoords !== '') {\n                // The visibleDropZones array holds the response in the format x1,y1 x2,y2 - to be added to svgdropzone.\n                var coords = this.parseCoordinates(draginitialcoords, questionLines[line].type);\n                startcoordinates = coords[0] + ';10';\n                endcoordinates = coords[1] + ';10';\n                this.lines[line] = Line.make(\n                    [startcoordinates, endcoordinates],\n                    questionLines[line].type,\n                    [questionLines[line].labelstart, questionLines[line].labelmiddle, questionLines[line].labelend]\n                );\n                this.addToSvg(line, dropzoneSvg);\n            } else {\n                // Need to be added to draghomeSvg.\n                this.lines[line] = Line.make(\n                    [startcoordinates, endcoordinates],\n                    questionLines[line].type,\n                    [questionLines[line].labelstart, questionLines[line].labelmiddle, questionLines[line].labelend]\n                );\n                this.addToSvg(line, draghomeSvg);\n            }\n        }\n    };\n\n    /**\n     * Handle when the window is resized.\n     */\n    DrawlinesQuestion.prototype.handleResize = function() {\n        let thisQ = this,\n            bgImg = this.bgImage(),\n            bgRatio = this.bgRatio(),\n            svgdropzones = this.getRoot().querySelector('div.droparea svg.dropzones'),\n            svgdraghomes = this.getRoot().querySelector('div.draghomes svg.dragshome');\n\n        // Calculate and set the svg attributes.\n        thisQ.drawDropzone();\n        svgdropzones.setAttribute(\"width\", bgImg.width);\n        svgdropzones.setAttribute(\"height\", bgImg.height);\n        svgdropzones.setAttribute(\"viewBox\", '0 0 ' + bgImg.width + ' ' + bgImg.height);\n\n        svgdraghomes.setAttribute(\"width\", this.bgImage().width);\n        svgdraghomes.setAttribute(\"height\", parseInt(thisQ.questionLines.length * 50 * bgRatio));\n\n        // Transform the svg lines to scale based on window size.\n        for (let linenumber = 0; linenumber < thisQ.questionLines.length; linenumber++) {\n            var svgline = thisQ.getRoot().querySelector('.dropzone.choice' + linenumber);\n            thisQ.handleElementScale(svgline);\n        }\n    };\n\n    /**\n     * Return the background ratio.\n     *\n     * @returns {number} Background ratio.\n     */\n    DrawlinesQuestion.prototype.bgRatio = function() {\n        var bgImg = this.bgImage();\n        var bgImgNaturalWidth = bgImg.naturalWidth;\n        var bgImgClientWidth = bgImg.width;\n\n        return bgImgClientWidth / bgImgNaturalWidth;\n    };\n\n    /**\n     * Scale the drag if needed.\n     *\n     * @param {SVGElement} element the line to place.\n     */\n    DrawlinesQuestion.prototype.handleElementScale = function(element) {\n        var bgRatio = this.bgRatio();\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n        element.setAttribute('transform', 'scale(' + bgRatio + ')');\n    };\n\n    /**\n     * Get the outer div for this question.\n     *\n     * @return {*}\n     */\n    DrawlinesQuestion.prototype.getRoot = function() {\n        return document.getElementById(this.containerId);\n    };\n\n    /**\n     * Get the img that is the background image.\n     *\n     * @returns {element|undefined} the DOM element (if any)\n     */\n    DrawlinesQuestion.prototype.bgImage = function() {\n        return this.getRoot().querySelector('img.dropbackground');\n    };\n\n    /**\n     * Returns the coordinates for the line from the SVG.\n     * @param {SVGElement} svgEl\n     * @returns {Array} the coordinates.\n     */\n    DrawlinesQuestion.prototype.getSVGLineCoordinates = function(svgEl) {\n\n        var circleStartXCoords = svgEl.childNodes[1].getAttribute('cx');\n        var circleStartYCoords = svgEl.childNodes[1].getAttribute('cy');\n        var circleStartRCoords = svgEl.childNodes[1].getAttribute('r');\n        var circleEndXCoords = svgEl.childNodes[2].getAttribute('cx');\n        var circleEndYCoords = svgEl.childNodes[2].getAttribute('cy');\n        var circleEndRCoords = svgEl.childNodes[2].getAttribute('r');\n        return [circleStartXCoords + ',' + circleStartYCoords + ';' + circleStartRCoords,\n            circleEndXCoords + ',' + circleEndYCoords + ';' + circleEndRCoords];\n    };\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {int} lineNumber Line Number\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    DrawlinesQuestion.prototype.addToSvg = function(lineNumber, svg) {\n        let bgImage = this.bgImage();\n        this.lineSVGs[lineNumber] = this.lines[lineNumber].makeSvg(svg, bgImage.naturalWidth, bgImage.naturalHeight);\n        if (!this.lineSVGs[lineNumber]) {\n            return;\n        }\n        this.lineSVGs[lineNumber].setAttribute('data-dropzone-no', lineNumber);\n        if (svg.getAttribute('class') === 'dropzones') {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' placed');\n        } else {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' inactive');\n        }\n    };\n\n    /**\n     * Update the line of this drop zone in an SVG image.\n     *\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.updateSvgEl = function(dropzoneNo) {\n        var bgimage = this.bgImage();\n        this.lines[dropzoneNo].updateSvg(this.lineSVGs[dropzoneNo]);\n        this.lines[dropzoneNo].updateSvgLabels(this.lineSVGs[dropzoneNo], bgimage.naturalWidth, bgimage.naturalHeight);\n    };\n\n    /**\n     * Start responding to dragging the move handle attached to the line ends (circles).\n     *\n     * @param {Event} e Event object\n     * @param {String} whichHandle which circle handle was moved, i.e., startcircle or endcircle.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleCircleMove = function(e, whichHandle, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            bgimage = this.bgImage(),\n            maxX = bgimage.naturalWidth,\n            maxY = bgimage.naturalHeight;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            movingDropZone.lines[dropzoneNo].move(whichHandle,\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY), parseInt(maxX), parseInt(maxY));\n            lastX = pageX;\n            lastY = pageY;\n            movingDropZone.updateSvgEl(dropzoneNo);\n            movingDropZone.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Start responding to dragging the move handle attached to the line.\n     *\n     * @param {Event} e Event object\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleLineMove = function(e, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDrag = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            maxX,\n            maxY,\n            whichSVG = \"\",\n            bgImage = this.bgImage(),\n            isMoveFromDragsToDropzones,\n            isMoveFromDropzonesToDrags,\n            svgClass;\n\n        var selectedElement = this.lineSVGs[dropzoneNo];\n\n        let dropX, dropY;\n        if (e.type === 'mousedown') {\n            dropX = e.clientX;\n            dropY = e.clientY;\n        } else if (e.type === 'touchstart') {\n            dropX = e.touches[0].clientX;\n            dropY = e.touches[0].clientY;\n        }\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n\n            // The svg's which are associated with this question.\n            var closestSVGs = movingDrag.getSvgsClosestToElement(selectedElement);\n\n            // Check if the drags need to be moved from one svg to another.\n            var closeTo = selectedElement.closest('svg');\n            svgClass = closeTo.getAttribute('class');\n\n            // Moving the drags between the SVG's.\n            // If true, the drag is moved from draghomes SVG to dropZone SVG.\n            isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n\n            // If true, the drag is moved from dropZone SVG to draghomes SVG.\n            isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n                (movingDrag.lines[dropzoneNo].centre1.y > (bgImage.naturalHeight - 20));\n\n            if (isMoveFromDragsToDropzones || isMoveFromDropzonesToDrags) {\n                movingDrag.lines[dropzoneNo].addToDropZone('mouse', selectedElement,\n                    closestSVGs.svgDropZone, closestSVGs.svgDragsHome, dropX, dropY, bgImage.naturalHeight);\n            }\n\n            // Drag the lines within the SVG\n            // Get the dimensions of the selected element's svg.\n            closeTo = selectedElement.closest('svg');\n            var dimensions = movingDrag.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n            maxX = dimensions.maxX;\n            maxY = dimensions.maxY;\n            whichSVG = dimensions.whichSVG;\n\n            movingDrag.lines[dropzoneNo].moveDrags(\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY),\n                parseInt(maxX), parseInt(maxY), whichSVG);\n            lastX = pageX;\n            lastY = pageY;\n\n            movingDrag.updateSvgEl(dropzoneNo);\n            movingDrag.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    DrawlinesQuestion.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Save the coordinates for a dropped item in the form field.\n     *\n     * @param {Number} choiceNo which copy of the choice this was.\n     **/\n    DrawlinesQuestion.prototype.saveCoordsForChoice = function(choiceNo) {\n        let imageCoords = [];\n        var items = this.getRoot().querySelector('svg g.choice' + choiceNo),\n            gEleClassAttributes = '';\n        if (items) {\n                imageCoords = items.querySelector('polyline').getAttribute('points');\n                gEleClassAttributes = items.getAttribute('class');\n        }\n        if (gEleClassAttributes !== '' && gEleClassAttributes.includes('placed')) {\n            this.getRoot().querySelector('input.choice' + choiceNo).value = imageCoords;\n        } else if (gEleClassAttributes !== '' && gEleClassAttributes.includes('inactive')) {\n            this.getRoot().querySelector('input.choice' + choiceNo).value = '';\n        }\n    };\n\n    /**\n     * Handle key down / press events on svg lines.\n     *\n     * @param {KeyboardEvent} e\n     * @param {SVGElement} drag SVG element being dragged.\n     * @param {int} dropzoneNo\n     * @param {String} activeElement The element being dragged, whether it is the line or the line endpoints.\n     */\n    DrawlinesQuestion.prototype.handleKeyPress = function(e, drag, dropzoneNo, activeElement) {\n\n        var x = 0,\n            y = 0,\n            dropzoneElement,\n            question = questionManager.getQuestionForEvent(e);\n\n        dropzoneElement = drag.closest('g');\n        switch (e.code) {\n            case 'ArrowLeft':\n            case 'KeyA': // A.\n                x = -1;\n                break;\n            case 'ArrowRight':\n            case 'KeyD': // D.\n                x = 1;\n                break;\n            case 'ArrowDown':\n            case 'KeyS': // S.\n                y = 1;\n                break;\n            case 'ArrowUp':\n            case 'KeyW': // W.\n                y = -1;\n                break;\n            case 'Space':\n            case 'Escape':\n                break;\n            default:\n                return; // Ingore other keys.\n        }\n        e.preventDefault();\n\n        // Moving the drags between the SVG's.\n        var closeTo = drag.closest('svg');\n        var svgClass = closeTo.getAttribute('class');\n        var maxX,\n            maxY,\n            whichSVG;\n        var bgImage = this.bgImage();\n        var closestSVGs = this.getSvgsClosestToElement(drag);\n        var isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n        var isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n            (question.lines[dropzoneNo].centre1.y > ((bgImage.naturalHeight - 20)));\n\n        if (isMoveFromDragsToDropzones) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                closestSVGs.svgDropZone, closestSVGs.svgDragsHome, null, null, bgImage.naturalHeight, 'DragsSVG');\n        } else if (isMoveFromDropzonesToDrags) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                closestSVGs.svgDropZone, closestSVGs.svgDragsHome, null, null, null, 'DropZonesSVG');\n        }\n\n        // Get the dimensions of the selected element's svg.\n        closeTo = drag.closest('svg');\n        var dimensions = question.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n        maxX = dimensions.maxX;\n        maxY = dimensions.maxY;\n        whichSVG = dimensions.whichSVG;\n\n        if (activeElement === 'line') {\n            // Move the entire line when the focus is on it.\n            question.lines[dropzoneNo].moveDrags(parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY), whichSVG);\n        } else {\n            // Move the line endpoints.\n            question.lines[dropzoneNo].move(activeElement, parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY));\n        }\n        question.updateSvgEl(dropzoneNo);\n        this.saveCoordsForChoice(dropzoneNo);\n        drag.focus();\n    };\n\n    /**\n     * Returns the dimensions of the SVG image to which the drag element belongs.\n     *\n     * @param {SVG} dragSVG The SVG to which the drag element belongs.\n     * @param {String} className Class asscociated with the SVG\n     * @return {{whichSVG: (string), maxY: number, maxX: number}}\n     */\n    DrawlinesQuestion.prototype.getSvgDimensionsByClass = function(dragSVG, className) {\n        let bgImg = this.bgImage();\n        return {\n            maxX: bgImg.naturalWidth,\n            maxY: bgImg.naturalHeight,\n            whichSVG: className === 'dragshome' ? 'DragsSVG' : 'DropZonesSVG'\n        };\n    };\n\n    /**\n     * Returns the SVG's to which the drag element belongs.\n     *\n     * @param {SVGElement} dragElement The element which is being moved.\n     * @return {{svgDragsHome, svgDropZone}}\n     */\n    DrawlinesQuestion.prototype.getSvgsClosestToElement = function(dragElement) {\n        var svgElement = dragElement.closest('svg');\n        var svgElementClass = svgElement.getAttribute('class');\n        var svgDragsHome, svgDropZone, parent;\n\n        if (svgElementClass === \"dragshome\") {\n            svgDragsHome = svgElement;\n            parent = svgElement.closest('.ddarea');\n            svgDropZone = parent.querySelector('.dropzones');\n        } else {\n            svgDropZone = svgElement;\n            parent = svgElement.closest('.ddarea');\n            svgDragsHome = parent.querySelector('.dragshome');\n        }\n        return {\n            svgDropZone: svgDropZone,\n            svgDragsHome: svgDragsHome\n        };\n    };\n\n    /**\n     * Loading SVG image.\n     *\n     * @param {HTMLImageElement}  img\n     */\n    DrawlinesQuestion.prototype.createSvgOnImageLoad = function(img) {\n        if (!img) {\n            window.console.error(`Image with id '${img}' not found.`);\n            return;\n        }\n\n        // Check if the image is already loaded\n        if (img.complete && img.naturalHeight !== 0) {\n            this.drawDropzone();\n        } else {\n            // Add an event listener for the load event\n            img.addEventListener('load', () => this.drawDropzone());\n        }\n    };\n\n    /**\n     * Singleton that tracks all the DrawlinesQuestions on this page, and deals\n     * with event dispatching.\n     *\n     * @type {Object}\n     */\n    var questionManager = {\n\n        /**\n         * {boolean} ensures that the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {Object} ensures that the marker event handlers are only initialised once per question,\n         * indexed by containerId (id on the .que div).\n         */\n        lineEventHandlersInitialised: {},\n\n        /**\n         * {boolean} is printing or not.\n         */\n        isPrinting: false,\n\n        /**\n         * {boolean} is keyboard navigation.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {}, // An object containing all the information about each question on the page.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {DrawlinesQuestion[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * @var {line[]} the question lines in the preview, indexed by line number.\n         */\n        questionLines: [],\n\n        /**\n         * Initialise one question.\n         *\n         * @param {String} containerId the id of the div.que that contains this question.\n         * @param {boolean} readOnly whether the question is read-only.\n         * @param {Object[]} visibleDropZones data on any drop zones to draw as part of the feedback.\n         * @param {Object[]} questionLines\n         */\n        init: function(containerId, readOnly, visibleDropZones, questionLines) {\n            questionManager.questions[containerId] =\n                new DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines);\n\n            questionManager.questions[containerId].updateCoordinates();\n            if (!questionManager.eventHandlersInitialised) {\n                questionManager.setupEventHandlers();\n                questionManager.eventHandlersInitialised = true;\n            }\n\n            if (!questionManager.lineEventHandlersInitialised.hasOwnProperty(containerId)) {\n                questionManager.lineEventHandlersInitialised[containerId] = true;\n\n                var questionContainer = document.getElementById(containerId);\n                if (questionContainer.classList.contains('drawlines') &&\n                    !questionContainer.classList.contains('qtype_drawlines-readonly')) {\n\n                    // Add event listeners to the 'previewArea'.\n                    // For dropzone SVG.\n                    var dropArea = questionContainer.querySelector('.droparea');\n                    // Add event listener for mousedown and touchstart events.\n                    dropArea.addEventListener('mousedown', questionManager.handleDropZoneEventMove);\n                    dropArea.addEventListener('touchstart', questionManager.handleDropZoneEventMove);\n                    // Add event listener for keydown and keypress events.\n                    dropArea.addEventListener('keydown', questionManager.handleKeyPress);\n                    dropArea.addEventListener('keypress', questionManager.handleKeyPress);\n\n                    dropArea.addEventListener('focusin', function(e) {\n                        questionManager.handleKeyboardFocus(e, true);\n                    });\n                    dropArea.addEventListener('focusout', function(e) {\n                        questionManager.handleKeyboardFocus(e, false);\n                    });\n\n                    // For draghomes SVG.\n                    var drags = questionContainer.querySelector('.draghomes');\n                    // Add event listener for mousedown and touchstart events.\n                    drags.addEventListener('mousedown', questionManager.handleDragHomeEventMove);\n                    drags.addEventListener('touchstart', questionManager.handleDragHomeEventMove);\n                    // Add event listener for keydown and keypress events.\n                    drags.addEventListener('keydown', questionManager.handleKeyPress);\n                    drags.addEventListener('keypress', questionManager.handleKeyPress);\n\n                    drags.addEventListener('focusin', function(e) {\n                        questionManager.handleKeyboardFocus(e, true);\n                    });\n                    drags.addEventListener('focusout', function(e) {\n                        questionManager.handleKeyboardFocus(e, false);\n                    });\n                }\n            }\n        },\n\n        /**\n         * Set up the event handlers that make this question type work. (Done once per page.)\n         */\n        setupEventHandlers: function() {\n            window.addEventListener('resize', function() {\n                questionManager.handleWindowResize(false);\n            });\n            window.addEventListener('beforeprint', function() {\n                questionManager.isPrinting = true;\n                questionManager.handleWindowResize(questionManager.isPrinting);\n            });\n            window.addEventListener('afterprint', function() {\n                questionManager.isPrinting = false;\n                questionManager.handleWindowResize(questionManager.isPrinting);\n            });\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved();\n            }, 100);\n        },\n\n        /**\n         * Sometimes, despite our best efforts, things change in a way that cannot\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\n         * Therefore, we need to periodically check everything is in the right position.\n         */\n        fixLayoutIfThingsMoved: function() {\n            if (!questionManager.isKeyboardNavigation) {\n                this.handleWindowResize(questionManager.isPrinting);\n            }\n            // We use setTimeout after finishing work, rather than setInterval,\n            // in case positioning things is slow. We want 100 ms gap\n            // between executions, not what setInterval does.\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\n            }, 100);\n        },\n\n        /**\n         * Handle mouse and touch events for dropzone svg.\n         *\n         * @param {Event} event\n         */\n        handleDropZoneEventMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone .startcircle.shape')) {\n                // Dragging the move handle circle attached to the start of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'startcircle', dropzoneNo);\n            } else if (event.target.closest('.dropzone .endcircle.shape')) {\n                // Dragging the move handle circle attached to the end of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'endcircle', dropzoneNo);\n            } else if (event.target.closest('polyline.shape')) {\n                // Dragging the entire line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n            }\n        },\n\n        /**\n         * Handle mouse and touch events for dragshome svg.\n         *\n         * @param {Event} event\n         */\n        handleDragHomeEventMove: function(event) {\n            let dropzoneElement, dropzoneNo,\n                question = questionManager.getQuestionForEvent(event);\n\n            if (event.target.closest('g')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n                question.saveCoordsForChoice(dropzoneNo);\n            }\n        },\n\n        /**\n         * Handle key down / press events on markers.\n         *\n         * @param {Event} e\n         */\n        handleKeyPress: function(e) {\n            var question = questionManager.getQuestionForEvent(e);\n            var dropzoneElement, dropzoneNo, drag, activeElement;\n            if (e.target.closest('.dropzone circle.startcircle')) {\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                drag = e.target.closest('.dropzone circle.startcircle');\n                activeElement = 'startcircle';\n            } else if (e.target.closest('.dropzone circle.endcircle')) {\n                drag = e.target.closest('.dropzone circle.endcircle');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'endcircle';\n            } else if (e.target.closest('g.dropzone')) {\n                drag = e.target.closest('g.dropzone');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'line';\n            }\n            if (question && dropzoneElement) {\n                question.handleKeyPress(e, drag, dropzoneNo, activeElement);\n            }\n        },\n\n        /**\n         * Handle when the window is resized.\n         * @param {boolean} isPrinting\n         */\n        handleWindowResize: function(isPrinting) {\n            for (var containerId in questionManager.questions) {\n                if (questionManager.questions.hasOwnProperty(containerId)) {\n                    questionManager.questions[containerId].isPrinting = isPrinting;\n                    questionManager.questions[containerId].handleResize();\n                }\n            }\n        },\n\n        /**\n         * Handle focus lost events on markers.\n         * @param {Event} e\n         * @param {boolean} isNavigating\n         */\n        handleKeyboardFocus: function(e, isNavigating) {\n            questionManager.isKeyboardNavigation = isNavigating;\n        },\n\n        /**\n         * Given an event, work out which question it effects.\n         *\n         * @param {Event} e the event.\n         * @returns {DrawlinesQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.drawlines').attr('id');\n            return questionManager.questions[containerId];\n        },\n    };\n\n    /**\n     * @alias module:qtype_drawlines/question\n     */\n    return {\n        /**\n         * Initialise one drag-drop markers question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         * @param {String[]} visibleDropZones the geometry of any drop-zones to show.\n         * @param {Object[]} questionLines\n         */\n        init: questionManager.init,\n    };\n});\n"],"names":["define","$","dragDrop","Line","DrawlinesQuestion","containerId","readOnly","visibleDropZones","questionLines","lineSVGs","lines","svgEl","isPrinting","getRoot","classList","add","bgImage","this","createSvgOnImageLoad","prototype","updateCoordinates","line","length","coordinates","getSVGLineCoordinates","parse","updateSvgEl","parseCoordinates","lineType","bits","split","slice","Error","drawDropzone","svg","querySelector","rootElement","style","position","top","height","innerHTML","width","drawSVGLines","startcoordinates","endcoordinates","draginitialcoords","bgratio","bgRatio","draghomeSvg","dropzoneSvg","undefined","coords","type","make","labelstart","labelmiddle","labelend","addToSvg","handleResize","thisQ","bgImg","svgdropzones","svgdraghomes","setAttribute","parseInt","linenumber","svgline","handleElementScale","bgImgNaturalWidth","naturalWidth","element","document","getElementById","childNodes","getAttribute","lineNumber","makeSvg","naturalHeight","dropzoneNo","bgimage","updateSvg","updateSvgLabels","handleCircleMove","e","whichHandle","info","prepare","start","movingDropZone","lastX","x","lastY","y","dragProxy","makeDragProxy","maxX","maxY","pageX","pageY","move","saveCoordsForChoice","body","removeChild","handleLineMove","isMoveFromDragsToDropzones","isMoveFromDropzonesToDrags","svgClass","movingDrag","whichSVG","selectedElement","dropX","dropY","clientX","clientY","touches","closestSVGs","getSvgsClosestToElement","closeTo","closest","centre1","addToDropZone","svgDropZone","svgDragsHome","dimensions","getSvgDimensionsByClass","moveDrags","createElement","left","appendChild","choiceNo","imageCoords","items","gEleClassAttributes","includes","value","handleKeyPress","drag","activeElement","dropzoneElement","question","questionManager","getQuestionForEvent","code","preventDefault","focus","dragSVG","className","dragElement","svgElement","img","complete","addEventListener","window","console","error","eventHandlersInitialised","lineEventHandlersInitialised","isKeyboardNavigation","questions","noOfLines","dropZones","init","setupEventHandlers","hasOwnProperty","questionContainer","contains","dropArea","handleDropZoneEventMove","handleKeyboardFocus","drags","handleDragHomeEventMove","handleWindowResize","setTimeout","fixLayoutIfThingsMoved","event","target","dataset","isNavigating","currentTarget","attr"],"mappings":"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"}