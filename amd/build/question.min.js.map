{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\n *\n * @module     qtype_drawlines/question\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/dragdrop',\n    'qtype_drawlines/Line',\n    'core/key_codes',\n    'core_form/changechecker',\n], function(\n    $,\n    dragDrop,\n    Lines,\n    keys,\n    FormChangeChecker,\n) {\n\n    \"use strict\";\n\n    /**\n     * Object to handle one drag-drop markers question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @param {Object[]} visibleDropZones the geometry of any drop-zones to show.\n     *      Objects have fields line, coords and markertext.\n     * @param {line[]} questionLines\n     * @constructor\n     */\n    function DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines) {\n        var thisQ = this;\n        this.containerId = containerId;\n        this.visibleDropZones = visibleDropZones;\n        this.questionLines = questionLines;\n        this.lineSVGs = [];\n        this.lines = [];\n        this.isPrinting = false;\n        this.questionAnswer = {};\n        this.svgEl = null;\n        if (readOnly) {\n            this.getRoot().addClass('qtype_drawlines-readonly');\n        }\n        thisQ.allImagesLoaded = false;\n        thisQ.getNotYetLoadedImages().one('load', function() {\n            thisQ.waitForAllImagesToBeLoaded();\n        });\n        thisQ.waitForAllImagesToBeLoaded();\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     */\n    DrawlinesQuestion.prototype.updateCoordinates = function() {\n        // We don't need to scale the shape for editing form.\n        for (var line = 0; line < this.lineSVGs.length; line++) {\n            var coordinates = this.getCoordinates(this.lineSVGs[line]);\n            if (!this.lines[line].parse(coordinates[0], coordinates[1], 1)) {\n                // Invalid coordinates. Don't update the preview.\n                return;\n            }\n            this.updateSvgEl(line);\n        }\n    };\n\n    /**\n     * Parse the coordinates from a particular string.\n     * @param {String} coordinates The coordinates to be parsed. The values are in the format: x1,y1 x2,y2.\n     *                             Except for infinite line type where it's in the format x1,y1 x2,y2, x3,y3, x4,y4.\n     *                             Here, x1,y1 and x4,y4 are the two very end points of the infinite line and\n     *                             x2,y2 and x3,y3 are the pints with the handles.\n     * @param {String} lineType The type of the line.\n     */\n    DrawlinesQuestion.prototype.parseCoordinates = function(coordinates, lineType) {\n        var bits = coordinates.split(' ');\n        if (lineType === 'lineinfinite' && bits.length !== 2) {\n            // Remove the first and last coordinates.\n            bits = bits.slice(1, -1);\n        }\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return bits;\n    };\n\n    /**\n     * Draws the svg lines of any drop zones.\n     * @param {Object[]} questionLines\n     */\n    DrawlinesQuestion.prototype.drawSVGLines = function(questionLines) {\n        var bgImage = document.querySelector('img.dropbackground'),\n            height, startcoordinates, endcoordinates, draginitialcoords;\n\n        var drags = document.querySelector('.draghomes');\n        drags.innerHTML =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dragshome\" ' +\n                'id= \"que-dlines-svg-dragshome\" ' +\n                'width=\"' + bgImage.width + '\" ' +\n                'height=\"' + questionLines.length * 50 + '\"' +\n            '></svg>';\n\n        var draghomeSvg = document.getElementById('que-dlines-svg-dragshome');\n        var dropzoneSvg = document.getElementById('que-dlines-svg');\n        var initialHeight = 25;\n        for (let line = 0; line < questionLines.length; line++) {\n            height = initialHeight + line * 50;\n            startcoordinates = '50,' + height + ';10';\n            endcoordinates = '200,' + height + ';10';\n\n\n            // Check if the lines are to be set with initial coordinates.\n            // The visibleDropZones array holds the response in the format x1,y1 x2,y2;placed - if the line is in the svgdropzone\n            // else x1,y1 x2,y2;inactive - if the line is in the svg draghomes.\n            draginitialcoords = this.visibleDropZones['c' + line];\n            if (draginitialcoords !== undefined && draginitialcoords !== '') {\n                var coords = this.parseCoordinates(draginitialcoords, questionLines[line].type);\n                startcoordinates = coords[0] + ';10';\n                endcoordinates = coords[1] + ';10';\n                this.lines[line] = Lines.make([startcoordinates, endcoordinates],\n                    [questionLines[line].labelstart, questionLines[line].labelend], questionLines[line].type);\n                this.addToSvg(line, dropzoneSvg);\n            } else {\n                this.lines[line] = Lines.make([startcoordinates, endcoordinates],\n                    [questionLines[line].labelstart, questionLines[line].labelend], questionLines[line].type);\n                this.addToSvg(line, draghomeSvg);\n            }\n        }\n    };\n\n    /**\n     * Draws the svg lines of any drop zones that should be visible for feedback purposes.\n     */\n    DrawlinesQuestion.prototype.drawDropzone = function() {\n        var bgImage = document.querySelector('img.dropbackground');\n        var svg = document.querySelector('svg.dropzones');\n        document.getElementById('que-dlines-dropzone').style.position = 'relative';\n        document.getElementById('que-dlines-dropzone').style.top = (bgImage.height + 1) * -1 + \"px\";\n        document.getElementById('que-dlines-dropzone').style.height = bgImage.height + \"px\";\n        document.getElementById('que-dlines-droparea').style.height = bgImage.height + \"px\";\n        if (!svg) {\n            var dropZone = document.querySelector('#que-dlines-dropzone');\n            dropZone.innerHTML =\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n                    'id= \"que-dlines-svg\" ' +\n                    'class= \"dropzones\" ' +\n                    'width=\"' + bgImage.width + '\" ' +\n                    'height=\"' + bgImage.height + '\" ' +\n                '></svg>';\n        }\n        this.drawSVGLines(this.questionLines);\n    };\n\n    //\n    // /**\n    //  * Adds a dropzone line with colour, coords and link provided to the array of Lines.\n    //  *\n    //  * @param {jQuery} svg the SVG image to which to add this drop zone.\n    //  * @param {int} dropZoneNo which drop-zone to add.\n    //  * @param {string} colourClass class name\n    //  */\n    // DrawlinesQuestion.prototype.addDropzone = function(svg, dropZoneNo, colourClass) {\n    //     var dropZone = this.visibleDropZones[dropZoneNo],\n    //         line = Lines.make(dropZone.line, ''),\n    //         existingmarkertext,\n    //         bgRatio = this.bgRatio();\n    //     if (!line.parse(dropZone.coords, bgRatio)) {\n    //         return;\n    //     }\n    //\n    //     existingmarkertext = this.getRoot().find('div.markertexts span.markerlabelstart' + dropZoneNo);\n    //     if (existingmarkertext.length) {\n    //         if (dropZone.markertext !== '') {\n    //             existingmarkertext.html(dropZone.markertext);\n    //         } else {\n    //             existingmarkertext.remove();\n    //         }\n    //     } else if (dropZone.markertext !== '') {\n    //         var classnames = 'markertext markertext' + dropZoneNo;\n    //         this.getRoot().find('div.markertexts').append('<span class=\"' + classnames + '\">' +\n    //             dropZone.markertext + '</span>');\n    //         var markerspan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\n    //         if (markerspan.length) {\n    //             var handles = line.getHandlePositions();\n    //             var positionLeft = handles.moveHandles.x - (markerspan.outerWidth() / 2) - 4;\n    //             var positionTop = handles.moveHandles.y - (markerspan.outerHeight() / 2);\n    //             markerspan\n    //                 .css('left', positionLeft)\n    //                 .css('top', positionTop);\n    //             markerspan\n    //                 .data('originX', markerspan.position().left / bgRatio)\n    //                 .data('originY', markerspan.position().top / bgRatio);\n    //             this.handleElementScale(markerspan, 'center');\n    //         }\n    //     }\n    //\n    //     var lineSVG = line.makeSvg(svg[0]);\n    //     lineSVG.setAttribute('class', 'dropzone ' + colourClass);\n    //\n    //     this.lines[this.Lines.length] = line;\n    //     this.lineSVGs[this.lineSVGs.length] = lineSVG;\n    // };\n\n    /**\n     * Draws the drag items on the page (and drop zones if required).\n     * The idea is to re-draw all the drags and drops whenever there is a change\n     * like a widow resize or an item dropped in place.\n     */\n    DrawlinesQuestion.prototype.repositionDrags = function() {\n        var root = this.getRoot(),\n            thisQ = this;\n\n        root.find('div.draghomes .marker').not('.dragplaceholder').each(function(key, item) {\n            $(item).addClass('unneeded');\n        });\n\n        root.find('input.choices').each(function(key, input) {\n            var choiceNo = thisQ.getChoiceNoFromElement(input),\n                imageCoords = thisQ.getImageCoords(input);\n\n            if (imageCoords.length) {\n                var drag = thisQ.getRoot().find('.draghomes' + ' span.marker' + '.choice' + choiceNo).not('.dragplaceholder');\n                drag.remove();\n                for (var i = 0; i < imageCoords.length; i++) {\n                    var dragInDrop = drag.clone();\n                    // Convert image coords to screen coords.\n                    const screenCoords = thisQ.convertToWindowXY(imageCoords[i]);\n                    dragInDrop.data('pagex', screenCoords.x).data('pagey', screenCoords.y);\n                    // Save image coords to the drag item so we can use it later.\n                    dragInDrop.data('imageCoords', imageCoords[i]);\n                    // We always save the coordinates in the 1:1 ratio.\n                    // So we need to set the scale ratio to 1 for the initial load.\n                    dragInDrop.data('scaleRatio', 1);\n                    thisQ.sendDragToDrop(dragInDrop, false, true);\n                }\n                thisQ.getDragClone(drag).addClass('active');\n                thisQ.cloneDragIfNeeded(drag);\n            }\n        });\n\n        // Save the question answer.\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\n    };\n\n    /**\n     * Get the question answered values.\n     *\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\n     */\n    DrawlinesQuestion.prototype.getQuestionAnsweredValues = function() {\n        let result = {};\n        this.getRoot().find('input.choices').each((i, inputNode) => {\n            result[inputNode.id] = inputNode.value;\n        });\n\n        return result;\n    };\n\n    /**\n     * Check if the question is being interacted or not.\n     *\n     * @return {boolean} Return true if the user has changed the question-answer.\n     */\n    DrawlinesQuestion.prototype.isQuestionInteracted = function() {\n        const oldAnswer = this.questionAnswer;\n        const newAnswer = this.getQuestionAnsweredValues();\n        let isInteracted = false;\n\n        // First, check both answers have the same structure or not.\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\n            isInteracted = true;\n            return isInteracted;\n        }\n        // Check the values.\n        Object.keys(newAnswer).forEach(key => {\n            if (newAnswer[key] !== oldAnswer[key]) {\n                isInteracted = true;\n            }\n        });\n\n        return isInteracted;\n    };\n\n    /**\n     * Determine what drag items need to be shown and\n     * return coords of all drag items except any that are currently being dragged\n     * based on contents of hidden inputs and whether drags are 'infinite' or how many\n     * drags should be shown.\n     *\n     * @param {jQuery} inputNode\n     * @returns {Point[]} image coordinates of however many copies of the drag item should be shown.\n     */\n    DrawlinesQuestion.prototype.getImageCoords = function(inputNode) {\n        var imageCoords = [],\n            val = $(inputNode).val();\n        if (val !== '') {\n            var coordsStrings = val.split(' ');\n            for (var i = 0; i < coordsStrings.length; i++) {\n                imageCoords[i] = Lines.Point.parse(coordsStrings[i]);\n            }\n        }\n        return imageCoords;\n    };\n\n    /**\n     * Converts the relative x and y position coordinates into\n     * absolute x and y position coordinates.\n     *\n     * @param {Point} point relative to the background image.\n     * @returns {Point} point relative to the page.\n     */\n    DrawlinesQuestion.prototype.convertToWindowXY = function(point) {\n        var bgImage = this.bgImage();\n        // The +1 seems rather odd, but seems to give the best results in\n        // the three main browsers at a range of zoom levels.\n        // (Its due to the 1px border around the image, that shifts the\n        // image pixels by 1 down and to the left.)\n        return point.offset(bgImage.offset().left + 1, bgImage.offset().top + 1);\n    };\n\n    /**\n     * Utility function converting window coordinates to relative to the\n     * background image coordinates.\n     *\n     * @param {Point} point relative to the page.\n     * @returns {Point} point relative to the background image.\n     */\n    DrawlinesQuestion.prototype.convertToBgImgXY = function(point) {\n        var bgImage = this.bgImage();\n        return point.offset(-bgImage.offset().left - 1, -bgImage.offset().top - 1);\n    };\n\n    /**\n     * Is the point within the background image?\n     *\n     * @param {Point} point relative to the BG image.\n     * @return {boolean} true it they are.\n     */\n    DrawlinesQuestion.prototype.coordsInBgImg = function(point) {\n        var bgImage = this.bgImage();\n        var bgPosition = bgImage.offset();\n\n        return point.x >= bgPosition.left && point.x < bgPosition.left + bgImage.width()\n            && point.y >= bgPosition.top && point.y < bgPosition.top + bgImage.height();\n    };\n\n    /**\n     * Get the outer div for this question.\n     * @returns {jQuery} containing that div.\n     */\n    DrawlinesQuestion.prototype.getRoot = function() {\n        return $(document.getElementById(this.containerId));\n    };\n\n    /**\n     * Get the img that is the background image.\n     * @returns {jQuery} containing that img.\n     */\n    DrawlinesQuestion.prototype.bgImage = function() {\n        return this.getRoot().find('img.dropbackground');\n    };\n\n    DrawlinesQuestion.prototype.handleDragStart = function(e) {\n        var thisQ = this,\n            dragged = $(e.target).closest('.marker');\n\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        dragged.addClass('beingdragged').css('transform', '');\n\n        var placed = !dragged.hasClass('unneeded');\n        if (!placed) {\n            var hiddenDrag = thisQ.getDragClone(dragged);\n            if (hiddenDrag.length) {\n                hiddenDrag.addClass('active');\n                dragged.offset(hiddenDrag.offset());\n            }\n        }\n\n        dragDrop.start(e, dragged, function() {\n            void (1);\n        }, function(x, y, dragged) {\n            thisQ.dragEnd(dragged);\n        });\n    };\n\n    /**\n     * Functionality at the end of a drag drop.\n     * @param {jQuery} dragged the marker that was dragged.\n     */\n    DrawlinesQuestion.prototype.dragEnd = function(dragged) {\n        var placed = false,\n            choiceNo = this.getChoiceNoFromElement(dragged),\n            bgRatio = this.bgRatio(),\n            dragXY;\n\n        dragged.data('pagex', dragged.offset().left).data('pagey', dragged.offset().top);\n        dragXY = new Lines.Point(dragged.data('pagex'), dragged.data('pagey'));\n        if (this.coordsInBgImg(dragXY)) {\n            this.sendDragToDrop(dragged, true);\n            placed = true;\n            // Since we already move the drag item to new position.\n            // Remove the image coords if this drag item have it.\n            // We will get the new image coords for this drag item in saveCoordsForChoice.\n            if (dragged.data('imageCoords')) {\n                dragged.data('imageCoords', null);\n            }\n            // It seems that the dragdrop sometimes leaves the drag\n            // one pixel out of position. Put it in exactly the right place.\n            var bgImgXY = this.convertToBgImgXY(dragXY);\n            bgImgXY = new Lines.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\n            dragged.data('originX', bgImgXY.x).data('originY', bgImgXY.y);\n        }\n\n        if (!placed) {\n            this.sendDragHome(dragged);\n            this.removeDragIfNeeded(dragged);\n        } else {\n            this.cloneDragIfNeeded(dragged);\n        }\n\n        this.saveCoordsForChoice(choiceNo);\n    };\n\n\n    /**\n     * Returns the coordinates for the line from the text input in the form.\n     * @param {SVGElement} svgEl\n     * @returns {Array} the coordinates.\n     */\n    DrawlinesQuestion.prototype.getCoordinates = function(svgEl) {\n\n        var circleStartXCoords = svgEl.childNodes[1].getAttribute('cx');\n        var circleStartYCoords = svgEl.childNodes[1].getAttribute('cy');\n        var circleStartRCoords = svgEl.childNodes[1].getAttribute('r');\n        var circleEndXCoords = svgEl.childNodes[2].getAttribute('cx');\n        var circleEndYCoords = svgEl.childNodes[2].getAttribute('cy');\n        var circleEndRCoords = svgEl.childNodes[2].getAttribute('r');\n        return [circleStartXCoords + ',' + circleStartYCoords + ';' + circleStartRCoords,\n            circleEndXCoords + ',' + circleEndYCoords + ';' + circleEndRCoords];\n    };\n\n    /**\n     * Return the background ratio.\n     *\n     * @returns {number} Background ratio.\n     */\n    DrawlinesQuestion.prototype.bgRatio = function() {\n        var bgImg = this.bgImage();\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\n        var bgImgClientWidth = bgImg.width();\n\n        return bgImgClientWidth / bgImgNaturalWidth;\n    };\n\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {int} lineNumber Line Number\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    DrawlinesQuestion.prototype.addToSvg = function(lineNumber, svg) {\n        this.lineSVGs[lineNumber] = this.lines[lineNumber].makeSvg(svg);\n        if (!this.lineSVGs[lineNumber]) {\n            return;\n        }\n        this.lineSVGs[lineNumber].setAttribute('data-dropzone-no', lineNumber);\n        if (svg.getAttribute('class') === 'dropzones') {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' placed');\n        } else {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' inactive');\n        }\n    };\n\n    /**\n     * Update the shape of this drop zone (but not type) in an SVG image.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.updateSvgEl = function(dropzoneNo) {\n        this.lines[dropzoneNo].updateSvg(this.lineSVGs[dropzoneNo]);\n    };\n\n    /**\n     * Start responding to dragging the move handle attached to the line ends (circles).\n     * @param {Event} e Event object\n     * @param {String} whichHandle which circle handle was moved, i.e., startcircle or endcircle.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleCircleMove = function(e, whichHandle, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            svg = document.querySelector('svg.dropzones'),\n            maxX = svg.width.baseVal.value,\n            maxY = svg.height.baseVal.value;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            movingDropZone.lines[dropzoneNo].move(whichHandle,\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY), parseInt(maxX), parseInt(maxY));\n            lastX = pageX;\n            lastY = pageY;\n            movingDropZone.updateSvgEl(dropzoneNo);\n            movingDropZone.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n\n    /**\n     * Start responding to dragging the move handle attached to the line.\n     * @param {Event} e Event object\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleLineMove = function(e, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDrag = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            maxX,\n            maxY,\n            whichSVG = \"\",\n            bgImage = document.querySelector('img.dropbackground'),\n            isMoveFromDragsToDropzones,\n            isMoveFromDropzonesToDrags,\n            svgClass = '';\n\n        var selectedElement = this.lineSVGs[dropzoneNo];\n        const dropX = e.clientX;\n        const dropY = e.clientY;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n\n            // Check if the drags need to be moved from one svg to another.\n            var closeTo = selectedElement.closest('svg');\n            svgClass = closeTo.getAttribute('class');\n\n            // Moving the drags between the SVG's.\n            // If true, the drag is moved from draghomes SVG to dropZone SVG.\n            isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n\n            // If true, the drag is moved from dropZone SVG to draghomes SVG.\n            isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n                (movingDrag.lines[dropzoneNo].centre1.y > (bgImage.height - 20));\n            if (isMoveFromDragsToDropzones || isMoveFromDropzonesToDrags) {\n                movingDrag.lines[dropzoneNo].addToDropZone('mouse', selectedElement,\n                    dropX, dropY);\n            }\n\n            // Drag the lines within the SVG\n            // Get the dimensions of the selected element's svg.\n            closeTo = selectedElement.closest('svg');\n            var dimensions = movingDrag.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n            maxX = dimensions.maxX;\n            maxY = dimensions.maxY;\n            whichSVG = dimensions.whichSVG;\n\n            movingDrag.lines[dropzoneNo].moveDrags(\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY),\n                parseInt(maxX), parseInt(maxY), whichSVG);\n            lastX = pageX;\n            lastY = pageY;\n\n            movingDrag.updateSvgEl(dropzoneNo);\n            movingDrag.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    DrawlinesQuestion.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Save the coordinates for a dropped item in the form field.\n     * @param {Number} choiceNo which copy of the choice this was.\n     **/\n    DrawlinesQuestion.prototype.saveCoordsForChoice = function(choiceNo) {\n        let imageCoords = [];\n        var items = this.getRoot().find('svg g.choice' + choiceNo),\n            gEleClassAttributes = '';\n            // thiQ = this,\n            // bgRatio = this.bgRatio();\n        if (items.length) {\n            items.each(function() {\n                var drag = $(this);\n                imageCoords = drag.children('polyline').attr('points');\n                gEleClassAttributes = drag.attr('class');\n                //     if (drag.data('scaleRatio') !== bgRatio) {\n                //         // The scale ratio for the draggable item was changed. We need to update that.\n                //         drag.data('pagex', drag.offset().left).data('pagey', drag.offset().top);\n                //     }\n                //     var dragXY = new Lines.Point(drag.data('pagex'), drag.data('pagey'));\n                //     window.console.log(\"dragXY:\" + dragXY);\n                //\n                //     window.console.log(\"thiQ:\" + thiQ);\n                //     if (thiQ.coordsInBgImg(dragXY)) {\n                //         var bgImgXY = thiQ.convertToBgImgXY(dragXY);\n                //         bgImgXY = new Lines.Point(bgImgXY.x / bgRatio, bgImgXY.y / bgRatio);\n                //         imageCoords[imageCoords.length] = bgImgXY;\n                //         window.console.log(\"bgImgXY:\" + bgImgXY);\n                //     }\n                // } else if (drag.data('imageCoords')) {\n                //     imageCoords[imageCoords.length] = drag.data('imageCoords');\n                // }\n\n            });\n        }\n        // this.getRoot().find('input.choice' + choiceNo).val(imageCoords);\n        if (gEleClassAttributes !== '' && gEleClassAttributes.includes('placed')) {\n            this.getRoot().find('input.choice' + choiceNo).val(imageCoords);\n        } else if (gEleClassAttributes !== '' && gEleClassAttributes.includes('inactive')) {\n            this.getRoot().find('input.choice' + choiceNo).val('');\n        }\n        if (this.isQuestionInteracted()) {\n            // The user has interacted with the draggable items. We need to mark the form as dirty.\n            questionManager.handleFormDirty();\n            // Save the new answered value.\n            this.questionAnswer = this.getQuestionAnsweredValues();\n        }\n    };\n\n    /**\n     * Handle key down / press events on markers.\n     * @param {KeyboardEvent} e\n     * @param {SVGElement} drag SVG element being dragged.\n     * @param {int} dropzoneNo\n     * @param {String} activeElement The string indicating the element being dragged.\n     */\n    DrawlinesQuestion.prototype.handleKeyPress = function(e, drag, dropzoneNo, activeElement) {\n\n        var x = 0,\n            y = 0,\n            dropzoneElement,\n            question = questionManager.getQuestionForEvent(e);\n\n        dropzoneElement = event.target.closest('g');\n\n        switch (e.code) {\n            case 'ArrowLeft':\n            case 'KeyA': // A.\n                x = -1;\n                break;\n            case 'ArrowRight':\n            case 'KeyD': // D.\n                x = 1;\n                break;\n            case 'ArrowDown':\n            case 'KeyS': // S.\n                y = 1;\n                break;\n            case 'ArrowUp':\n            case 'KeyW': // W.\n                y = -1;\n                break;\n            case 'Space':\n            case 'Escape':\n                break;\n            default:\n                return; // Ingore other keys.\n        }\n        e.preventDefault();\n\n        // Moving the drags between the SVG's.\n        var closeTo = drag.closest('svg');\n        var svgClass = closeTo.getAttribute('class');\n        var maxX,\n            maxY,\n            whichSVG;\n        var bgImage = document.querySelector('img.dropbackground');\n        var isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n        var isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n            (question.lines[dropzoneNo].centre1.y > (bgImage.height - 20));\n\n        if (isMoveFromDragsToDropzones) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                null, null, 'DragsSVG');\n        } else if (isMoveFromDropzonesToDrags) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                null, null, 'DropZonesSVG');\n        }\n\n        // Get the dimensions of the selected element's svg.\n        closeTo = drag.closest('svg');\n        var dimensions = question.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n        maxX = dimensions.maxX;\n        maxY = dimensions.maxY;\n        whichSVG = dimensions.whichSVG;\n\n        if (activeElement === 'line') {\n            // Move the entire line when the focus is on it.\n            question.lines[dropzoneNo].moveDrags(x, y, parseInt(maxX), parseInt(maxY), whichSVG);\n        } else {\n            // Move the line endpoints.\n            question.lines[dropzoneNo].move(activeElement, x, y, parseInt(maxX), parseInt(maxY));\n        }\n        question.updateSvgEl(dropzoneNo);\n        this.saveCoordsForChoice(dropzoneNo);\n        drag.focus();\n    };\n\n    /**\n     * Handle key down / press events on markers.\n     * @param {SVGElement} dragElement SVG element being dragged.\n     * @param {String}  className\n     * @returns {Object|null} An object containing maxX, maxY, and whichSVG if an SVG is found; otherwise, null.\n     // * @param {SVGElement} svgelement The SVG to which the dragElement belongs.\n     */\n    DrawlinesQuestion.prototype.getSvgDimensionsByClass = function(dragElement, className) {\n        const closeTo = dragElement.closest('svg');\n        if (closeTo && closeTo.classList.contains(className)) {\n            return {\n                maxX: closeTo.width.baseVal.value,\n                maxY: closeTo.height.baseVal.value,\n                whichSVG: className === 'dragshome' ? 'DragsSVG' : 'DropZonesSVG'\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Makes sure the dragged item always exists within the background image area.\n     *\n     * @param {Point} windowxy\n     * @returns {Point} coordinates\n     */\n    DrawlinesQuestion.prototype.constrainToBgImg = function(windowxy) {\n        var bgImg = this.bgImage(),\n            bgImgXY = this.convertToBgImgXY(windowxy);\n        bgImgXY.x = Math.max(0, bgImgXY.x);\n        bgImgXY.y = Math.max(0, bgImgXY.y);\n        bgImgXY.x = Math.min(bgImg.width(), bgImgXY.x);\n        bgImgXY.y = Math.min(bgImg.height(), bgImgXY.y);\n        return this.convertToWindowXY(bgImgXY);\n    };\n\n    /**\n     * Returns the choice number for a node.\n     *\n     * @param {Element|jQuery} node\n     * @returns {Number}\n     */\n    DrawlinesQuestion.prototype.getChoiceNoFromElement = function(node) {\n        return Number(this.getClassnameNumericSuffix(node, 'choice'));\n    };\n\n    /**\n     * Returns the numeric part of a class with the given prefix.\n     *\n     * @param {Element|jQuery} node\n     * @param {String} prefix\n     * @returns {Number|null}\n     */\n    DrawlinesQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\n        var classes = $(node).attr('class');\n        if (classes !== undefined && classes !== '') {\n            var classesarr = classes.split(' ');\n            for (var index = 0; index < classesarr.length; index++) {\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\n                if (patt1.test(classesarr[index])) {\n                    var patt2 = new RegExp('([0-9])+$');\n                    var match = patt2.exec(classesarr[index]);\n                    return Number(match[0]);\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Handle when the window is resized.\n     */\n    DrawlinesQuestion.prototype.handleResize = function() {\n        var thisQ = this,\n            bgRatio = this.bgRatio();\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n\n        this.getRoot().find('div.droparea .marker').not('.beingdragged').each(function(key, drag) {\n            $(drag)\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\n            thisQ.handleElementScale(drag, 'left top');\n        });\n\n        this.getRoot().find('div.droparea svg.dropzones')\n            .width(this.bgImage().width())\n            .height(this.bgImage().height());\n\n        for (var dropZoneNo = 0; dropZoneNo < this.visibleDropZones.length; dropZoneNo++) {\n            var dropZone = thisQ.visibleDropZones[dropZoneNo];\n            var originCoords = dropZone.coords;\n            var line = thisQ.lines[dropZoneNo];\n            var lineSVG = thisQ.lineSVGs[dropZoneNo];\n            line.parse(originCoords, bgRatio);\n            line.updateSvg(lineSVG);\n\n            var handles = line.getHandlePositions();\n            var markerSpan = this.getRoot().find('div.ddarea div.markertexts span.markertext' + dropZoneNo);\n            markerSpan\n                .css('left', handles.moveHandles.x - (markerSpan.outerWidth() / 2) - 4)\n                .css('top', handles.moveHandles.y - (markerSpan.outerHeight() / 2));\n            thisQ.handleElementScale(markerSpan, 'center');\n        }\n    };\n\n    /**\n     * Clone the drag.\n     */\n    DrawlinesQuestion.prototype.cloneDrags = function() {\n        var thisQ = this;\n        this.getRoot().find('div.draghomes span.marker').each(function(index, draghome) {\n            var drag = $(draghome);\n            var placeHolder = drag.clone();\n            placeHolder.removeClass();\n            placeHolder.addClass('marker');\n            placeHolder.addClass('choice' + thisQ.getChoiceNoFromElement(drag));\n            placeHolder.addClass(thisQ.getDragNoClass(drag, false));\n            placeHolder.addClass('dragplaceholder');\n            drag.before(placeHolder);\n        });\n    };\n\n    /**\n     * Get the drag number of a drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {Number} the drag number.\n     */\n    DrawlinesQuestion.prototype.getDragNo = function(drag) {\n        return this.getClassnameNumericSuffix(drag, 'dragno');\n    };\n\n    /**\n     * Get the drag number prefix of a drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @param {Boolean} includeSelector include the CSS selector prefix or not.\n     * @return {String} Class name\n     */\n    DrawlinesQuestion.prototype.getDragNoClass = function(drag, includeSelector) {\n        var className = 'dragno' + this.getDragNo(drag);\n        if (this.isInfiniteDrag(drag)) {\n            className = 'infinite';\n        }\n\n        if (includeSelector) {\n            return '.' + className;\n        }\n\n        return className;\n    };\n\n    /**\n     * Get drag clone for a given drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {jQuery} the drag's clone.\n     */\n    DrawlinesQuestion.prototype.getDragClone = function(drag) {\n        return this.getRoot().find('.draghomes' + ' span.marker' +\n            '.choice' + this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true) + '.dragplaceholder');\n    };\n\n    /**\n     * Get the drop area element.\n     * @returns {jQuery} droparea element.\n     */\n    DrawlinesQuestion.prototype.dropArea = function() {\n        return this.getRoot().find('div.droparea');\n    };\n\n    /**\n     * Animate a drag back to its home.\n     *\n     * @param {jQuery} drag the item being moved.\n     */\n    DrawlinesQuestion.prototype.sendDragHome = function(drag) {\n        drag.removeClass('beingdragged')\n            .addClass('unneeded')\n            .css('top', '')\n            .css('left', '')\n            .css('transform', '');\n        var placeHolder = this.getDragClone(drag);\n        placeHolder.after(drag);\n        placeHolder.removeClass('active');\n    };\n\n    /**\n     * Animate a drag item into a given place.\n     *\n     * @param {jQuery} drag the item to place.\n     * @param {boolean} isScaling Scaling or not.\n     * @param {boolean} initialLoad Whether it is the initial load or not.\n     */\n    DrawlinesQuestion.prototype.sendDragToDrop = function(drag, isScaling, initialLoad = false) {\n        var dropArea = this.dropArea(),\n            bgRatio = this.bgRatio();\n        drag.removeClass('beingdragged').removeClass('unneeded');\n        var dragXY = this.convertToBgImgXY(new Lines.Point(drag.data('pagex'), drag.data('pagey')));\n        if (isScaling) {\n            drag.data('originX', dragXY.x / bgRatio).data('originY', dragXY.y / bgRatio);\n            drag.css('left', dragXY.x).css('top', dragXY.y);\n        } else {\n            drag.data('originX', dragXY.x).data('originY', dragXY.y);\n            drag.css('left', dragXY.x * bgRatio).css('top', dragXY.y * bgRatio);\n        }\n        // We need to save the original scale ratio for each draggable item.\n        if (!initialLoad) {\n            // Only set the scale ratio for a current being-dragged item, not for the initial loading.\n            drag.data('scaleRatio', bgRatio);\n        }\n        dropArea.append(drag);\n        this.handleElementScale(drag, 'left top');\n    };\n\n    /**\n     * Clone the drag at the draghome area if needed.\n     *\n     * @param {jQuery} drag the item to place.\n     */\n    DrawlinesQuestion.prototype.cloneDragIfNeeded = function(drag) {\n        var inputNode = this.getInput(drag),\n            noOfDrags = Number(this.getClassnameNumericSuffix(inputNode, 'noofdrags')),\n            displayedDragsInDropArea = this.getRoot().find('div.droparea .marker.choice' +\n                this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).length,\n            displayedDragsInDragHomes = this.getRoot().find('div.draghomes .marker.choice' +\n                this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).not('.dragplaceholder').length;\n\n        if ((this.isInfiniteDrag(drag) ||\n            !this.isInfiniteDrag(drag) && displayedDragsInDropArea < noOfDrags) && displayedDragsInDragHomes === 0) {\n            var dragClone = drag.clone();\n            dragClone.addClass('unneeded')\n                .css('top', '')\n                .css('left', '')\n                .css('transform', '');\n            this.getDragClone(drag)\n                .removeClass('active')\n                .after(dragClone);\n            questionManager.addEventHandlersToMarker(dragClone);\n        }\n    };\n\n    /**\n     * Remove the clone drag at the draghome area if needed.\n     *\n     * @param {jQuery} drag the item to place.\n     */\n    DrawlinesQuestion.prototype.removeDragIfNeeded = function(drag) {\n        var dragsInHome = this.getRoot().find('div.draghomes .marker.choice' +\n            this.getChoiceNoFromElement(drag) + this.getDragNoClass(drag, true)).not('.dragplaceholder');\n        var displayedDrags = dragsInHome.length;\n        while (displayedDrags > 1) {\n            dragsInHome.first().remove();\n            displayedDrags--;\n        }\n    };\n\n    /**\n     * Get the input belong to drag.\n     *\n     * @param {jQuery} drag the item to place.\n     * @returns {jQuery} input element.\n     */\n    DrawlinesQuestion.prototype.getInput = function(drag) {\n        var choiceNo = this.getChoiceNoFromElement(drag);\n        return this.getRoot().find('input.choices.choice' + choiceNo);\n    };\n\n    /**\n     * Scale the drag if needed.\n     *\n     * @param {jQuery} element the item to place.\n     * @param {String} type scaling type\n     */\n    DrawlinesQuestion.prototype.handleElementScale = function(element, type) {\n        var bgRatio = parseFloat(this.bgRatio());\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n        $(element).css({\n            '-webkit-transform': 'scale(' + bgRatio + ')',\n            '-moz-transform': 'scale(' + bgRatio + ')',\n            '-ms-transform': 'scale(' + bgRatio + ')',\n            '-o-transform': 'scale(' + bgRatio + ')',\n            'transform': 'scale(' + bgRatio + ')',\n            'transform-origin': type\n        });\n    };\n\n    /**\n     * Check if the given drag is in infinite mode or not.\n     *\n     * @param {jQuery} drag The drag item need to check.\n     */\n    DrawlinesQuestion.prototype.isInfiniteDrag = function(drag) {\n        return drag.hasClass('infinite');\n    };\n\n    /**\n     * Waits until all images are loaded before calling setupQuestion().\n     *\n     * This function is called from the onLoad of each image, and also polls with\n     * a time-out, because image on-loads are allegedly unreliable.\n     */\n    DrawlinesQuestion.prototype.waitForAllImagesToBeLoaded = function() {\n\n        // This method may get called multiple times (via image on-loads or timeouts.\n        // If we are already done, don't do it again.\n        if (this.allImagesLoaded) {\n            return;\n        }\n\n        // Clear any current timeout, if set.\n        if (this.imageLoadingTimeoutId !== null) {\n            clearTimeout(this.imageLoadingTimeoutId);\n        }\n\n        // If we have not yet loaded all images, set a timeout to\n        // call ourselves again, since apparently images on-load\n        // events are flakey.\n        if (this.getNotYetLoadedImages().length > 0) {\n            this.imageLoadingTimeoutId = setTimeout(function() {\n                this.waitForAllImagesToBeLoaded();\n            }, 100);\n            return;\n        }\n\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\n        this.allImagesLoaded = true;\n        this.cloneDrags();\n        //this.repositionDrags();\n        this.drawDropzone();\n    };\n\n    /**\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\n     *\n     * @returns {jQuery} those images.\n     */\n    DrawlinesQuestion.prototype.getNotYetLoadedImages = function() {\n        return this.getRoot().find('.drawlines img.dropbackground').not(function(i, imgNode) {\n            return this.imageIsLoaded(imgNode);\n        });\n    };\n\n    /**\n     * Check if an image has loaded without errors.\n     *\n     * @param {HTMLImageElement} imgElement an image.\n     * @returns {boolean} true if this image has loaded without errors.\n     */\n    DrawlinesQuestion.prototype.imageIsLoaded = function(imgElement) {\n        return imgElement.complete && imgElement.naturalHeight !== 0;\n    };\n\n    /**\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\n     * with event dispatching.\n     *\n     * @type {Object}\n     */\n    var questionManager = {\n\n        /**\n         * {boolean} ensures that the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {Object} ensures that the marker event handlers are only initialised once per question,\n         * indexed by containerId (id on the .que div).\n         */\n        markerEventHandlersInitialised: {},\n\n        /**\n         * {boolean} is printing or not.\n         */\n        isPrinting: false,\n\n        /**\n         * {boolean} is keyboard navigation.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {}, // An object containing all the information about each question on the page.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {DrawlinesQuestion[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * @var {line[]} the question lines in the preview, indexed by line number.\n         */\n        questionLines: [],\n\n        /**\n         * Initialise one question.\n         *\n         * @param {String} containerId the id of the div.que that contains this question.\n         * @param {boolean} readOnly whether the question is read-only.\n         * @param {Object[]} visibleDropZones data on any drop zones to draw as part of the feedback.\n         * @param {Object[]} questionLines\n         */\n        init: function(containerId, readOnly, visibleDropZones, questionLines) {\n            questionManager.questions[containerId] =\n                new DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines);\n\n            questionManager.questions[containerId].updateCoordinates();\n\n            if (!questionManager.markerEventHandlersInitialised.hasOwnProperty(containerId)) {\n                questionManager.markerEventHandlersInitialised[containerId] = true;\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\n                var questionContainer = document.getElementById(containerId);\n                if (questionContainer.classList.contains('drawlines') &&\n                    !questionContainer.classList.contains('qtype_drawlines-readonly')) {\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\n                    // questionManager.addEventHandlersToMarker($(questionContainer).find('div.draghomes .marker'));\n                    // questionManager.addEventHandlersToMarker($(questionContainer).find('div.droparea .marker'));\n                    // Add event listeners to the 'previewArea'.\n\n                    // For dropzone SVG.\n                    var dropArea = document.querySelector('.droparea');\n                    // Add event listener for mousedown and touchstart events\n                    dropArea.addEventListener('mousedown', questionManager.handleDropZoneEventMove);\n                    dropArea.addEventListener('touchstart', questionManager.handleDropZoneEventMove);\n                    // Add event listener for keydown and keypress events\n                    dropArea.addEventListener('keydown', questionManager.handleKeyPress);\n                    dropArea.addEventListener('keypress', questionManager.handleKeyPress);\n\n                    // For draghomes SVG.\n                    var drags = document.querySelector('.draghomes');\n                    // Add event listener for mousedown and touchstart events\n                    drags.addEventListener('mousedown', questionManager.handleDragHomeEventMove);\n                    drags.addEventListener('touchstart', questionManager.handleDragHomeEventMove);\n                    // Add event listener for keydown and keypress events\n                    drags.addEventListener('keydown', questionManager.handleKeyPress);\n                    drags.addEventListener('keypress', questionManager.handleKeyPress);\n                }\n            }\n        },\n\n        // TODO: commented as currently we are not using this function. To be removed later if not needed.\n        // /**\n        //  * Set up the event handlers that make this question type work. (Done once per page.)\n        //  */\n        // setupEventHandlers: function() {\n        //     $(window).on('resize', function() {\n        //         questionManager.handleWindowResize(false);\n        //     });\n        //     window.addEventListener('beforeprint', function() {\n        //         questionManager.isPrinting = true;\n        //         questionManager.handleWindowResize(questionManager.isPrinting);\n        //     });\n        //     window.addEventListener('afterprint', function() {\n        //         questionManager.isPrinting = false;\n        //         questionManager.handleWindowResize(questionManager.isPrinting);\n        //     });\n        //     setTimeout(function() {\n        //         questionManager.fixLayoutIfThingsMoved();\n        //     }, 100);\n        // },\n\n        handleDropZoneEventMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone .startcircle.shape')) {\n                // Dragging the move handle circle attached to the start of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'startcircle', dropzoneNo);\n            } else if (event.target.closest('.dropzone .endcircle.shape')) {\n                // Dragging the move handle circle attached to the end of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'endcircle', dropzoneNo);\n            } else if (event.target.closest('polyline.shape')) {\n                // Dragging the entire line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n            }\n        },\n\n        handleDragHomeEventMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone polyline.shape')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n                question.saveCoordsForChoice(dropzoneNo);\n            }\n        },\n\n        /**\n         * Get the SVG element, if there is one, otherwise return null.\n         *\n         * @returns {SVGElement|null} the SVG element or null.\n         */\n        getSvg: function() {\n            var svg = document.querySelector('.droparea svg');\n            if (svg === null) {\n                return null;\n            } else {\n                return svg;\n            }\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @return {String} the value of that field.\n         */\n        getFormValue: function(name, indexes) {\n            var el = this.getEl(name, indexes);\n            return el.value;\n        },\n\n        /**\n         * Binding the event again for newly created element.\n         *\n         * @param {jQuery} element Element to bind the event\n         */\n        addEventHandlersToMarker: function(element) {\n            element\n                .on('mousedown touchstart', questionManager.handleDragStart)\n                .on('keydown keypress', questionManager.handleKeyPress)\n                .focusin(function(e) {\n                    questionManager.handleKeyboardFocus(e, true);\n                })\n                .focusout(function(e) {\n                    questionManager.handleKeyboardFocus(e, false);\n                });\n        },\n\n        /**\n         * Handle mouse down / touch start events on markers.\n         * @param {Event} e the DOM event.\n         */\n        handleDragStart: function(e) {\n            e.preventDefault();\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleDragStart(e);\n            }\n        },\n\n        /**\n         * Handle key down / press events on markers.\n         * @param {Event} e\n         */\n        handleKeyPress: function(e) {\n            var question = questionManager.getQuestionForEvent(e);\n            var dropzoneElement, dropzoneNo, drag, activeElement;\n            if (e.target.closest('.dropzone circle.startcircle')) {\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                drag = e.target.closest('.dropzone circle.startcircle');\n                activeElement = 'startcircle';\n            } else if (e.target.closest('.dropzone circle.endcircle')) {\n                drag = e.target.closest('.dropzone circle.endcircle');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'endcircle';\n            } else if (e.target.closest('.dropzone polyline.shape')) {\n                drag = e.target.closest('.dropzone polyline.shape');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'line';\n            }\n            if (question && dropzoneElement) {\n                question.handleKeyPress(e, drag, dropzoneNo, activeElement);\n            }\n        },\n\n        /**\n         * Handle when the window is resized.\n         * @param {boolean} isPrinting\n         */\n        handleWindowResize: function(isPrinting) {\n            for (var containerId in questionManager.questions) {\n                if (questionManager.questions.hasOwnProperty(containerId)) {\n                    questionManager.questions[containerId].isPrinting = isPrinting;\n                    questionManager.questions[containerId].handleResize();\n                }\n            }\n        },\n\n        /**\n         * Handle focus lost events on markers.\n         * @param {Event} e\n         * @param {boolean} isNavigating\n         */\n        handleKeyboardFocus: function(e, isNavigating) {\n            questionManager.isKeyboardNavigation = isNavigating;\n        },\n\n        /**\n         * Sometimes, despite our best efforts, things change in a way that cannot\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\n         * Therefore, we need to periodically check everything is in the right position.\n         */\n        fixLayoutIfThingsMoved: function() {\n            if (!questionManager.isKeyboardNavigation) {\n                this.handleWindowResize(questionManager.isPrinting);\n            }\n            // We use setTimeout after finishing work, rather than setInterval,\n            // in case positioning things is slow. We want 100 ms gap\n            // between executions, not what setInterval does.\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\n            }, 100);\n        },\n\n        /**\n         * Given an event, work out which question it effects.\n         * @param {Event} e the event.\n         * @returns {DrawlinesQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.drawlines').attr('id');\n            return questionManager.questions[containerId];\n        },\n\n        /**\n         * Handle when the form is dirty.\n         */\n        handleFormDirty: function() {\n            const responseForm = document.getElementById('responseform');\n            FormChangeChecker.markFormAsDirty(responseForm);\n        }\n    };\n\n    /**\n     * @alias module:qtype_drawlines/question\n     */\n    return {\n        /**\n         * Initialise one drag-drop markers question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         * @param {String[]} visibleDropZones the geometry of any drop-zones to show.\n         * @param {Object[]} questionLines\n         */\n        init: questionManager.init,\n    };\n});"],"names":["define","$","dragDrop","Lines","keys","FormChangeChecker","DrawlinesQuestion","containerId","readOnly","visibleDropZones","questionLines","thisQ","this","lineSVGs","lines","isPrinting","questionAnswer","svgEl","getRoot","addClass","allImagesLoaded","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","prototype","updateCoordinates","line","length","coordinates","getCoordinates","parse","updateSvgEl","parseCoordinates","lineType","bits","split","slice","Error","drawSVGLines","height","startcoordinates","endcoordinates","draginitialcoords","bgImage","document","querySelector","innerHTML","width","draghomeSvg","getElementById","dropzoneSvg","undefined","coords","type","make","labelstart","labelend","addToSvg","drawDropzone","svg","style","position","top","repositionDrags","root","find","not","each","key","item","input","choiceNo","getChoiceNoFromElement","imageCoords","getImageCoords","drag","remove","i","dragInDrop","clone","screenCoords","convertToWindowXY","data","x","y","sendDragToDrop","getDragClone","cloneDragIfNeeded","getQuestionAnsweredValues","result","inputNode","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","forEach","val","coordsStrings","Point","point","offset","left","convertToBgImgXY","coordsInBgImg","bgPosition","handleDragStart","e","dragged","target","closest","prepare","start","css","hasClass","hiddenDrag","dragEnd","dragXY","placed","bgRatio","bgImgXY","sendDragHome","removeDragIfNeeded","saveCoordsForChoice","childNodes","getAttribute","bgImg","bgImgNaturalWidth","get","naturalWidth","lineNumber","makeSvg","setAttribute","dropzoneNo","updateSvg","handleCircleMove","whichHandle","info","movingDropZone","lastX","lastY","dragProxy","makeDragProxy","maxX","baseVal","maxY","pageX","pageY","move","parseInt","body","removeChild","handleLineMove","isMoveFromDragsToDropzones","isMoveFromDropzonesToDrags","movingDrag","whichSVG","svgClass","selectedElement","dropX","clientX","dropY","clientY","closeTo","centre1","addToDropZone","dimensions","getSvgDimensionsByClass","moveDrags","createElement","appendChild","items","gEleClassAttributes","children","attr","includes","questionManager","handleFormDirty","handleKeyPress","activeElement","dropzoneElement","question","getQuestionForEvent","event","code","preventDefault","focus","dragElement","className","classList","contains","constrainToBgImg","windowxy","Math","max","min","node","Number","getClassnameNumericSuffix","prefix","classes","classesarr","index","RegExp","test","match","exec","handleResize","parseFloat","handleElementScale","dropZoneNo","originCoords","lineSVG","handles","getHandlePositions","markerSpan","moveHandles","outerWidth","outerHeight","cloneDrags","draghome","placeHolder","removeClass","getDragNoClass","before","getDragNo","includeSelector","isInfiniteDrag","dropArea","after","isScaling","initialLoad","append","getInput","noOfDrags","displayedDragsInDropArea","displayedDragsInDragHomes","dragClone","addEventHandlersToMarker","dragsInHome","displayedDrags","first","element","imageLoadingTimeoutId","clearTimeout","setTimeout","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","eventHandlersInitialised","markerEventHandlersInitialised","isKeyboardNavigation","questions","noOfLines","dropZones","init","hasOwnProperty","questionContainer","addEventListener","handleDropZoneEventMove","drags","handleDragHomeEventMove","dataset","getSvg","getFormValue","name","indexes","getEl","on","focusin","handleKeyboardFocus","focusout","handleWindowResize","isNavigating","fixLayoutIfThingsMoved","currentTarget","responseForm","markFormAsDirty"],"mappings":"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"}