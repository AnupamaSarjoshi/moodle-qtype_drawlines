{"version":3,"file":"line.min.js","sources":["../src/line.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint max-depth: [\"error\", 8] */\n\n/**\n * Library of classes for handling lines and points.\n *\n * These classes can represent Points and line, let you alter them\n * and can give you an SVG representation.\n *\n * @module     qtype_drawlines/line\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(function() {\n\n    \"use strict\";\n\n    /**\n     * A point, with x and y coordinates.\n     *\n     * @param {int} x centre X.\n     * @param {int} y centre Y.\n     * @constructor\n     */\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Standard toString method.\n     *\n     * @returns {string} \"x;y\";\n     */\n    Point.prototype.toString = function() {\n        return this.x + ',' + this.y;\n    };\n\n    /**\n     * Move a point\n     *\n     * @param {int} dx x offset\n     * @param {int} dy y offset\n     */\n    Point.prototype.move = function(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n    };\n\n    /**\n     * Return a new point that is a certain position relative to this one.\n     *\n     * @param {(int|Point)} offsetX if a point, offset by these points coordinates, else and int x offset.\n     * @param {int} [offsetY] used if offsetX is an int, the corresponding y offset.\n     * @return {Point} the new point.\n     */\n    Point.prototype.offset = function(offsetX, offsetY) {\n        if (offsetX instanceof Point) {\n            offsetY = offsetX.y;\n            offsetX = offsetX.x;\n        }\n        return new Point(this.x + offsetX, this.y + offsetY);\n    };\n\n    /**\n     * Make a point from the string representation.\n     *\n     * @param {String} coordinates \"x,y\".\n     * @return {Point} the point. Throws an exception if input is not valid.\n     */\n    Point.parse = function(coordinates) {\n        var bits = coordinates.split(',');\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return new Point(Math.round(bits[0]), Math.round(bits[1]));\n    };\n\n    /**\n     * Line constructor. Class to represent the different types of drop zone shapes.\n     *\n     * @param {String} [labelstart] start label of a line.\n     * @param {int} [x1] centre X1.\n     * @param {int} [y1] centre Y1.\n     * @param {int} [startRadius] startRadius.\n     * @param {String} [labelend] end label of a line.\n     * @param {int} [x2] centre X2.\n     * @param {int} [y2] centre Y2.\n     * @param {int} [endRadius] endRadius.\n     * @param {String} [lineType] Line type.\n     * @constructor\n     */\n    function Line(labelstart, x1, y1, startRadius, labelend, x2, y2, endRadius, lineType) {\n        this.labelstart = labelstart;\n        this.labelend = labelend;\n        this.x1 = x1;\n        this.y1 = y1;\n\n        this.x2 = x2;\n        this.y2 = y2;\n\n        this.centre1 = new Point(x1, y1);\n        this.centre2 = new Point(x2, y2);\n\n        this.startRadius = startRadius;\n        this.endRadius = endRadius;\n\n        this.lineType = lineType;\n    }\n    Line.prototype = new Line();\n\n    /**\n     * Get the type of shape.\n     *\n     * @return {String} 'linesinglearrow', 'linedoublearrows', 'lineinfinite'.\n     */\n    Line.prototype.getType = function() {\n        return this.lineType;\n    };\n\n    /**\n     * Get the string representation of this shape.\n     *\n     * @return {String} coordinates as they need to be typed into the form.\n     */\n    Line.prototype.getCoordinates = function() {\n        return [\n            this.centre1.x + ',' + this.centre1.y + ';' + this.startRadius,\n            this.centre2.x + ',' + this.centre2.y + ';' + this.endRadius\n        ];\n    };\n\n    /**\n     * Create the svg group with line.\n     *\n     * @param {SVGElement} svg the SVG graphic to add this shape to.\n     * @return {SVGElement} SVG representation of this shape.\n     */\n    Line.prototype.makeSvg = function(svg) {\n        addLineArrow(svg);\n        var svgEl = createSvgShapeGroup(svg, 'polyline');\n        this.updateSvg(svgEl);\n        return svgEl;\n    };\n\n    /**\n     * Update the SVG representation of this shape.\n     *\n     * @param {SVGElement} svgEl the SVG representation of this shape.\n     */\n    Line.prototype.updateSvg = function(svgEl) {\n        // Set line attributes.\n        this.drawLine(svgEl);\n\n        // Set start and end circle attributes.\n        svgEl.childNodes[1].setAttribute('cx', this.centre1.x);\n        svgEl.childNodes[1].setAttribute('cy', this.centre1.y);\n        svgEl.childNodes[1].setAttribute('r', Math.abs(this.startRadius));\n\n        svgEl.childNodes[2].setAttribute('cx', this.centre2.x);\n        svgEl.childNodes[2].setAttribute('cy', this.centre2.y);\n        svgEl.childNodes[2].setAttribute('r', Math.abs(this.endRadius));\n\n        // Set start and end label attributes.\n        svgEl.childNodes[3].textContent = this.labelstart;\n        svgEl.childNodes[3].setAttribute('x', this.centre1.x);\n        svgEl.childNodes[3].setAttribute('y', parseInt(this.centre1.y) + 20);\n\n        svgEl.childNodes[4].textContent = this.labelend;\n        svgEl.childNodes[4].setAttribute('x', this.centre2.x);\n        svgEl.childNodes[4].setAttribute('y', parseInt(this.centre2.y) + 20);\n\n        // If the svg g element is already placed in dropzone, then add the keyboard support.\n        var svgClass = svgEl.getAttribute('class');\n        if (svgClass && svgClass.includes('placed')) {\n            svgEl.childNodes[1].setAttribute('tabindex', '0');\n            svgEl.childNodes[2].setAttribute('tabindex', '0');\n        }\n    };\n\n    /**\n     * Update svg line attributes.\n     *\n     * @param {SVGElement} svgEl the SVG representation of the shape.\n     */\n    Line.prototype.drawLine = function(svgEl) {\n        // Set attributes for the polyline.\n        svgEl.childNodes[0].style.stroke = \"#000973\";\n        svgEl.childNodes[0].style['stroke-width'] = \"3\";\n        svgEl.childNodes[0].style['stroke-dasharray'] = \"10,3\";\n\n        var points = this.centre1.x + \",\" + this.centre1.y + \" \" + this.centre2.x + \",\" + this.centre2.y;\n        svgEl.childNodes[0].setAttribute('points', points);\n\n        // Set attributes to display line based on linetype.\n        switch (this.lineType) {\n            case 'linesinglearrow':\n                svgEl.childNodes[0].style['marker-end'] = \"url(#arrow)\";\n                svgEl.childNodes[0].setAttribute('class', 'shape singlearrow');\n                break;\n\n            case 'linedoublearrows':\n                svgEl.childNodes[0].style['marker-start'] = \"url(#arrow)\";\n                svgEl.childNodes[0].style['marker-end'] = \"url(#arrow)\";\n                svgEl.childNodes[0].setAttribute('class', 'shape doublearrows');\n                break;\n\n            case 'lineinfinite':\n                var newCoordinates = this.drawInfiniteLine(svgEl.parentNode);\n                var infiniteLine = newCoordinates[0] + \",\" + newCoordinates[1] +\n                    \" \" + points + \" \" + newCoordinates[2] + \",\" + newCoordinates[3];\n                svgEl.childNodes[0].setAttribute('points', infiniteLine);\n                svgEl.childNodes[0].setAttribute('class', 'shape infinite');\n                break;\n        }\n    };\n\n    /**\n     * Get the minimum and maximum endpoints of the line to draw an infinite line.\n     *\n     * @param {SVGElement} svg the SVG representation of the shape.\n     */\n    Line.prototype.drawInfiniteLine = function(svg) {\n\n        const width = svg.width.baseVal.value;\n        const height = svg.height.baseVal.value;\n\n        // Calculate slope\n        const dx = this.centre2.x - this.centre1.x;\n        const dy = this.centre2.y - this.centre1.y;\n\n        // Calculate points far outside the SVG canvas\n        let xMin, yMin, xMax, yMax;\n        if (dx === 0) { // Vertical line\n            xMin = xMax = this.centre1.x;\n            yMin = 0;\n            yMax = height;\n        } else if (dy === 0) { // Horizontal line\n            xMin = 0;\n            xMax = width;\n            yMin = yMax = this.centre1.y;\n        } else {\n            const slope = dy / dx;\n            const intercept = this.centre1.y - slope * this.centre1.x;\n\n            // Find intersection points with SVG canvas borders\n            xMin = -width; // Starting far left\n            yMin = slope * xMin + intercept;\n\n            xMax = 2 * width; // Extending far right\n            yMax = slope * xMax + intercept;\n\n            // Clamp to canvas height bounds\n            if (yMin < 0) {\n                yMin = 0;\n                xMin = (yMin - intercept) / slope;\n            } else if (yMin > height) {\n                yMin = height;\n                xMin = (yMin - intercept) / slope;\n            }\n\n            if (yMax < 0) {\n                yMax = 0;\n                xMax = (yMax - intercept) / slope;\n            } else if (yMax > height) {\n                yMax = height;\n                xMax = (yMax - intercept) / slope;\n            }\n        }\n        return [Math.round(xMin), Math.round(yMin), Math.round(xMax), Math.round(yMax)];\n    };\n\n    /**\n     * Parse the coordinates from the string representation.\n     *\n     * @param {String} startcoordinates \"x1,y1;radius\".\n     * @param {String} endcoordinates \"x1,y1;radius\".\n     * @param {float} ratio .\n     * @return {boolean} True if the coordinates are valid and parsed. Throws an exception if input point is not valid.\n     */\n    Line.prototype.parse = function(startcoordinates, endcoordinates, ratio) {\n        var startcoordinatesbits = startcoordinates.split(';');\n        var endcoordinatesbits = endcoordinates.split(';');\n        this.centre1 = Point.parse(startcoordinatesbits[0]);\n        this.centre2 = Point.parse(endcoordinatesbits[0]);\n        this.centre1.x = this.centre1.x * parseFloat(ratio);\n        this.centre1.y = this.centre1.y * parseFloat(ratio);\n        this.x1 = this.centre1.x * parseFloat(ratio);\n        this.y1 = this.centre1.y * parseFloat(ratio);\n        this.x2 = this.centre2.x * parseFloat(ratio);\n        this.y2 = this.centre2.y * parseFloat(ratio);\n        this.centre2.x = this.centre2.x * parseFloat(ratio);\n        this.centre2.y = this.centre2.y * parseFloat(ratio);\n        this.startRadius = Math.round(startcoordinatesbits[1]) * parseFloat(ratio);\n        this.endRadius = Math.round(endcoordinatesbits[1]) * parseFloat(ratio);\n\n        return true;\n    };\n\n    /**\n     * Move the entire shape by this offset.\n     *\n     * @param {String} whichHandle which circle handle was moved, i.e., startcircle or endcircle.\n     * @param {int} dx x offset.\n     * @param {int} dy y offset.\n     * @param {int} maxX ensure that after editing, the shape lies between 0 and maxX on the x-axis.\n     * @param {int} maxY ensure that after editing, the shape lies between 0 and maxX on the y-axis.\n     */\n    Line.prototype.move = function(whichHandle, dx, dy, maxX, maxY) {\n        if (whichHandle === 'startcircle') {\n            this.centre1.move(dx, dy);\n            if (this.centre1.x < this.startRadius) {\n                this.centre1.x = this.startRadius;\n                this.x1 = this.startRadius;\n            }\n            if (this.centre1.x > maxX - this.startRadius) {\n                this.centre1.x = maxX - this.startRadius;\n                this.x1 = maxX - this.startRadius;\n            }\n            if (this.centre1.y < this.startRadius) {\n                this.centre1.y = this.startRadius;\n                this.y1 = this.startRadius;\n            }\n            if (this.centre1.y > maxY - this.startRadius) {\n                this.centre1.y = maxY - this.startRadius;\n                this.y1 = maxY - this.startRadius;\n            }\n        } else {\n            this.centre2.move(dx, dy);\n            if (this.centre2.x < this.endRadius) {\n                this.centre2.x = this.endRadius;\n                this.x2 = this.endRadius;\n            }\n            if (this.centre2.x > maxX - this.endRadius) {\n                this.centre2.x = maxX - this.endRadius;\n                this.x2 = maxX - this.endRadius;\n            }\n            if (this.centre2.y < this.endRadius) {\n                this.centre2.y = this.endRadius;\n                this.y2 = this.endRadius;\n            }\n            if (this.centre2.y > maxY - this.endRadius) {\n                this.centre2.y = maxY - this.endRadius;\n                this.y2 = maxY - this.endRadius;\n            }\n        }\n    };\n\n    /**\n     * Move the line end points by this offset.\n     *\n     * @param {int} dx x offset.\n     * @param {int} dy y offset.\n     * @param {int} maxX ensure that after editing, the shape lies between 0 and maxX on the x-axis.\n     * @param {int} maxY ensure that after editing, the shape lies between 0 and maxX on the y-axis.\n     * @param {String} whichSVG The svg containing the drag.\n     */\n    Line.prototype.moveDrags = function(dx, dy, maxX, maxY, whichSVG) {\n        // If the drags are in the dragHomes then we want to keep the x coordinates fixed.\n        if (whichSVG === 'DragsSVG') {\n            // We don't want to move drags horizontally in this SVG.\n            this.centre1.move(0, dy);\n            this.centre2.move(0, dy);\n            this.centre1.x = 50;\n            this.x1 = 50;\n            this.centre2.x = 200;\n            this.x2 = 200;\n        } else {\n            this.centre1.move(dx, dy);\n            this.centre2.move(dx, dy);\n            if (this.centre1.x < this.startRadius) {\n                this.centre1.x = this.startRadius;\n                this.x1 = this.startRadius;\n            }\n            if (this.centre1.x > maxX - this.startRadius) {\n                this.centre1.x = maxX - this.startRadius;\n                this.x1 = maxX - this.startRadius;\n            }\n            if (this.centre2.x < this.endRadius) {\n                this.centre2.x = this.endRadius;\n                this.x2 = this.endRadius;\n            }\n            if (this.centre2.x > maxX - this.endRadius) {\n                this.centre2.x = maxX - this.endRadius;\n                this.x2 = maxX - this.endRadius;\n            }\n        }\n        if (this.centre1.y < this.startRadius) {\n            this.centre1.y = this.startRadius;\n            this.y1 = this.startRadius;\n        }\n        if (this.centre1.y > maxY - this.startRadius) {\n            this.centre1.y = maxY - this.startRadius;\n            this.y1 = maxY - this.startRadius;\n        }\n        if (this.centre2.y < this.endRadius) {\n            this.centre2.y = this.endRadius;\n            this.y2 = this.endRadius;\n        }\n        if (this.centre2.y > maxY - this.endRadius) {\n            this.centre2.y = maxY - this.endRadius;\n            this.y2 = maxY - this.endRadius;\n        }\n    };\n\n    /**\n     * Move the g element between the dropzones and dragHomes.\n     *\n     * @param {String} eventType Whether it's a mouse event or a keyboard event.\n     * @param {SVGElement} selectedElement The element selected for dragging.\n     * @param {SVG} svgDropZones\n     * @param {SVG} svgDragsHome\n     * @param {int|null} dropX Used by mouse events to calculate the svg to which it belongs.\n     * @param {int|null} dropY\n     * @param {String|null} whichSVG\n     */\n    Line.prototype.addToDropZone = function(eventType, selectedElement, svgDropZones, svgDragsHome, dropX, dropY, whichSVG) {\n        var maxY = 0,\n            dropzoneNo = selectedElement.getAttribute('data-dropzone-no'),\n            classattributes = '',\n            dropZone = false;\n        if (eventType === 'mouse') {\n            dropZone = this.isInsideSVG(svgDragsHome, dropX, dropY);\n        } else {\n            dropZone = (whichSVG === 'DragsSVG');\n        }\n        if (dropZone) {\n            // Append the element to the dropzone SVG.\n            // Get the height of the dropZone SVG, to decide the position to where to drop the line.\n            maxY = svgDropZones.height.baseVal.value;\n            svgDropZones.appendChild(selectedElement);\n            selectedElement.getAttribute('data-dropzone-no');\n\n            // Set tabindex to add keyevents to the circle movehandles.\n            selectedElement.childNodes[1].setAttribute('tabindex', '0');\n            selectedElement.childNodes[2].setAttribute('tabindex', '0');\n\n            // Caluculate the position of line drop.\n            this.centre1.y = maxY - (2 * this.startRadius);\n            this.y1 = maxY - (2 * this.startRadius);\n            this.centre2.y = maxY - (2 * this.endRadius);\n            this.y2 = maxY - (2 * this.endRadius);\n\n            // Update the class attributes to 'placed' if the line is in the svgDropZone.\n            classattributes = selectedElement.getAttribute('class');\n            classattributes = classattributes.replace('inactive', 'placed');\n            selectedElement.setAttribute('class', classattributes);\n        } else {\n            // Append the element to the draghomes SVG.\n            svgDragsHome.appendChild(selectedElement);\n\n            // We want to drop the lines from the top, depending on the line number.\n            // Calculate the position of line drop.\n            this.centre1.x = 50;\n            this.centre1.y = this.startRadius + (dropzoneNo * 50);\n            this.y1 = this.startRadius + (dropzoneNo * 50);\n            this.centre2.x = 200;\n            this.centre2.y = this.endRadius + (dropzoneNo * 50);\n            this.y2 = this.endRadius + (dropzoneNo * 50);\n\n            // Update the class attributes to 'inactive' if the line is in the svg draghome.\n            classattributes = selectedElement.getAttribute('class');\n            classattributes = classattributes.replace('placed', 'inactive');\n            selectedElement.setAttribute('class', classattributes);\n            // Set tabindex = -1, so the circle movehandles aren't focusable when in draghomes svg.\n            selectedElement.childNodes[1].setAttribute('tabindex', '-1');\n            selectedElement.childNodes[2].setAttribute('tabindex', '-1');\n        }\n    };\n\n    /**\n     * Check if the current selected element is in the svg .\n     *\n     * @param {SVGElement} svg Svg element containing the drags.\n     * @param {int} dropX\n     * @param {int} dropY\n     * @return {bool}\n     */\n    Line.prototype.isInsideSVG = function(svg, dropX, dropY) {\n        const rect = svg.getBoundingClientRect();\n        return dropX >= rect.left && dropX <= rect.right && dropY >= rect.top && dropY <= rect.bottom;\n    };\n\n    /**\n     * Move one of the edit handles by this offset.\n     *\n     * @param {String} handleIndex which handle was moved.\n     * @param {int} dx x offset.\n     * @param {int} dy y offset.\n     * @param {int} maxX ensure that after editing, the shape lies between 0 and maxX on the x-axis.\n     * @param {int} maxY ensure that after editing, the shape lies between 0 and maxX on the y-axis.\n     */\n    Line.prototype.edit = function(handleIndex, dx, dy, maxX, maxY) {\n        var limit = 0;\n        if (handleIndex === '0') {\n            this.startRadius += dx;\n            limit = Math.min(this.centre1.x, this.centre1.y, maxX - this.centre1.x, maxY - this.centre1.y);\n            if (this.startRadius > limit) {\n                this.startRadius = limit;\n            }\n            if (this.startRadius < -limit) {\n                this.startRadius = -limit;\n            }\n        } else {\n            this.endRadius += dx;\n            limit = Math.min(this.centre2.x, this.centre2.y, maxX - this.centre2.x, maxY - this.centre2.y);\n            if (this.endRadius > limit) {\n                this.endRadius = limit;\n            }\n            if (this.endRadius < -limit) {\n                this.endRadius = -limit;\n            }\n        }\n    };\n\n    /**\n     * Get the handles that should be offered to edit this shape, or null if not appropriate.\n     *\n     * @return {Object[]} with properties moveHandleStart {Point}, moveHandleEnd {Point} and editHandles {Point[]}.\n     */\n    Line.prototype.getHandlePositions = function() {\n        return {\n            moveHandles: [new Point(this.centre1.x, this.centre1.y), new Point(this.centre2.x, this.centre2.y)],\n            editHandles: [this.centre1.offset(this.startRadius, 0), this.centre2.offset(this.endRadius, 0)]\n        };\n    };\n\n    /**\n     * Update the properties of this shape after a sequence of edits.\n     *\n     * For example make sure the circle radius is positive, of the polygon centre is centred.\n     */\n    Line.prototype.normalizeShape = function() {\n        this.startRadius = Math.abs(this.startRadius);\n        this.endRadius = Math.abs(this.endRadius);\n    };\n\n    /**\n     * Add a new arrow SVG DOM element as a child of svg.\n     *\n     * @param {SVGElement} svg the parent node.\n     */\n     function addLineArrow(svg) {\n        if (svg.getElementsByTagName('defs')[0]) {\n            return;\n        }\n        var svgdefsEl = svg.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'defs');\n        var svgmarkerEl = svg.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'marker');\n        svgmarkerEl.setAttribute('id', 'arrow');\n        svgmarkerEl.setAttribute('viewBox', \"0 0 10 10\");\n        svgmarkerEl.setAttribute('refX', '7');\n        svgmarkerEl.setAttribute('refY', '5');\n        svgmarkerEl.setAttribute('markerWidth', '4');\n        svgmarkerEl.setAttribute('markerHeight', '4');\n        svgmarkerEl.setAttribute('orient', 'auto-start-reverse');\n        var svgPathEl = svg.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'path');\n        svgPathEl.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        svgmarkerEl.appendChild(svgPathEl);\n        svgdefsEl.appendChild(svgmarkerEl);\n\n        svg.appendChild(svgdefsEl);\n    }\n\n    /**\n     * Make a new SVG DOM element as a child of svg.\n     *\n     * @param {SVGElement} svg the parent node.\n     * @param {String} tagName the tag name.\n     * @return {SVGElement} the newly created node.\n     */\n    function createSvgElement(svg, tagName) {\n        var svgEl = svg.ownerDocument.createElementNS('http://www.w3.org/2000/svg', tagName);\n        svg.appendChild(svgEl);\n        return svgEl;\n    }\n\n    /**\n     * Make a group SVG DOM elements containing a polyline of the given linetype as first child,\n     * two circles to mark the allowed radius for grading and text labels for the line.\n     *\n     * @param {SVGElement} svg the parent node.\n     * @param {String} tagName the tag name.\n     * @return {SVGElement} the newly created g element.\n     */\n    function createSvgShapeGroup(svg, tagName) {\n        var svgEl = createSvgElement(svg, 'g');\n        svgEl.setAttribute('tabindex', '0');\n        var lineEl = createSvgElement(svgEl, tagName);\n        lineEl.setAttribute('class', 'shape');\n        var startcircleEl = createSvgElement(svgEl, 'circle');\n        startcircleEl.setAttribute('class', 'startcircle shape');\n        var endcirleEl = createSvgElement(svgEl, 'circle');\n        endcirleEl.setAttribute('class', 'endcircle shape');\n        createSvgElement(svgEl, 'text').setAttribute('class', 'labelstart shapeLabel');\n        createSvgElement(svgEl, 'text').setAttribute('class', 'labelend shapeLabel');\n        return svgEl;\n    }\n\n    /**\n     * @alias module:qtype_drawlines/drawLine\n     */\n    return {\n        /**\n         * A point, with x and y coordinates.\n         *\n         * @param {int} x centre X.\n         * @param {int} y centre Y.\n         * @constructor\n         */\n        Point: Point,\n\n        /**\n         * Line constructor. Class to represent the different types of drop zone shapes.\n         *\n         * @param {String} [labelstart] start label of a line.\n         * @param {int} [x1] centre X1.\n         * @param {int} [y1] centre Y1.\n         * @param {int} [startRadius] startRadius.\n         * @param {String} [labelend] end label of a line.\n         * @param {int} [x2] centre X2.\n         * @param {int} [y2] centre Y2.\n         * @param {int} [endRadius] endRadius.\n         * @param {String} [lineType] Line type.\n         * @constructor\n         */\n        Line: Line,\n\n        /**\n         * Make a new SVG DOM element as a child of svg.\n         *\n         * @param {SVGElement} svg the parent node.\n         * @param {String} tagName the tag name.\n         * @return {SVGElement} the newly created node.\n         */\n        createSvgElement: createSvgElement,\n\n        /**\n         * Make a line of the given type.\n         *\n         * @param {Array} linecoordinates in the format (x,y;radius).\n         * @param {Array} labels Start and end labels of a line.\n         * @param {String} lineType The linetype (e.g., linesinglearrow, linedoublearrows, ...).\n         * @return {Line} the new line.\n         */\n        make: function(linecoordinates, labels, lineType) {\n            // Line coordinates are in the format (x,y;radius).\n            var startcoordinates = linecoordinates[0].split(';');\n            var endcoordinates = linecoordinates[1].split(';');\n            var linestartbits = startcoordinates[0].split(',');\n            var lineendbits = endcoordinates[0].split(',');\n\n            return new Line(labels[0], parseInt(linestartbits[0]), parseInt(linestartbits[1]), parseInt(startcoordinates[1]),\n                labels[1], parseInt(lineendbits[0]), parseInt(lineendbits[1]), parseInt(endcoordinates[1]), lineType);\n        },\n\n        /**\n         * Make a line of the given linetype having similar coordinates and labels as the original type.\n         *\n         * @param {String} lineType the new type of line to make.\n         * @param {line} line the line to copy.\n         * @return {line} the similar line of a different linetype.\n         */\n        getSimilar: function(lineType, line) {\n            return new Line(line.labelstart, parseInt(line.x1), parseInt(line.y1), parseInt(line.startRadius),\n                line.labelend, parseInt(line.x2), parseInt(line.y2), parseInt(line.endRadius), lineType);\n        }\n    };\n});\n"],"names":["define","Point","x","y","Line","labelstart","x1","y1","startRadius","labelend","x2","y2","endRadius","lineType","centre1","centre2","createSvgElement","svg","tagName","svgEl","ownerDocument","createElementNS","appendChild","prototype","toString","this","move","dx","dy","offset","offsetX","offsetY","parse","coordinates","bits","split","length","Error","Math","round","getType","getCoordinates","makeSvg","getElementsByTagName","svgdefsEl","svgmarkerEl","setAttribute","svgPathEl","addLineArrow","createSvgShapeGroup","updateSvg","drawLine","childNodes","abs","textContent","parseInt","svgClass","getAttribute","includes","style","stroke","points","newCoordinates","drawInfiniteLine","parentNode","infiniteLine","width","baseVal","value","height","xMin","yMin","xMax","yMax","slope","intercept","startcoordinates","endcoordinates","ratio","startcoordinatesbits","endcoordinatesbits","parseFloat","whichHandle","maxX","maxY","moveDrags","whichSVG","addToDropZone","eventType","selectedElement","svgDropZones","svgDragsHome","dropX","dropY","dropzoneNo","classattributes","isInsideSVG","replace","rect","getBoundingClientRect","left","right","top","bottom","edit","handleIndex","limit","min","getHandlePositions","moveHandles","editHandles","normalizeShape","make","linecoordinates","labels","linestartbits","lineendbits","getSimilar","line"],"mappings":"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"}