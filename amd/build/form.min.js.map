{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This class provides the enhancements to the drawlines editing form.\n *\n * @module     qtype_drawlines/form\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/dragdrop', 'qtype_drawlines/line'], function($, dragDrop, Line,) {\n\n    /**\n     * Create the manager object that deals with keeping everything synchronised for one line.\n     *\n     * @param {int} lineNo the index of this line in the form. 0, 1, ....\n     * @constructor\n     */\n    function LineManager(lineNo) {\n        this.lineNo = lineNo;\n        this.svgEl = null;\n        this.line = Line.make(this.getCoordinatesFromForm(this.lineNo), this.getLabel(), this.getLineType());\n        this.updateCoordinatesFromForm();\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     *\n     * @param {SVGElement} [svg] the SVG element that is the preview.\n     */\n    LineManager.prototype.updateCoordinatesFromForm = function(svg) {\n        var coordinates = this.getCoordinatesFromForm(this.lineNo);\n\n        // Check if the coordinates are in the required format of 'x,y;r'.\n        if (!this.validateFormCoordinates(this.lineNo)) {\n            return;\n        }\n        // We don't need to scale the shape for editing form.\n        if (!this.line.parse(coordinates[0], coordinates[1], 1)) {\n            // Invalid coordinates. Don't update the preview.\n            return;\n        }\n\n        if (this.line.getCoordinates() !== coordinates) {\n            // Line coordinates have changed.\n            var currentyActive = this.isActive();\n            this.removeFromSvg();\n            if (svg) {\n                this.addToSvg(svg);\n                if (currentyActive) {\n                    this.setActive();\n                }\n            }\n        } else {\n            // Simple update.\n            this.updateSvgEl();\n        }\n        // Update the rounded coordinates if needed.\n        this.setCoordinatesInForm();\n    };\n\n    /**\n     * Validates if the given coordinates are in the correct format 'x,y;r'.\n     *\n     * @param {int} lineNo The lineNo of the form.\n     * @returns {boolean} True if the coordinates are valid, otherwise false.\n     */\n    LineManager.prototype.validateFormCoordinates = function(lineNo) {\n        var coords = this.getCoordinatesFromForm(lineNo);\n        var regexp = /^\\d+,\\d+;\\d+$/;\n        return regexp.test(coords[0]) && regexp.test(coords[1]);\n    };\n\n    /**\n     * Set the coordinates in the form to match the current shape.\n     */\n    LineManager.prototype.setCoordinatesInForm = function() {\n        var linecoords = this.line.getCoordinates();\n        drawlinesForm.setFormValue('zonestart', [this.lineNo], linecoords[0]);\n        drawlinesForm.setFormValue('zoneend', [this.lineNo], linecoords[1]);\n    };\n\n    /**\n     * Returns the coordinates for the line from the text input in the form.\n     *\n     * @param {int} lineNo\n     * @returns {Array} the coordinates.\n     */\n    LineManager.prototype.getCoordinatesFromForm = function(lineNo) {\n        var zonestart = drawlinesForm.getFormValue('zonestart', [lineNo]);\n        var zoneend = drawlinesForm.getFormValue('zoneend', [lineNo]);\n        return [zonestart, zoneend];\n    };\n\n    /**\n     * Update the labels.\n     */\n    LineManager.prototype.updateLabel = function() {\n        var label = this.getLabel();\n        if (this.line.labelstart !== label[0] || this.line.labelend !== label[1]) {\n            this.line.labelstart = label[0];\n            this.line.labelend = label[1];\n            this.updateSvgEl();\n        }\n    };\n\n    /**\n     * Returns the selected type of line in the form.\n     *\n     * @returns {String} 'linesegment','linesinglearrow', 'linedoublearrows', 'lineinfinite'.\n     */\n    LineManager.prototype.getLineType = function() {\n        return drawlinesForm.getFormValue('type', [this.lineNo]);\n    };\n\n    /**\n     * Returns the line labels in the form.\n     *\n     * @returns {Array} line labels text.\n     */\n    LineManager.prototype.getLabel = function() {\n        return [\n            drawlinesForm.getFormValue('labelstart', [this.lineNo]),\n            drawlinesForm.getFormValue('labelend', [this.lineNo])\n        ];\n    };\n\n    /**\n     * Update the shape of this drop zone (but not type) in an SVG image.\n     */\n    LineManager.prototype.updateSvgEl = function() {\n        if (this.svgEl === null) {\n            return;\n        }\n        if (!this.validateFormCoordinates(this.lineNo)) {\n            return;\n        }\n        this.line.updateSvg(this.svgEl);\n\n        // Adjust handles.\n        var handles = this.line.getHandlePositions();\n        if (handles === null) {\n            return;\n        }\n\n        // Move handle.\n        // The shape + its labels are the first few children of svgEl.\n        // Then comes the move handle followed by the edit handles.\n        var i = 0;\n        for (i = 0; i < handles.moveHandles.length; ++i) {\n            this.svgEl.childNodes[5 + i].setAttribute('cx', handles.moveHandles[i].x);\n            this.svgEl.childNodes[5 + i].setAttribute('cy', handles.moveHandles[i].y);\n        }\n\n        // Edit handles.\n        for (i = 0; i < handles.editHandles.length; ++i) {\n            this.svgEl.childNodes[7 + i].setAttribute('x', handles.editHandles[i].x - 6);\n            this.svgEl.childNodes[7 + i].setAttribute('y', handles.editHandles[i].y - 6);\n        }\n    };\n\n    /**\n     * Handle if the line type has changed.\n     *\n     * @param {SVGElement} [svg] an SVG element to add this new shape to.\n     */\n    LineManager.prototype.changeShape = function(svg) {\n        var newLineType = this.getLineType(),\n            currentyActive = this.isActive();\n        if (newLineType === this.line.getType()) {\n            return;\n        }\n\n        // It has really changed.\n        this.removeFromSvg();\n        if (newLineType !== 'choose') {\n            this.line = Line.getSimilar(newLineType, this.line);\n            if (svg) {\n                this.addToSvg(svg);\n                if (currentyActive) {\n                    this.setActive();\n                }\n            }\n        }\n    };\n\n    /**\n     * Find out if this line element is currently being edited.\n     *\n     * @return {boolean} true if it is.\n     */\n    LineManager.prototype.isActive = function() {\n        return this.svgEl !== null && this.svgEl.getAttribute('class').match(/\\bactive\\b/);\n    };\n\n    /**\n     * Set this line element as being edited.\n     */\n    LineManager.prototype.setActive = function() {\n        this.svgEl.setAttribute('class', this.svgEl.getAttribute('class') + ' active');\n    };\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    LineManager.prototype.addToSvg = function(svg) {\n        if (this.svgEl !== null) {\n            throw new Error('this.svgEl already set');\n        }\n        if (!this.validateFormCoordinates(this.lineNo)) {\n            return;\n        }\n        this.svgEl = this.line.makeSvg(svg);\n        if (!this.svgEl) {\n            return;\n        }\n        this.svgEl.setAttribute('class', 'dropzone');\n        this.svgEl.setAttribute('data-dropzone-no', this.lineNo);\n\n        // Add handles.\n        var handles = this.line.getHandlePositions();\n        if (handles === null) {\n            return;\n        }\n\n        // Add handles to the line points.\n        this.makeMoveHandle(0, handles.moveHandles[0], \"handlestart move\");\n        this.makeMoveHandle(1, handles.moveHandles[1], \"handleend move\");\n\n        // Add edithandles to the circles to set the start and end radius.\n        this.makeEditHandle(0, handles.editHandles[0], \"handlestart edit\");\n        this.makeEditHandle(1, handles.editHandles[1], \"handleend edit\");\n    };\n\n    /**\n     * Add a new move handle.\n     *\n     * @param {int} index the handle index.\n     * @param {Point} point the point at which to add the handle.\n     * @param {String} handleclass the class attribute to add to the handle.\n     */\n    LineManager.prototype.makeMoveHandle = function(index, point, handleclass) {\n        var moveHandle = Line.createSvgElement(this.svgEl, 'circle');\n        moveHandle.setAttribute('cx', point.x);\n        moveHandle.setAttribute('cy', point.y);\n        moveHandle.setAttribute('r', 7);\n        moveHandle.setAttribute('class', handleclass);\n        moveHandle.setAttribute('data-move-handle-no', index);\n        moveHandle.setAttribute('tabindex', 0);\n    };\n\n    /**\n     * Add a new edit handle.\n     *\n     * @param {int} index the handle index.\n     * @param {Point} point the point at which to add the handle.\n     * @param {String} handleclass the class attribute to add to the handle.\n     */\n    LineManager.prototype.makeEditHandle = function(index, point, handleclass) {\n        var editHandle = Line.createSvgElement(this.svgEl, 'rect');\n        editHandle.setAttribute('x', point.x - 6);\n        editHandle.setAttribute('y', point.y - 6);\n        editHandle.setAttribute('width', 11);\n        editHandle.setAttribute('height', 11);\n        editHandle.setAttribute('class', handleclass);\n        editHandle.setAttribute('data-edit-handle-no', index);\n        editHandle.setAttribute('tabindex', 0);\n    };\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    LineManager.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Start responding to dragging the line elements.\n     *\n     * @param {Event} e Event object\n     * @param {String} handleIndex\n     * @param {String} handleType\n     */\n    LineManager.prototype.handleMouseEvents = function(e, handleIndex, handleType) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n\n        var changingDropZone = this,\n            lastX = parseInt(info.x),\n            lastY = parseInt(info.y),\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground'),\n            maxX = parseInt(bgImg.width),\n            maxY = parseInt(bgImg.height);\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            switch (handleType) {\n                case 'edit':\n                    changingDropZone.line.edit(handleIndex, parseInt(pageX) - lastX,\n                        parseInt(pageY) - lastY, maxX, maxY);\n                    changingDropZone.line.normalizeShape();\n                    break;\n                case 'move':\n                    changingDropZone.line.move(handleIndex, parseInt(pageX) - lastX,\n                        parseInt(pageY) - lastY, maxX, maxY);\n                    break;\n                case 'line':\n                    changingDropZone.line.moveDrags(\n                        parseInt(pageX) - lastX, parseInt(pageY) - lastY, maxX, maxY, '');\n                    break;\n            }\n            lastX = pageX;\n            lastY = pageY;\n            changingDropZone.updateSvgEl();\n            changingDropZone.setCoordinatesInForm();\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Handle key down / press events on markers.\n     *\n     * @param {Event} event\n     * @param {SVGElement} drag SVG element being dragged.\n     * @param {String} handleIndex which line handle was moved.\n     * @param {String} handleType the type of handle - edit, move or line.\n     */\n    LineManager.prototype.handleKeyPress = function(event, drag, handleIndex, handleType) {\n        var x = 0,\n            y = 0;\n        switch (event.code) {\n            case 'ArrowLeft':\n            case 'KeyA': // A.\n                x = -1;\n                break;\n            case 'ArrowRight':\n            case 'KeyD': // D.\n                x = 1;\n                break;\n            case 'ArrowDown':\n            case 'KeyS': // S.\n                y = 1;\n                break;\n            case 'ArrowUp':\n            case 'KeyW': // W.\n                y = -1;\n                break;\n            case 'Space':\n            case 'Escape':\n                break;\n            default:\n                return; // Ingore other keys.\n        }\n        event.preventDefault();\n\n        // Get the dimensions of the selected element's svg.\n        var bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground'),\n            maxX = bgImg.width,\n            maxY = bgImg.height;\n\n        if (handleType === 'move') {\n            this.line.move(handleIndex, parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY));\n        } else if (handleType === 'edit') {\n            this.line.edit(handleIndex, parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY));\n            this.line.normalizeShape();\n        } else if (handleType === 'line') {\n            this.line.moveDrags(parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY), '');\n        }\n        this.updateSvgEl();\n        this.setCoordinatesInForm();\n        drag.focus();\n    };\n\n    /**\n     * Remove this line from an SVG image.\n     */\n    LineManager.prototype.removeFromSvg = function() {\n        if (this.svgEl !== null) {\n            this.svgEl.parentNode.removeChild(this.svgEl);\n            this.svgEl = null;\n        }\n    };\n\n    /**\n     * Singleton object for managing all the parts of the form.\n     */\n    const drawlinesForm = {\n\n        /**\n         * @var {object} for interacting with the file pickers.\n         */\n        fp: null, // Object containing functions associated with the file picker.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {LineManager[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * Init method.\n         */\n        init: function() {\n            drawlinesForm.noOfLines = drawlinesForm.getFormValue('numberoflines', []);\n            drawlinesForm.createShapes();\n            drawlinesForm.fp = drawlinesForm.filePickers();\n            drawlinesForm.setupEventHandlers();\n            drawlinesForm.waitForFilePickerToInitialise();\n        },\n\n        /**\n         * Utility to get the file name and url from the filepicker.\n         *\n         * @returns {Object} object containing functions {file, name}\n         */\n        filePickers: function() {\n            var draftItemIdsToName;\n            var nameToParentNode;\n            if (draftItemIdsToName === undefined) {\n                draftItemIdsToName = {};\n                nameToParentNode = {};\n                var fp = document.querySelectorAll('form.mform[data-qtype=\"drawlines\"] input.filepickerhidden');\n                fp.forEach(function(filepicker) {\n                    draftItemIdsToName[filepicker.value] = filepicker.name;\n                    nameToParentNode[filepicker.name] = filepicker.parentNode;\n                });\n            }\n\n            return {\n                file: function(name) {\n                    var parentNode = nameToParentNode[name];\n                    if (parentNode) {\n                        var fileAnchor = parentNode.querySelector('div.filepicker-filelist a');\n                        if (fileAnchor) {\n                            return {href: fileAnchor.href, name: fileAnchor.innerHTML};\n                        }\n                    }\n                    return {href: null, name: null};\n                },\n\n                name: function(draftitemid) {\n                    return draftItemIdsToName[draftitemid];\n                }\n            };\n        },\n\n        /**\n         * Loads the preview background image.\n         */\n        loadPreviewImage: function() {\n            if (!document.getElementById('dlines-droparea')) {\n                drawlinesForm.setupPreviewArea();\n            }\n            var img = document.querySelector('fieldset#id_previewareaheader .dropbackground');\n            if (img) {\n                img.addEventListener('load', function() {\n                    drawlinesForm.afterPreviewImageLoaded();\n                }, {once: true});\n                img.src = drawlinesForm.fp.file('bgimage').href;\n            }\n        },\n\n        /**\n         * Add html for the preview area.\n         */\n        setupPreviewArea: function() {\n            var previewareaheader = document.querySelector('fieldset#id_previewareaheader');\n            if (drawlinesForm.fp.file('bgimage').href !== null) {\n                previewareaheader.insertAdjacentHTML('beforeend',\n                    '<div class=\"ddarea que drawlines\">' +\n                    '  <div id=\"dlines-droparea\" class=\"droparea\">' +\n                    '    <img class=\"dropbackground\" />' +\n                    '    <div id=\"dlines-dropzone\" class=\"dropzones\"></div>' +\n                    '  </div>' +\n                    '  <div class=\"dragitems\"></div>' +\n                    '</div>');\n            }\n        },\n\n        /**\n         * Events linked to form actions.\n         */\n        setupEventHandlers: function() {\n            // Changes to Drop zones section: shape, coordinates and marker.\n            var lineSelector = 'fieldset#id_linexheader_' + '0';\n\n            for (var lineNo = 0; lineNo < drawlinesForm.noOfLines; lineNo++) {\n                lineSelector = 'fieldset#id_linexheader_' + lineNo;\n                document.querySelector(lineSelector).addEventListener('input', function(e) {\n                    if (e.target.matches('input, select')) {\n                        var ids = e.target.name.match(/^([a-z]*)\\[(\\d+)]$/);\n                        var id = e.target.name;\n                        if (!id) {\n                            return;\n                        }\n                        var dropzoneNo = ids[2],\n                            inputType = ids[1],\n                            dropZone = drawlinesForm.dropZones[dropzoneNo];\n\n                        switch (inputType) {\n                            case 'zonestart':\n                            case 'zoneend':\n                                dropZone.updateCoordinatesFromForm(drawlinesForm.getSvg());\n                                break;\n\n                            case 'type':\n                                dropZone.updateCoordinatesFromForm(drawlinesForm.getSvg());\n                                dropZone.changeShape(drawlinesForm.getSvg());\n                                break;\n\n                            case 'labelstart':\n                            case 'labelend':\n                                dropZone.updateLabel();\n                                break;\n                        }\n                    }\n                });\n            }\n\n            // Click to toggle graphical editing.\n            var previewArea = document.querySelector('fieldset#id_previewareaheader');\n            previewArea.addEventListener('click', function(event) {\n                if (event.target.closest('g.dropzone')) {\n                    var dropzoneElement = event.target.closest('g.dropzone');\n                    drawlinesForm.setElementActive(dropzoneElement);\n                } else {\n                    drawlinesForm.setElementActive(null);\n                }\n            });\n            previewArea.addEventListener('keydown', function(event) {\n                if (event.target.closest('g.dropzone')) {\n                    var dropzoneElement = event.target.closest('g.dropzone');\n                    drawlinesForm.setElementActive(dropzoneElement);\n                }\n            });\n\n            // Add event listeners to the 'previewArea'.\n            previewArea.addEventListener('mousedown', drawlinesForm.handleEventLine);\n            previewArea.addEventListener('touchstart', drawlinesForm.handleEventLine);\n            previewArea.addEventListener('mousedown', drawlinesForm.handleEventMove);\n            previewArea.addEventListener('touchstart', drawlinesForm.handleEventMove);\n            previewArea.addEventListener('mousedown', drawlinesForm.handleEventEdit);\n            previewArea.addEventListener('touchstart', drawlinesForm.handleEventEdit);\n            // Add keyboard events.\n            previewArea.addEventListener('keydown', drawlinesForm.handleKeyPress);\n            previewArea.addEventListener('keypress', drawlinesForm.handleKeyPress);\n        },\n\n        /**\n         * Set the element as active.\n         *\n         * @param {SVGElement|null} dropzoneElement SVG element to set active or null to remove.\n         */\n        setElementActive: function(dropzoneElement) {\n            let svgElement, activeDropzones;\n            if (dropzoneElement !== null) {\n                let dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                let currentlyActive = drawlinesForm.dropZones[dropzoneNo].isActive();\n                if (!currentlyActive) {\n                    // Find all active dropzones and remove the 'active' class\n                    svgElement = drawlinesForm.getSvg();\n                    activeDropzones = svgElement.querySelectorAll('.dropzone.active');\n                    activeDropzones.forEach(function(activeDropzone) {\n                        activeDropzone.classList.remove('active');\n                    });\n                    drawlinesForm.dropZones[dropzoneNo].setActive();\n                }\n            } else {\n                // When mouse is clicked away from the line element, the active class should be removed.\n                svgElement = drawlinesForm.getSvg();\n                activeDropzones = svgElement.querySelectorAll('.dropzone.active');\n                activeDropzones.forEach(function(activeDropzone) {\n                    activeDropzone.classList.remove('active');\n                });\n            }\n        },\n\n        /**\n         * Handle events linked to moving the line.\n         *\n         * @param {Event} event\n         */\n        handleEventMove: function(event) {\n            var dropzoneElement, dropzoneNo, handleIndex;\n            if (event.target.closest('.dropzone .handlestart.move')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = 'startcircle';\n                drawlinesForm.dropZones[dropzoneNo].handleMouseEvents(event, handleIndex, 'move');\n            } else if (event.target.closest('.dropzone .handleend.move')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = 'endcircle';\n                drawlinesForm.dropZones[dropzoneNo].handleMouseEvents(event, handleIndex, 'move');\n            }\n        },\n\n        /**\n         * Handle events linked to moving the rectangle to change the radius which is used for grading.\n         *\n         * @param {Event} event\n         */\n        handleEventEdit: function(event) {\n            var dropzoneElement, dropzoneNo, handleIndex;\n            if (event.target.closest('.dropzone .handlestart.edit')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-edit-handle-no');\n                drawlinesForm.dropZones[dropzoneNo].handleMouseEvents(event, handleIndex, 'edit');\n            } else if (event.target.closest('.dropzone .handleend.edit')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-edit-handle-no');\n                drawlinesForm.dropZones[dropzoneNo].handleMouseEvents(event, handleIndex, 'edit');\n            }\n        },\n\n        /**\n         * Handle events linked to moving the line.\n         *\n         * @param {Event} event\n         */\n        handleEventLine: function(event) {\n            var dropzoneElement, dropzoneNo;\n            if (event.target.closest('g.dropzone.active')) {\n                dropzoneElement = event.target.closest('g.active');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                drawlinesForm.dropZones[dropzoneNo].handleMouseEvents(event, '', 'line');\n            }\n        },\n\n        /**\n         * Handle key down / press events on lines.\n         *\n         * @param {Event} e\n         */\n        handleKeyPress: function(e) {\n            var dropzoneElement, dropzoneNo, handleIndex, drag;\n\n            if (event.target.closest('.dropzone.active .handlestart.move')) {\n                // Handle moving startcircle of a line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = 'startcircle';\n                drag = e.target.closest('.dropzone.active .handlestart.move');\n                drawlinesForm.dropZones[dropzoneNo].handleKeyPress(event, drag, handleIndex, 'move');\n            } else if (event.target.closest('.dropzone.active .handleend.move')) {\n                // Handle moving endcircle of a line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = 'endcircle';\n                drag = e.target.closest('.dropzone.active .handleend.move');\n                drawlinesForm.dropZones[dropzoneNo].handleKeyPress(event, drag, handleIndex, 'move');\n            } else if (event.target.closest('.dropzone.active .handlestart.edit')) {\n                // Handle editing radius for start point of a line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-edit-handle-no');\n                drag = e.target.closest('.dropzone.active .handlestart.edit');\n                drawlinesForm.dropZones[dropzoneNo].handleKeyPress(event, drag, handleIndex, 'edit');\n            } else if (event.target.closest('.dropzone.active .handleend.edit')) {\n                // Handle editing radius for end point of a line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-edit-handle-no');\n                drag = e.target.closest('.dropzone.active .handleend.edit');\n                drawlinesForm.dropZones[dropzoneNo].handleKeyPress(event, drag, handleIndex, 'edit');\n            } else if (e.target.closest('g.dropzone')) {\n                // Handle moving entire line.\n                dropzoneElement = event.target.closest('.dropzone');\n                // DrawlinesForm.setElementActive(dropzoneElement);\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                drag = e.target.closest('g.dropzone.active');\n                drawlinesForm.dropZones[dropzoneNo].handleKeyPress(event, drag, '', 'line');\n            }\n        },\n\n        /**\n         * Waits for the file-pickers to be sufficiently ready before initialising the preview.\n         */\n        waitForFilePickerToInitialise: function() {\n            // Add event listener for change events on the file picker elements\n            document.querySelectorAll('form.mform[data-qtype=\"drawlines\"]').forEach(function(form) {\n                form.addEventListener('change', drawlinesForm.loadPreviewImage);\n            });\n\n            // Check if the element with id 'id_droparea' exists\n            if (document.getElementById('dlines-droparea')) {\n                drawlinesForm.loadPreviewImage();\n            } else {\n                // Setup preview area when the background image is uploaded the first time\n                drawlinesForm.setupPreviewArea();\n                drawlinesForm.loadPreviewImage();\n            }\n        },\n\n        /**\n         * Functions to run after background image loaded.\n         */\n        afterPreviewImageLoaded: function() {\n            var bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground');\n            // Place the dropzone area over the background image (adding one to account for the border).\n            document.getElementById('dlines-dropzone').style.position = 'relative';\n            document.getElementById('dlines-dropzone').style.top = (bgImg.height + 1) * -1 + \"px\";\n            document.getElementById('dlines-droparea').style.height = bgImg.height + 20 + \"px\";\n            drawlinesForm.updateSvgDisplay();\n        },\n\n        /**\n         * Draws or re-draws all dropzones in the preview area based on form data.\n         * Call this function when there is a change in the form data.\n         */\n        updateSvgDisplay: function() {\n            var bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground');\n\n            if (drawlinesForm.getSvg()) {\n                // Already exists, just need to be updated.\n                for (var lineNo = 0; lineNo < drawlinesForm.noOfLines; lineNo++) {\n                    drawlinesForm.dropZones[lineNo].updateSvgEl();\n                }\n\n            } else {\n                // Create.\n                document.getElementById('dlines-dropzone').innerHTML =\n                    '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dropzones\" ' +\n                    'width=\"' + bgImg.width + '\" ' +\n                    'height=\"' + bgImg.height + '\">' +\n                    '</svg>';\n                for (var lines = 0; lines < drawlinesForm.noOfLines; lines++) {\n                    drawlinesForm.dropZones[lines].addToSvg(drawlinesForm.getSvg());\n                }\n            }\n        },\n\n        /**\n         * Get the SVG element, if there is one, otherwise return null.\n         *\n         * @returns {SVGElement|null} the SVG element or null.\n         */\n        getSvg: function() {\n            var svg = document.querySelector('fieldset#id_previewareaheader svg');\n            if (svg === null) {\n                return null;\n            } else {\n                return svg;\n            }\n        },\n\n        toNameWithIndex: function(name, indexes) {\n            var indexString = name;\n            for (var i = 0; i < indexes.length; i++) {\n                indexString = indexString + '[' + indexes[i] + ']';\n            }\n            return indexString;\n        },\n\n        getEl: function(name, indexes) {\n            var form = document.querySelector('form.mform[data-qtype=\"drawlines\"]');\n            return form.elements[this.toNameWithIndex(name, indexes)];\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @return {String} the value of that field.\n         */\n        getFormValue: function(name, indexes) {\n            var el = this.getEl(name, indexes);\n            return el.value;\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @param {String} value the value to set.\n         */\n        setFormValue: function(name, indexes, value) {\n            var el = this.getEl(name, indexes);\n            if (el.type === 'checkbox') {\n                el.checked = value;\n            } else {\n                el.value = value;\n            }\n        },\n\n        /**\n         * Create the shape representation of each dropZone.\n         */\n        createShapes: function() {\n            for (var lineNo = 0; lineNo < drawlinesForm.noOfLines; lineNo++) {\n                drawlinesForm.dropZones[lineNo] = new LineManager(lineNo);\n            }\n        },\n\n    };\n\n    /**\n     * @alias module:qtype_ddmarker/form\n     */\n    return {\n        /**\n         * Initialise the form javascript features.\n         * @param {Object} maxBgimageSize object with two properties: width and height.\n         */\n        init: drawlinesForm.init\n    };\n});\n"],"names":["define","$","dragDrop","Line","LineManager","lineNo","svgEl","line","make","this","getCoordinatesFromForm","getLabel","getLineType","updateCoordinatesFromForm","prototype","svg","coordinates","validateFormCoordinates","parse","getCoordinates","currentyActive","isActive","removeFromSvg","addToSvg","setActive","updateSvgEl","setCoordinatesInForm","coords","regexp","test","linecoords","drawlinesForm","setFormValue","getFormValue","updateLabel","label","labelstart","labelend","updateSvg","handles","getHandlePositions","i","moveHandles","length","childNodes","setAttribute","x","y","editHandles","changeShape","newLineType","getType","getSimilar","getAttribute","match","Error","makeSvg","makeMoveHandle","makeEditHandle","index","point","handleclass","moveHandle","createSvgElement","editHandle","makeDragProxy","dragProxy","document","createElement","style","position","top","left","width","height","body","appendChild","handleMouseEvents","e","handleIndex","handleType","info","prepare","start","changingDropZone","lastX","parseInt","lastY","bgImg","querySelector","maxX","maxY","pageX","pageY","edit","normalizeShape","move","moveDrags","removeChild","handleKeyPress","event","drag","code","preventDefault","focus","parentNode","fp","noOfLines","dropZones","init","createShapes","filePickers","setupEventHandlers","waitForFilePickerToInitialise","draftItemIdsToName","nameToParentNode","undefined","querySelectorAll","forEach","filepicker","value","name","file","fileAnchor","href","innerHTML","draftitemid","loadPreviewImage","getElementById","setupPreviewArea","img","addEventListener","afterPreviewImageLoaded","once","src","previewareaheader","insertAdjacentHTML","lineSelector","target","matches","ids","dropzoneNo","inputType","dropZone","getSvg","previewArea","closest","dropzoneElement","setElementActive","handleEventLine","handleEventMove","handleEventEdit","svgElement","activeDropzones","dataset","activeDropzone","classList","remove","form","updateSvgDisplay","lines","toNameWithIndex","indexes","indexString","getEl","elements","el","type","checked"],"mappings":"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"}