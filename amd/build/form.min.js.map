{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This class provides the enhancements to the drawlines editing form.\n *\n * @module     qtype_drawlines/form\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/dragdrop', 'qtype_drawlines/line'], function($, dragDrop, Line,) {\n\n    /**\n     * Create the manager object that deals with keeping everything synchronised for one line.\n     *\n     * @param {int} lineNo the index of this line in the form. 0, 1, ....\n     * @constructor\n     */\n    function LineManager(lineNo) {\n        this.lineNo = lineNo;\n        this.svgEl = null;\n        this.line = Line.make(this.getCoordinatesFromForm(this.lineNo), this.getLabel(), this.getLineType());\n        this.updateCoordinatesFromForm();\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     *\n     * @param {SVGElement} [svg] the SVG element that is the preview.\n     */\n    LineManager.prototype.updateCoordinatesFromForm = function(svg) {\n        var coordinates = this.getCoordinatesFromForm(this.lineNo);\n\n        // Check if the coordinates are in the required format of 'x,y;r'.\n        if (!this.validateFormCoordinates(this.lineNo)) {\n            return;\n        }\n        // We don't need to scale the shape for editing form.\n        if (!this.line.parse(coordinates[0], coordinates[1], 1)) {\n            // Invalid coordinates. Don't update the preview.\n            return;\n        }\n\n        if (this.line.getCoordinates() !== coordinates) {\n            // Line coordinates have changed.\n            var currentyActive = this.isActive();\n            this.removeFromSvg();\n            if (svg) {\n                this.addToSvg(svg);\n                if (currentyActive) {\n                    this.setActive();\n                }\n            }\n        } else {\n            // Simple update.\n            this.updateSvgEl();\n        }\n        // Update the rounded coordinates if needed.\n        this.setCoordinatesInForm();\n    };\n\n    /**\n     * Validates if the given coordinates are in the correct format 'x,y;r'.\n     *\n     * @param {int} lineNo The lineNo of the form.\n     * @returns {boolean} True if the coordinates are valid, otherwise false.\n     */\n    LineManager.prototype.validateFormCoordinates = function(lineNo) {\n        var coords = this.getCoordinatesFromForm(lineNo);\n        var regexp = /^\\d+,\\d+;\\d+$/;\n        return regexp.test(coords[0]) && regexp.test(coords[1]);\n    };\n\n    /**\n     * Set the coordinates in the form to match the current shape.\n     */\n    LineManager.prototype.setCoordinatesInForm = function() {\n        var linecoords = this.line.getCoordinates();\n        drawlinesForm.setFormValue('zonestart', [this.lineNo], linecoords[0]);\n        drawlinesForm.setFormValue('zoneend', [this.lineNo], linecoords[1]);\n    };\n\n    /**\n     * Returns the coordinates for the line from the text input in the form.\n     *\n     * @param {int} lineNo\n     * @returns {Array} the coordinates.\n     */\n    LineManager.prototype.getCoordinatesFromForm = function(lineNo) {\n        var zonestart = drawlinesForm.getFormValue('zonestart', [lineNo]);\n        var zoneend = drawlinesForm.getFormValue('zoneend', [lineNo]);\n        return [zonestart, zoneend];\n    };\n\n    /**\n     * Update the labels.\n     */\n    LineManager.prototype.updateLabel = function() {\n        var label = this.getLabel();\n        if (this.line.labelstart !== label[0] || this.line.labelend !== label[1]) {\n            this.line.labelstart = label[0];\n            this.line.labelend = label[1];\n            this.updateSvgEl();\n        }\n    };\n\n    /**\n     * Returns the selected type of line in the form.\n     *\n     * @returns {String} 'linesegment','linesinglearrow', 'linedoublearrows', 'lineinfinite'.\n     */\n    LineManager.prototype.getLineType = function() {\n        return drawlinesForm.getFormValue('type', [this.lineNo]);\n    };\n\n    /**\n     * Returns the line labels in the form.\n     *\n     * @returns {Array} line labels text.\n     */\n    LineManager.prototype.getLabel = function() {\n        return [\n            drawlinesForm.getFormValue('labelstart', [this.lineNo]),\n            drawlinesForm.getFormValue('labelend', [this.lineNo])\n        ];\n    };\n\n    /**\n     * Update the shape of this drop zone (but not type) in an SVG image.\n     */\n    LineManager.prototype.updateSvgEl = function() {\n        if (this.svgEl === null) {\n            return;\n        }\n        if (!this.validateFormCoordinates(this.lineNo)) {\n            return;\n        }\n        this.line.updateSvg(this.svgEl);\n\n        // Adjust handles.\n        var handles = this.line.getHandlePositions();\n        if (handles === null) {\n            return;\n        }\n\n        // Move handle.\n        // The shape + its labels are the first few children of svgEl.\n        // Then comes the move handle followed by the edit handles.\n        var i = 0;\n        for (i = 0; i < handles.moveHandles.length; ++i) {\n            this.svgEl.childNodes[5 + i].setAttribute('cx', handles.moveHandles[i].x);\n            this.svgEl.childNodes[5 + i].setAttribute('cy', handles.moveHandles[i].y);\n        }\n\n        // Edit handles.\n        for (i = 0; i < handles.editHandles.length; ++i) {\n            this.svgEl.childNodes[7 + i].setAttribute('x', handles.editHandles[i].x - 6);\n            this.svgEl.childNodes[7 + i].setAttribute('y', handles.editHandles[i].y - 6);\n        }\n    };\n\n    /**\n     * Handle if the line type has changed.\n     *\n     * @param {SVGElement} [svg] an SVG element to add this new shape to.\n     */\n    LineManager.prototype.changeShape = function(svg) {\n        var newLineType = this.getLineType(),\n            currentyActive = this.isActive();\n        if (newLineType === this.line.getType()) {\n            return;\n        }\n\n        // It has really changed.\n        this.removeFromSvg();\n        if (newLineType !== 'choose') {\n            this.line = Line.getSimilar(newLineType, this.line);\n            if (svg) {\n                this.addToSvg(svg);\n                if (currentyActive) {\n                    this.setActive();\n                }\n            }\n        }\n    };\n\n    /**\n     * Find out if this line element is currently being edited.\n     *\n     * @return {boolean} true if it is.\n     */\n    LineManager.prototype.isActive = function() {\n        return this.svgEl !== null && this.svgEl.getAttribute('class').match(/\\bactive\\b/);\n    };\n\n    /**\n     * Set this line element as being edited.\n     */\n    LineManager.prototype.setActive = function() {\n        // Move this one to last, so that it is always on top.\n        // (Otherwise the handles may not be able to receive events.)\n        var parent = this.svgEl.parentNode;\n        parent.removeChild(this.svgEl);\n        parent.appendChild(this.svgEl);\n        this.svgEl.setAttribute('class', this.svgEl.getAttribute('class') + ' active');\n    };\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    LineManager.prototype.addToSvg = function(svg) {\n        if (this.svgEl !== null) {\n            throw new Error('this.svgEl already set');\n        }\n        if (!this.validateFormCoordinates(this.lineNo)) {\n            return;\n        }\n        this.svgEl = this.line.makeSvg(svg);\n        if (!this.svgEl) {\n            return;\n        }\n        this.svgEl.setAttribute('class', 'dropzone');\n        this.svgEl.setAttribute('data-dropzone-no', this.lineNo);\n\n        // Add handles.\n        var handles = this.line.getHandlePositions();\n        if (handles === null) {\n            return;\n        }\n\n        // Add handles to the line points.\n        this.makeMoveHandle(0, handles.moveHandles[0], \"handlestart move\");\n        this.makeMoveHandle(1, handles.moveHandles[1], \"handleend move\");\n\n        // Add edithandles to the circles to set the start and end radius.\n        this.makeEditHandle(0, handles.editHandles[0], \"handlestart edit\");\n        this.makeEditHandle(1, handles.editHandles[1], \"handleend edit\");\n    };\n\n    /**\n     * Add a new move handle.\n     *\n     * @param {int} index the handle index.\n     * @param {Point} point the point at which to add the handle.\n     * @param {String} handleclass the class attribute to add to the handle.\n     */\n    LineManager.prototype.makeMoveHandle = function(index, point, handleclass) {\n        var moveHandle = Line.createSvgElement(this.svgEl, 'circle');\n        moveHandle.setAttribute('cx', point.x);\n        moveHandle.setAttribute('cy', point.y);\n        moveHandle.setAttribute('r', 7);\n        moveHandle.setAttribute('class', handleclass);\n        moveHandle.setAttribute('data-move-handle-no', index);\n    };\n\n    /**\n     * Add a new edit handle.\n     *\n     * @param {int} index the handle index.\n     * @param {Point} point the point at which to add the handle.\n     * @param {String} handleclass the class attribute to add to the handle.\n     */\n    LineManager.prototype.makeEditHandle = function(index, point, handleclass) {\n        var editHandle = Line.createSvgElement(this.svgEl, 'rect');\n        editHandle.setAttribute('x', point.x - 6);\n        editHandle.setAttribute('y', point.y - 6);\n        editHandle.setAttribute('width', 11);\n        editHandle.setAttribute('height', 11);\n        editHandle.setAttribute('class', handleclass);\n        editHandle.setAttribute('data-edit-handle-no', index);\n    };\n\n    /**\n     * Start responding to dragging the move handle.\n     *\n     * @param {Event} e Event object\n     * @param {String} handleIndex\n     */\n    LineManager.prototype.handleMove = function(e, handleIndex) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n\n        var movingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground'),\n            maxX = bgImg.width,\n            maxY = bgImg.height;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            movingDropZone.line.move(handleIndex, pageX - lastX, pageY - lastY, maxX, maxY);\n            lastX = pageX;\n            lastY = pageY;\n            movingDropZone.updateSvgEl();\n            movingDropZone.setCoordinatesInForm();\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    LineManager.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Start responding to dragging the move handle.\n     *\n     * @param {Event} e Event object\n     * @param {String} handleIndex\n     */\n    LineManager.prototype.handleEdit = function(e, handleIndex) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n\n        var changingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground'),\n            maxX = bgImg.width,\n            maxY = bgImg.height;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            changingDropZone.line.edit(handleIndex, pageX - lastX, pageY - lastY, maxX, maxY);\n            lastX = pageX;\n            lastY = pageY;\n            changingDropZone.updateSvgEl();\n            changingDropZone.setCoordinatesInForm();\n        }, function() {\n            document.body.removeChild(dragProxy);\n            changingDropZone.line.normalizeShape();\n            changingDropZone.updateSvgEl();\n            changingDropZone.setCoordinatesInForm();\n        });\n    };\n\n    /**\n     * Remove this line from an SVG image.\n     */\n    LineManager.prototype.removeFromSvg = function() {\n        if (this.svgEl !== null) {\n            this.svgEl.parentNode.removeChild(this.svgEl);\n            this.svgEl = null;\n        }\n    };\n\n    /**\n     * Singleton object for managing all the parts of the form.\n     */\n    const drawlinesForm = {\n\n        /**\n         * @var {object} for interacting with the file pickers.\n         */\n        fp: null, // Object containing functions associated with the file picker.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {LineManager[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * Init method.\n         */\n        init: function() {\n            drawlinesForm.noOfLines = drawlinesForm.getFormValue('numberoflines', []);\n            drawlinesForm.createShapes();\n            drawlinesForm.fp = drawlinesForm.filePickers();\n            drawlinesForm.setupEventHandlers();\n            drawlinesForm.waitForFilePickerToInitialise();\n        },\n\n        /**\n         * Utility to get the file name and url from the filepicker.\n         *\n         * @returns {Object} object containing functions {file, name}\n         */\n        filePickers: function() {\n            var draftItemIdsToName;\n            var nameToParentNode;\n            if (draftItemIdsToName === undefined) {\n                draftItemIdsToName = {};\n                nameToParentNode = {};\n                var fp = document.querySelectorAll('form.mform[data-qtype=\"drawlines\"] input.filepickerhidden');\n                fp.forEach(function(filepicker) {\n                    draftItemIdsToName[filepicker.value] = filepicker.name;\n                    nameToParentNode[filepicker.name] = filepicker.parentNode;\n                });\n            }\n\n            return {\n                file: function(name) {\n                    var parentNode = nameToParentNode[name];\n                    if (parentNode) {\n                        var fileAnchor = parentNode.querySelector('div.filepicker-filelist a');\n                        if (fileAnchor) {\n                            return {href: fileAnchor.href, name: fileAnchor.innerHTML};\n                        }\n                    }\n                    return {href: null, name: null};\n                },\n\n                name: function(draftitemid) {\n                    return draftItemIdsToName[draftitemid];\n                }\n            };\n        },\n\n        /**\n         * Loads the preview background image.\n         */\n        loadPreviewImage: function() {\n            if (!document.getElementById('dlines-droparea')) {\n                drawlinesForm.setupPreviewArea();\n            }\n            var img = document.querySelector('fieldset#id_previewareaheader .dropbackground');\n            if (img) {\n                img.addEventListener('load', function() {\n                    drawlinesForm.afterPreviewImageLoaded();\n                }, {once: true});\n                img.src = drawlinesForm.fp.file('bgimage').href;\n            }\n        },\n\n        /**\n         * Add html for the preview area.\n         */\n        setupPreviewArea: function() {\n            var previewareaheader = document.querySelector('fieldset#id_previewareaheader');\n            if (drawlinesForm.fp.file('bgimage').href !== null) {\n                previewareaheader.insertAdjacentHTML('beforeend',\n                    '<div class=\"ddarea que drawlines\">' +\n                    '  <div id=\"dlines-droparea\" class=\"droparea\">' +\n                    '    <img class=\"dropbackground\" />' +\n                    '    <div id=\"dlines-dropzone\" class=\"dropzones\"></div>' +\n                    '  </div>' +\n                    '  <div class=\"dragitems\"></div>' +\n                    '</div>');\n            }\n        },\n\n        /**\n         * Events linked to form actions.\n         */\n        setupEventHandlers: function() {\n            // Changes to Drop zones section: shape, coordinates and marker.\n            var lineSelector = 'fieldset#id_linexheader_' + '0';\n\n            for (var lineNo = 0; lineNo < drawlinesForm.noOfLines; lineNo++) {\n                lineSelector = 'fieldset#id_linexheader_' + lineNo;\n                document.querySelector(lineSelector).addEventListener('input', function(e) {\n                    if (e.target.matches('input, select')) {\n                        var ids = e.target.name.match(/^([a-z]*)\\[(\\d+)]$/);\n                        var id = e.target.name;\n                        if (!id) {\n                            return;\n                        }\n                        var dropzoneNo = ids[2],\n                            inputType = ids[1],\n                            dropZone = drawlinesForm.dropZones[dropzoneNo];\n\n                        switch (inputType) {\n                            case 'zonestart':\n                            case 'zoneend':\n                                dropZone.updateCoordinatesFromForm(drawlinesForm.getSvg());\n                                break;\n\n                            case 'type':\n                                dropZone.updateCoordinatesFromForm(drawlinesForm.getSvg());\n                                dropZone.changeShape(drawlinesForm.getSvg());\n                                break;\n\n                            case 'labelstart':\n                            case 'labelend':\n                                dropZone.updateLabel();\n                                break;\n                        }\n                    }\n                });\n            }\n\n            // Click to toggle graphical editing.\n            var previewArea = document.querySelector('fieldset#id_previewareaheader');\n            previewArea.addEventListener('click', function(event) {\n                if (event.target.closest('g.dropzone')) {\n                    var dropzoneElement = event.target.closest('g.dropzone');\n\n                    var dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                    var currentlyActive = drawlinesForm.dropZones[dropzoneNo].isActive();\n\n                    // Find all active dropzones and remove the 'active' class\n                    var svgElement = drawlinesForm.getSvg();\n                    var activeDropzones = svgElement.querySelectorAll('.dropzone.active');\n                    activeDropzones.forEach(function(activeDropzone) {\n                        activeDropzone.classList.remove('active');\n                    });\n\n                    // If the dropzone was not active, set it as active\n                    if (!currentlyActive) {\n                        drawlinesForm.dropZones[dropzoneNo].setActive();\n                    }\n                }\n            });\n\n            // Add event listeners to the 'previewArea'.\n            previewArea.addEventListener('mousedown', drawlinesForm.handleEventMove);\n            previewArea.addEventListener('touchstart', drawlinesForm.handleEventMove);\n            previewArea.addEventListener('mousedown', drawlinesForm.handleEventEdit);\n            previewArea.addEventListener('touchstart', drawlinesForm.handleEventEdit);\n        },\n\n        /**\n         * Handle events linked to moving the line.\n         *\n         * @param {Event} event\n         */\n        handleEventMove: function(event) {\n            var dropzoneElement, dropzoneNo, handleIndex;\n            if (event.target.closest('.dropzone .handlestart.move')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-move-handle-no');\n                handleIndex = 'startcircle';\n                drawlinesForm.dropZones[dropzoneNo].handleMove(event, handleIndex);\n            } else if (event.target.closest('.dropzone .handleend.move')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-move-handle-no');\n                handleIndex = 'endcircle';\n                drawlinesForm.dropZones[dropzoneNo].handleMove(event, handleIndex);\n            }\n        },\n\n        /**\n         * Handle events linked to moving the rectangle to change the radius which is used for grading.\n         *\n         * @param {Event} event\n         */\n        handleEventEdit: function(event) {\n            var dropzoneElement, dropzoneNo, handleIndex;\n            if (event.target.closest('.dropzone .handlestart.edit')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-edit-handle-no');\n                drawlinesForm.dropZones[dropzoneNo].handleEdit(event, handleIndex);\n            } else if (event.target.closest('.dropzone .handleend.edit')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                handleIndex = event.target.getAttribute('data-edit-handle-no');\n                drawlinesForm.dropZones[dropzoneNo].handleEdit(event, handleIndex);\n            }\n        },\n\n        /**\n         * Waits for the file-pickers to be sufficiently ready before initialising the preview.\n         */\n        waitForFilePickerToInitialise: function() {\n            // Add event listener for change events on the file picker elements\n            document.querySelectorAll('form.mform[data-qtype=\"drawlines\"]').forEach(function(form) {\n                form.addEventListener('change', drawlinesForm.loadPreviewImage);\n            });\n\n            // Check if the element with id 'id_droparea' exists\n            if (document.getElementById('dlines-droparea')) {\n                drawlinesForm.loadPreviewImage();\n            } else {\n                // Setup preview area when the background image is uploaded the first time\n                drawlinesForm.setupPreviewArea();\n                drawlinesForm.loadPreviewImage();\n            }\n        },\n\n        /**\n         * Functions to run after background image loaded.\n         */\n        afterPreviewImageLoaded: function() {\n            var bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground');\n            // Place the dropzone area over the background image (adding one to account for the border).\n            document.getElementById('dlines-dropzone').style.position = 'relative';\n            document.getElementById('dlines-dropzone').style.top = (bgImg.height + 1) * -1 + \"px\";\n            document.getElementById('dlines-droparea').style.height = bgImg.height + 20 + \"px\";\n            drawlinesForm.updateSvgDisplay();\n        },\n\n        /**\n         * Draws or re-draws all dropzones in the preview area based on form data.\n         * Call this function when there is a change in the form data.\n         */\n        updateSvgDisplay: function() {\n            var bgImg = document.querySelector('fieldset#id_previewareaheader .dropbackground');\n\n            if (drawlinesForm.getSvg()) {\n                // Already exists, just need to be updated.\n                for (var lineNo = 0; lineNo < drawlinesForm.noOfLines; lineNo++) {\n                    drawlinesForm.dropZones[lineNo].updateSvgEl();\n                }\n\n            } else {\n                // Create.\n                document.getElementById('dlines-dropzone').innerHTML =\n                    '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dropzones\" ' +\n                    'width=\"' + bgImg.width + '\" ' +\n                    'height=\"' + bgImg.height + '\">' +\n                    '</svg>';\n                for (var lines = 0; lines < drawlinesForm.noOfLines; lines++) {\n                    drawlinesForm.dropZones[lines].addToSvg(drawlinesForm.getSvg());\n                }\n            }\n        },\n\n        /**\n         * Get the SVG element, if there is one, otherwise return null.\n         *\n         * @returns {SVGElement|null} the SVG element or null.\n         */\n        getSvg: function() {\n            var svg = document.querySelector('fieldset#id_previewareaheader svg');\n            if (svg === null) {\n                return null;\n            } else {\n                return svg;\n            }\n        },\n\n        toNameWithIndex: function(name, indexes) {\n            var indexString = name;\n            for (var i = 0; i < indexes.length; i++) {\n                indexString = indexString + '[' + indexes[i] + ']';\n            }\n            return indexString;\n        },\n\n        getEl: function(name, indexes) {\n            var form = document.querySelector('form.mform[data-qtype=\"drawlines\"]');\n            return form.elements[this.toNameWithIndex(name, indexes)];\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @return {String} the value of that field.\n         */\n        getFormValue: function(name, indexes) {\n            var el = this.getEl(name, indexes);\n            return el.value;\n        },\n\n        /**\n         * Helper to get the value of a form elements with name like \"zonestart[0]\".\n         *\n         * @param {String} name the base name, e.g. 'zonestart'.\n         * @param {String[]} indexes the indexes, e.g. ['0'].\n         * @param {String} value the value to set.\n         */\n        setFormValue: function(name, indexes, value) {\n            var el = this.getEl(name, indexes);\n            if (el.type === 'checkbox') {\n                el.checked = value;\n            } else {\n                el.value = value;\n            }\n        },\n\n        /**\n         * Create the shape representation of each dropZone.\n         */\n        createShapes: function() {\n            for (var lineNo = 0; lineNo < drawlinesForm.noOfLines; lineNo++) {\n                drawlinesForm.dropZones[lineNo] = new LineManager(lineNo);\n            }\n        },\n\n    };\n\n    /**\n     * @alias module:qtype_ddmarker/form\n     */\n    return {\n        /**\n         * Initialise the form javascript features.\n         * @param {Object} maxBgimageSize object with two properties: width and height.\n         */\n        init: drawlinesForm.init\n    };\n});\n"],"names":["define","$","dragDrop","Line","LineManager","lineNo","svgEl","line","make","this","getCoordinatesFromForm","getLabel","getLineType","updateCoordinatesFromForm","prototype","svg","coordinates","validateFormCoordinates","parse","getCoordinates","currentyActive","isActive","removeFromSvg","addToSvg","setActive","updateSvgEl","setCoordinatesInForm","coords","regexp","test","linecoords","drawlinesForm","setFormValue","getFormValue","updateLabel","label","labelstart","labelend","updateSvg","handles","getHandlePositions","i","moveHandles","length","childNodes","setAttribute","x","y","editHandles","changeShape","newLineType","getType","getSimilar","getAttribute","match","parent","parentNode","removeChild","appendChild","Error","makeSvg","makeMoveHandle","makeEditHandle","index","point","handleclass","moveHandle","createSvgElement","editHandle","handleMove","e","handleIndex","info","prepare","start","movingDropZone","lastX","lastY","dragProxy","makeDragProxy","bgImg","document","querySelector","maxX","width","maxY","height","pageX","pageY","move","body","createElement","style","position","top","left","handleEdit","changingDropZone","edit","normalizeShape","fp","noOfLines","dropZones","init","createShapes","filePickers","setupEventHandlers","waitForFilePickerToInitialise","draftItemIdsToName","nameToParentNode","undefined","querySelectorAll","forEach","filepicker","value","name","file","fileAnchor","href","innerHTML","draftitemid","loadPreviewImage","getElementById","setupPreviewArea","img","addEventListener","afterPreviewImageLoaded","once","src","previewareaheader","insertAdjacentHTML","lineSelector","target","matches","ids","dropzoneNo","inputType","dropZone","getSvg","previewArea","event","closest","dataset","currentlyActive","activeDropzone","classList","remove","handleEventMove","handleEventEdit","form","updateSvgDisplay","lines","toNameWithIndex","indexes","indexString","getEl","elements","el","type","checked"],"mappings":"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"}